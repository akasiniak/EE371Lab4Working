
pokemon.elf:     file format elf32-littlenios2
pokemon.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000201c0

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00005110 memsz 0x00005110 flags r-x
    LOAD off    0x00006130 vaddr 0x00025130 paddr 0x000253ec align 2**12
         filesz 0x000002bc memsz 0x000002bc flags rw-
    LOAD off    0x000066a8 vaddr 0x000256a8 paddr 0x000256a8 align 2**12
         filesz 0x00000000 memsz 0x0000296c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004978  000201c0  000201c0  000011c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000005f8  00024b38  00024b38  00005b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002bc  00025130  000253ec  00006130  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000296c  000256a8  000256a8  000066a8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  00028014  00028014  000063ec  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000063ec  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000006d8  00000000  00000000  00006410  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00009991  00000000  00000000  00006ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003409  00000000  00000000  00010479  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003965  00000000  00000000  00013882  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000e1c  00000000  00000000  000171e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002109  00000000  00000000  00018004  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000028ac  00000000  00000000  0001a10d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0001c9bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000480  00000000  00000000  0001c9e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001ecc6  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0001ecc9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001eccc  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001eccd  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001ecce  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001ecd2  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001ecd6  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0001ecda  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0001ece3  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0001ecec  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000009  00000000  00000000  0001ecf5  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000024  00000000  00000000  0001ecfe  2**0
                  CONTENTS, READONLY
 29 .jdi          00003a83  00000000  00000000  0001ed22  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0006df89  00000000  00000000  000227a5  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
000201c0 l    d  .text	00000000 .text
00024b38 l    d  .rodata	00000000 .rodata
00025130 l    d  .rwdata	00000000 .rwdata
000256a8 l    d  .bss	00000000 .bss
00028014 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../pokemon_bsp//obj/HAL/src/crt0.o
000201f8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00020094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 communications.c
00000000 l    df *ABS*	00000000 defineAttacks.c
000256dc l     O .bss	00001518 allAttacks.2722
00000000 l    df *ABS*	00000000 definePlayer.c
00026bf4 l     O .bss	000000f0 pokePartyMe.1607
00026ce4 l     O .bss	000000f0 pokePartyOppo.1614
00000000 l    df *ABS*	00000000 definePokemon.c
00026dd4 l     O .bss	000001b0 moveSet0.2725
00026f84 l     O .bss	000003c0 allPokemon.2723
00027344 l     O .bss	000001b0 moveSet1.2727
000274f4 l     O .bss	000001b0 moveSet2.2729
000276a4 l     O .bss	000001b0 moveSet3.2731
00027854 l     O .bss	000001b0 moveSet4.2733
00027a04 l     O .bss	000001b0 moveSet5.2735
00027bb4 l     O .bss	000001b0 moveSet6.2737
00027d64 l     O .bss	000001b0 moveSet7.2739
00000000 l    df *ABS*	00000000 gameplayMechanics.c
00000000 l    df *ABS*	00000000 simplifiedPokemon.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 ctype_.c
00024e9e l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
000256a8 l     O .bss	00000008 _randbits
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfprintf.c
00022d74 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 impure.c
00025130 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_load.c
0002389c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
00023b7c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00023e50 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
00023f44 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00023fdc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
00021394 g     F .text	00000118 definePlayerOppo
00022be4 g     F .text	0000001c putchar
00023988 g     F .text	00000050 alt_main
00022c00 g     F .text	00000080 _puts_r
00027f14 g     O .bss	00000100 alt_irq
000253ec g       *ABS*	00000000 __flash_rwdata_start
000233e0 g     F .text	00000054 _gettimeofday_r
00022b90 g     F .text	0000004c printf
00022684 g     F .text	00000098 printPlayer
00022660 g     F .text	00000024 printPokemon
00022174 g     F .text	000001c0 calculateDamage
000253cc g     O .rwdata	00000004 jtag_uart
00020000 g     F .entry	0000001c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
000256b0 g     O .bss	00000004 errno
000256c8 g     O .bss	00000004 alt_argv
0002d3b8 g       *ABS*	00000000 _gp
00025238 g     O .rwdata	00000180 alt_fd_list
00022bdc g     F .text	00000008 _putchar_r
00022b2c g     F .text	00000028 memcpy
00022c80 g     F .text	00000014 puts
00023cd0 g     F .text	000000ec altera_avalon_jtag_uart_read
00022b54 g     F .text	0000003c _printf_r
00022a48 g     F .text	00000064 .hidden __udivsi3
000256b4 g     O .bss	00000008 alt_timezone
00024300 g     F .text	00000090 alt_icache_flush
000253e0 g     O .rwdata	00000004 alt_max_fd
00024540 g     F .text	000005c4 .hidden __umoddi3
00020458 g     F .text	00000118 rockPaperScissor
000253bc g     O .rwdata	00000004 _global_impure_ptr
000214ac g     F .text	00000918 definePokemon
00028014 g       *ABS*	00000000 __bss_end
000241ec g     F .text	000000f0 alt_iic_isr_register
00023644 g     F .text	00000064 alt_getchar
00023a74 g     F .text	00000108 alt_tick
000201fc g     F .text	000000d0 send
000241a0 g     F .text	0000004c alt_ic_irq_enabled
00022444 g     F .text	00000080 checkGameOver
000239d8 g     F .text	0000009c alt_alarm_stop
000256d8 g     O .bss	00000004 alt_irq_active
00022598 g     F .text	00000070 readSRAM
00020000 g       *ABS*	00000000 __alt_mem_onchip_mem
000200ec g     F .exceptions	000000d4 alt_irq_handler
00025210 g     O .rwdata	00000028 alt_dev_null
00023fbc g     F .text	00000020 alt_dcache_flush_all
000253ec g       *ABS*	00000000 __ram_rwdata_end
000253d8 g     O .rwdata	00000008 alt_dev_list
00023bb8 g     F .text	0000009c write
00023488 g     F .text	00000058 _putc_r
00025130 g       *ABS*	00000000 __ram_rodata_end
00022aac g     F .text	00000058 .hidden __umodsi3
00028014 g       *ABS*	00000000 end
00022334 g     F .text	000000bc updateHP
00034000 g       *ABS*	00000000 __alt_stack_pointer
00023ec8 g     F .text	0000007c alt_avalon_timer_sc_init
00023dbc g     F .text	00000094 altera_avalon_jtag_uart_write
00022de0 g     F .text	0000052c ___vfprintf_internal_r
000243b0 g     F .text	00000190 __call_exitprocs
000201c0 g     F .text	0000003c _start
000256d0 g     O .bss	00000004 _alt_tick_rate
00022ca8 g     F .text	00000060 rand
00021dc4 g     F .text	000002bc getCommand
000256d4 g     O .bss	00000004 _alt_nticks
00023c8c g     F .text	00000044 alt_sys_init
00022b04 g     F .text	00000028 .hidden __mulsi3
00025130 g       *ABS*	00000000 __ram_rwdata_start
00024b38 g       *ABS*	00000000 __ram_rodata_start
00028014 g       *ABS*	00000000 __alt_stack_base
00023328 g     F .text	000000b8 __sfvwrite_small_dev
000236a8 g     F .text	000001f4 gettimeofday
000220ec g     F .text	00000088 switchPokemon
000256a8 g       *ABS*	00000000 __bss_start
0002271c g     F .text	00000234 main
000256cc g     O .bss	00000004 alt_envp
00022c94 g     F .text	00000014 srand
00022d24 g     F .text	00000050 time
0002127c g     F .text	00000118 definePlayerMe
000253e4 g     O .rwdata	00000004 alt_errno
00023434 g     F .text	00000054 putc
00022950 g     F .text	00000084 .hidden __divsi3
00024b38 g       *ABS*	00000000 __flash_rodata_start
00023c54 g     F .text	00000038 alt_irq_init
0002502e g     O .rodata	00000100 .hidden __clz_tab
000234e0 g     F .text	00000058 _write_r
000223f0 g     F .text	00000054 processInformation
000253c0 g     O .rwdata	00000004 _impure_ptr
00022608 g     F .text	00000058 writeSRAM
000256c4 g     O .bss	00000004 alt_argc
000202cc g     F .text	0000006c receive
00020020 g       .exceptions	00000000 alt_irq_entry
000253d0 g     O .rwdata	00000008 alt_fs_list
000256bc g     O .bss	00000008 alt_resettime
00020338 g     F .text	0000009c sendInfoToOpponent
00020020 g       *ABS*	00000000 __ram_exceptions_start
0002403c g     F .text	00000050 alt_ic_isr_register
000253ec g       *ABS*	00000000 _edata
00028014 g       *ABS*	00000000 _end
000201c0 g       *ABS*	00000000 __ram_exceptions_end
00024114 g     F .text	0000008c alt_ic_irq_disable
000242dc g     F .text	00000024 altera_nios2_qsys_irq_init
00024390 g     F .text	00000020 exit
000229d4 g     F .text	00000074 .hidden __modsi3
000253b8 g     O .rwdata	00000004 __ctype_ptr__
00034000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00024d9d g     O .rodata	00000101 _ctype_
00024b04 g     F .text	00000034 _exit
00023538 g     F .text	0000010c .hidden __muldi3
00020570 g     F .text	00000d0c defineAttacks
00022d08 g     F .text	0000001c strlen
000224c4 g     F .text	000000d4 handleGameOver
00024008 g     F .text	00000034 alt_icache_flush_all
00022080 g     F .text	0000006c processCommand
000253e8 g     O .rwdata	00000004 alt_priority_mask
0002408c g     F .text	00000088 alt_ic_irq_enable
0002330c g     F .text	0000001c __vfprintf_internal
000203d4 g     F .text	00000084 receiveInfoFromOpponent
000253c4 g     O .rwdata	00000008 alt_alarm_list
00023f80 g     F .text	0000003c close
00023904 g     F .text	00000084 alt_load



Disassembly of section .entry:

00020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   20000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
   20004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   20008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   2000c:	00bffd16 	blt	zero,r2,20004 <__alt_data_end+0xfffec004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20010:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20014:	08407014 	ori	at,at,448
    jmp r1
   20018:	0800683a 	jmp	at
   2001c:	00000000 	call	0 <__alt_mem_onchip_mem-0x20000>

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200ec0 	call	200ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000306 	br	20098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   2008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)

00020094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   20094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   20098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   2009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200e8:	ef80083a 	eret

000200ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200ec:	defff904 	addi	sp,sp,-28
   200f0:	dfc00615 	stw	ra,24(sp)
   200f4:	df000515 	stw	fp,20(sp)
   200f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   200fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20100:	0005313a 	rdctl	r2,ipending
   20104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20114:	00800044 	movi	r2,1
   20118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2011c:	e0fffb17 	ldw	r3,-20(fp)
   20120:	e0bffc17 	ldw	r2,-16(fp)
   20124:	1884703a 	and	r2,r3,r2
   20128:	10001426 	beq	r2,zero,2017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2012c:	008000b4 	movhi	r2,2
   20130:	109fc504 	addi	r2,r2,32532
   20134:	e0fffd17 	ldw	r3,-12(fp)
   20138:	180690fa 	slli	r3,r3,3
   2013c:	10c5883a 	add	r2,r2,r3
   20140:	10c00017 	ldw	r3,0(r2)
   20144:	008000b4 	movhi	r2,2
   20148:	109fc504 	addi	r2,r2,32532
   2014c:	e13ffd17 	ldw	r4,-12(fp)
   20150:	200890fa 	slli	r4,r4,3
   20154:	1105883a 	add	r2,r2,r4
   20158:	10800104 	addi	r2,r2,4
   2015c:	10800017 	ldw	r2,0(r2)
   20160:	1009883a 	mov	r4,r2
   20164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2016c:	0005313a 	rdctl	r2,ipending
   20170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20174:	e0bfff17 	ldw	r2,-4(fp)
   20178:	00000706 	br	20198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2017c:	e0bffc17 	ldw	r2,-16(fp)
   20180:	1085883a 	add	r2,r2,r2
   20184:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20188:	e0bffd17 	ldw	r2,-12(fp)
   2018c:	10800044 	addi	r2,r2,1
   20190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   20194:	003fe106 	br	2011c <__alt_data_end+0xfffec11c>

    active = alt_irq_pending ();
   20198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   2019c:	e0bffb17 	ldw	r2,-20(fp)
   201a0:	103fdb1e 	bne	r2,zero,20110 <__alt_data_end+0xfffec110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201a4:	0001883a 	nop
}
   201a8:	0001883a 	nop
   201ac:	e037883a 	mov	sp,fp
   201b0:	dfc00117 	ldw	ra,4(sp)
   201b4:	df000017 	ldw	fp,0(sp)
   201b8:	dec00204 	addi	sp,sp,8
   201bc:	f800283a 	ret

Disassembly of section .text:

000201c0 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   201c0:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   201c4:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
   201c8:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   201cc:	d6b4ee14 	ori	gp,gp,54200
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   201d0:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   201d4:	1095aa14 	ori	r2,r2,22184

    movhi r3, %hi(__bss_end)
   201d8:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   201dc:	18e00514 	ori	r3,r3,32788

    beq r2, r3, 1f
   201e0:	10c00326 	beq	r2,r3,201f0 <_start+0x30>

0:
    stw zero, (r2)
   201e4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   201e8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   201ec:	10fffd36 	bltu	r2,r3,201e4 <__alt_data_end+0xfffec1e4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   201f0:	00239040 	call	23904 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   201f4:	00239880 	call	23988 <alt_main>

000201f8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   201f8:	003fff06 	br	201f8 <__alt_data_end+0xfffec1f8>

000201fc <send>:
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
//#include "sys/alt_stdio.h"

void send(char data) {
   201fc:	defffd04 	addi	sp,sp,-12
   20200:	df000215 	stw	fp,8(sp)
   20204:	df000204 	addi	fp,sp,8
   20208:	2005883a 	mov	r2,r4
   2020c:	e0bfff05 	stb	r2,-4(fp)
   volatile int i;
	*PARALLEL_SEND = data;
   20210:	00800134 	movhi	r2,4
   20214:	10842c04 	addi	r2,r2,4272
   20218:	e0ffff03 	ldbu	r3,-4(fp)
   2021c:	10c00005 	stb	r3,0(r2)
   *LOAD = 1;
   20220:	00800134 	movhi	r2,4
   20224:	10842004 	addi	r2,r2,4224
   20228:	00c00044 	movi	r3,1
   2022c:	10c00005 	stb	r3,0(r2)
   for(i = 0; i < 10000; i++){}
   20230:	e03ffe15 	stw	zero,-8(fp)
   20234:	00000306 	br	20244 <send+0x48>
   20238:	e0bffe17 	ldw	r2,-8(fp)
   2023c:	10800044 	addi	r2,r2,1
   20240:	e0bffe15 	stw	r2,-8(fp)
   20244:	e0bffe17 	ldw	r2,-8(fp)
   20248:	1089c410 	cmplti	r2,r2,10000
   2024c:	103ffa1e 	bne	r2,zero,20238 <__alt_data_end+0xfffec238>

   *TRANSMIT = 1;
   20250:	00800134 	movhi	r2,4
   20254:	10842404 	addi	r2,r2,4240
   20258:	00c00044 	movi	r3,1
   2025c:	10c00005 	stb	r3,0(r2)
   *LOAD = 0;              // Maybe too fast? Add delay?
   20260:	00800134 	movhi	r2,4
   20264:	10842004 	addi	r2,r2,4224
   20268:	10000005 	stb	zero,0(r2)
   while (!(*CHAR_SENT & 0b1)) {
   2026c:	00000106 	br	20274 <send+0x78>
   	continue;
   20270:	0001883a 	nop
   *LOAD = 1;
   for(i = 0; i < 10000; i++){}

   *TRANSMIT = 1;
   *LOAD = 0;              // Maybe too fast? Add delay?
   while (!(*CHAR_SENT & 0b1)) {
   20274:	00800134 	movhi	r2,4
   20278:	10841804 	addi	r2,r2,4192
   2027c:	10800003 	ldbu	r2,0(r2)
   20280:	10803fcc 	andi	r2,r2,255
   20284:	1080004c 	andi	r2,r2,1
   20288:	103ff926 	beq	r2,zero,20270 <__alt_data_end+0xfffec270>
   	continue;
   }
   for(i = 0; i < 10000; i++){}
   2028c:	e03ffe15 	stw	zero,-8(fp)
   20290:	00000306 	br	202a0 <send+0xa4>
   20294:	e0bffe17 	ldw	r2,-8(fp)
   20298:	10800044 	addi	r2,r2,1
   2029c:	e0bffe15 	stw	r2,-8(fp)
   202a0:	e0bffe17 	ldw	r2,-8(fp)
   202a4:	1089c410 	cmplti	r2,r2,10000
   202a8:	103ffa1e 	bne	r2,zero,20294 <__alt_data_end+0xfffec294>
//   for(i = 0; i < 1000; i++){}
//   printf("parallel send : %d \n", *PARALLEL_SEND);

   *TRANSMIT = 0;
   202ac:	00800134 	movhi	r2,4
   202b0:	10842404 	addi	r2,r2,4240
   202b4:	10000005 	stb	zero,0(r2)
}
   202b8:	0001883a 	nop
   202bc:	e037883a 	mov	sp,fp
   202c0:	df000017 	ldw	fp,0(sp)
   202c4:	dec00104 	addi	sp,sp,4
   202c8:	f800283a 	ret

000202cc <receive>:

char receive() {
   202cc:	defffe04 	addi	sp,sp,-8
   202d0:	df000115 	stw	fp,4(sp)
   202d4:	df000104 	addi	fp,sp,4
   bool received;
   received = false;
   202d8:	e03fff15 	stw	zero,-4(fp)
   while(*CHAR_RECEIVED);
   202dc:	0001883a 	nop
   202e0:	00800134 	movhi	r2,4
   202e4:	10841c04 	addi	r2,r2,4208
   202e8:	10800003 	ldbu	r2,0(r2)
   202ec:	10803fcc 	andi	r2,r2,255
   202f0:	1080201c 	xori	r2,r2,128
   202f4:	10bfe004 	addi	r2,r2,-128
   202f8:	103ff91e 	bne	r2,zero,202e0 <__alt_data_end+0xfffec2e0>
   while(!*CHAR_RECEIVED);
   202fc:	0001883a 	nop
   20300:	00800134 	movhi	r2,4
   20304:	10841c04 	addi	r2,r2,4208
   20308:	10800003 	ldbu	r2,0(r2)
   2030c:	10803fcc 	andi	r2,r2,255
   20310:	1080201c 	xori	r2,r2,128
   20314:	10bfe004 	addi	r2,r2,-128
   20318:	103ff926 	beq	r2,zero,20300 <__alt_data_end+0xfffec300>
   return *PARALLEL_RECEIVE;
   2031c:	00800134 	movhi	r2,4
   20320:	10842804 	addi	r2,r2,4256
   20324:	10800003 	ldbu	r2,0(r2)
//  do
//    myAnswer = alt_getchar();
//  while(isspace(myAnswer));
//  printf("oppo inputed: %d\n", myAnswer - '0');
//  return  myAnswer - '0';
}
   20328:	e037883a 	mov	sp,fp
   2032c:	df000017 	ldw	fp,0(sp)
   20330:	dec00104 	addi	sp,sp,4
   20334:	f800283a 	ret

00020338 <sendInfoToOpponent>:

void sendInfoToOpponent(player* whoAmI) {
   20338:	defff604 	addi	sp,sp,-40
   2033c:	dfc00915 	stw	ra,36(sp)
   20340:	df000815 	stw	fp,32(sp)
   20344:	df000804 	addi	fp,sp,32
   20348:	e13fff15 	stw	r4,-4(fp)
  player thePlayer = *whoAmI;
   2034c:	e0bfff17 	ldw	r2,-4(fp)
   20350:	10c00017 	ldw	r3,0(r2)
   20354:	e0fffa15 	stw	r3,-24(fp)
   20358:	10c00117 	ldw	r3,4(r2)
   2035c:	e0fffb15 	stw	r3,-20(fp)
   20360:	10c00217 	ldw	r3,8(r2)
   20364:	e0fffc15 	stw	r3,-16(fp)
   20368:	10c00317 	ldw	r3,12(r2)
   2036c:	e0fffd15 	stw	r3,-12(fp)
   20370:	10800417 	ldw	r2,16(r2)
   20374:	e0bffe15 	stw	r2,-8(fp)
  int pokemonOne = thePlayer.pokemonParty[0].numValue;
   20378:	e0bffa17 	ldw	r2,-24(fp)
   2037c:	10801d17 	ldw	r2,116(r2)
   20380:	e0bff815 	stw	r2,-32(fp)
  int pokemonTwo = thePlayer.pokemonParty[1].numValue;
   20384:	e0bffa17 	ldw	r2,-24(fp)
   20388:	10801e04 	addi	r2,r2,120
   2038c:	10801d17 	ldw	r2,116(r2)
   20390:	e0bff915 	stw	r2,-28(fp)
  send((pokemonOne << 3) + (pokemonTwo));
   20394:	e0bff817 	ldw	r2,-32(fp)
   20398:	100490fa 	slli	r2,r2,3
   2039c:	1007883a 	mov	r3,r2
   203a0:	e0bff917 	ldw	r2,-28(fp)
   203a4:	1885883a 	add	r2,r3,r2
   203a8:	10803fcc 	andi	r2,r2,255
   203ac:	1080201c 	xori	r2,r2,128
   203b0:	10bfe004 	addi	r2,r2,-128
   203b4:	1009883a 	mov	r4,r2
   203b8:	00201fc0 	call	201fc <send>
}
   203bc:	0001883a 	nop
   203c0:	e037883a 	mov	sp,fp
   203c4:	dfc00117 	ldw	ra,4(sp)
   203c8:	df000017 	ldw	fp,0(sp)
   203cc:	dec00204 	addi	sp,sp,8
   203d0:	f800283a 	ret

000203d4 <receiveInfoFromOpponent>:

void receiveInfoFromOpponent(player *oppo, pokemon* allPokemon) {
   203d4:	defff904 	addi	sp,sp,-28
   203d8:	dfc00615 	stw	ra,24(sp)
   203dc:	df000515 	stw	fp,20(sp)
   203e0:	df000504 	addi	fp,sp,20
   203e4:	e13ffe15 	stw	r4,-8(fp)
   203e8:	e17fff15 	stw	r5,-4(fp)
  int received = receive();
   203ec:	00202cc0 	call	202cc <receive>
   203f0:	10803fcc 	andi	r2,r2,255
   203f4:	1080201c 	xori	r2,r2,128
   203f8:	10bfe004 	addi	r2,r2,-128
   203fc:	e0bffb15 	stw	r2,-20(fp)
  int pokeOne = (received & 0b111000) >> 3;
   20400:	e0bffb17 	ldw	r2,-20(fp)
   20404:	10800e0c 	andi	r2,r2,56
   20408:	1005d0fa 	srai	r2,r2,3
   2040c:	e0bffc15 	stw	r2,-16(fp)
  int pokeTwo = received & 0b111;
   20410:	e0bffb17 	ldw	r2,-20(fp)
   20414:	108001cc 	andi	r2,r2,7
   20418:	e0bffd15 	stw	r2,-12(fp)
  printf("received %d\n", received);
   2041c:	e17ffb17 	ldw	r5,-20(fp)
   20420:	010000b4 	movhi	r4,2
   20424:	2112ce04 	addi	r4,r4,19256
   20428:	0022b900 	call	22b90 <printf>
  definePlayerOppo(oppo, allPokemon, pokeOne, pokeTwo);
   2042c:	e1fffd17 	ldw	r7,-12(fp)
   20430:	e1bffc17 	ldw	r6,-16(fp)
   20434:	e17fff17 	ldw	r5,-4(fp)
   20438:	e13ffe17 	ldw	r4,-8(fp)
   2043c:	00213940 	call	21394 <definePlayerOppo>
}
   20440:	0001883a 	nop
   20444:	e037883a 	mov	sp,fp
   20448:	dfc00117 	ldw	ra,4(sp)
   2044c:	df000017 	ldw	fp,0(sp)
   20450:	dec00204 	addi	sp,sp,8
   20454:	f800283a 	ret

00020458 <rockPaperScissor>:

bool rockPaperScissor() {
   20458:	defffb04 	addi	sp,sp,-20
   2045c:	dfc00415 	stw	ra,16(sp)
   20460:	df000315 	stw	fp,12(sp)
   20464:	df000304 	addi	fp,sp,12
  bool done = false;
   20468:	e03ffd15 	stw	zero,-12(fp)
  while (!done) {
   2046c:	00003906 	br	20554 <rockPaperScissor+0xfc>
	printf("waiting for opponent response\n");
   20470:	010000b4 	movhi	r4,2
   20474:	2112d204 	addi	r4,r4,19272
   20478:	0022c800 	call	22c80 <puts>
	int opponentAnswer = receive();
   2047c:	00202cc0 	call	202cc <receive>
   20480:	10803fcc 	andi	r2,r2,255
   20484:	1080201c 	xori	r2,r2,128
   20488:	10bfe004 	addi	r2,r2,-128
   2048c:	e0bffe15 	stw	r2,-8(fp)
	printf("Rock, Paper, Scissor! (Rock = 1,  Paper = 2,  Scissor = 3)\n");
   20490:	010000b4 	movhi	r4,2
   20494:	2112da04 	addi	r4,r4,19304
   20498:	0022c800 	call	22c80 <puts>
    int myAnswer;
    do
      myAnswer = alt_getchar();
   2049c:	00236440 	call	23644 <alt_getchar>
   204a0:	e0bfff15 	stw	r2,-4(fp)
    while(isspace(myAnswer));
   204a4:	d0e00017 	ldw	r3,-32768(gp)
   204a8:	e0bfff17 	ldw	r2,-4(fp)
   204ac:	10800044 	addi	r2,r2,1
   204b0:	1885883a 	add	r2,r3,r2
   204b4:	10800003 	ldbu	r2,0(r2)
   204b8:	10803fcc 	andi	r2,r2,255
   204bc:	1080020c 	andi	r2,r2,8
   204c0:	103ff61e 	bne	r2,zero,2049c <__alt_data_end+0xfffec49c>
    myAnswer -= '0';
   204c4:	e0bfff17 	ldw	r2,-4(fp)
   204c8:	10bff404 	addi	r2,r2,-48
   204cc:	e0bfff15 	stw	r2,-4(fp)
    if (myAnswer < 1 || myAnswer > 3) {
   204d0:	e0bfff17 	ldw	r2,-4(fp)
   204d4:	0080030e 	bge	zero,r2,204e4 <rockPaperScissor+0x8c>
   204d8:	e0bfff17 	ldw	r2,-4(fp)
   204dc:	10800110 	cmplti	r2,r2,4
   204e0:	1000041e 	bne	r2,zero,204f4 <rockPaperScissor+0x9c>
      printf("Please enter a valid answer! (Rock = 1,  Paper = 2,  Scissor = 3)\n");
   204e4:	010000b4 	movhi	r4,2
   204e8:	2112e904 	addi	r4,r4,19364
   204ec:	0022c800 	call	22c80 <puts>
      continue;
   204f0:	00001806 	br	20554 <rockPaperScissor+0xfc>
    }

    send(myAnswer);
   204f4:	e0bfff17 	ldw	r2,-4(fp)
   204f8:	10803fcc 	andi	r2,r2,255
   204fc:	1080201c 	xori	r2,r2,128
   20500:	10bfe004 	addi	r2,r2,-128
   20504:	1009883a 	mov	r4,r2
   20508:	00201fc0 	call	201fc <send>

    if (myAnswer == opponentAnswer) {
   2050c:	e0ffff17 	ldw	r3,-4(fp)
   20510:	e0bffe17 	ldw	r2,-8(fp)
   20514:	1880041e 	bne	r3,r2,20528 <rockPaperScissor+0xd0>
      printf("Tie.\n");
   20518:	010000b4 	movhi	r4,2
   2051c:	2112fa04 	addi	r4,r4,19432
   20520:	0022c800 	call	22c80 <puts>
      continue;
   20524:	00000b06 	br	20554 <rockPaperScissor+0xfc>
    }

    if (myAnswer % 3 + 1 == opponentAnswer) {
   20528:	e0bfff17 	ldw	r2,-4(fp)
   2052c:	014000c4 	movi	r5,3
   20530:	1009883a 	mov	r4,r2
   20534:	00229d40 	call	229d4 <__modsi3>
   20538:	10c00044 	addi	r3,r2,1
   2053c:	e0bffe17 	ldw	r2,-8(fp)
   20540:	1880021e 	bne	r3,r2,2054c <rockPaperScissor+0xf4>
      return false;
   20544:	0005883a 	mov	r2,zero
   20548:	00000406 	br	2055c <rockPaperScissor+0x104>
    } else {
      return true;
   2054c:	00800044 	movi	r2,1
   20550:	00000206 	br	2055c <rockPaperScissor+0x104>
  definePlayerOppo(oppo, allPokemon, pokeOne, pokeTwo);
}

bool rockPaperScissor() {
  bool done = false;
  while (!done) {
   20554:	e0bffd17 	ldw	r2,-12(fp)
   20558:	103fc526 	beq	r2,zero,20470 <__alt_data_end+0xfffec470>
      return false;
    } else {
      return true;
    }
  }
}
   2055c:	e037883a 	mov	sp,fp
   20560:	dfc00117 	ldw	ra,4(sp)
   20564:	df000017 	ldw	fp,0(sp)
   20568:	dec00204 	addi	sp,sp,8
   2056c:	f800283a 	ret

00020570 <defineAttacks>:
#include "game_structs.h"
#include <stdio.h>
#include <string.h>
/* Import any additional necessary libraries. */

attack* defineAttacks() {
   20570:	defc9d04 	addi	sp,sp,-3468
   20574:	dfc36215 	stw	ra,3464(sp)
   20578:	df036115 	stw	fp,3460(sp)
   2057c:	dc036015 	stw	r16,3456(sp)
   20580:	df036104 	addi	fp,sp,3460

	// ***********************************************************
	// Attacks for Bulbasaur

	attack tackle;
	strcpy(tackle.name, "Tackle");
   20584:	009ad8f4 	movhi	r2,27491
   20588:	10985504 	addi	r2,r2,24916
   2058c:	e0bc9f15 	stw	r2,-3460(fp)
   20590:	00995b04 	movi	r2,25964
   20594:	e0bca00d 	sth	r2,-3456(fp)
   20598:	e03ca085 	stb	zero,-3454(fp)
	tackle.power = 40;
   2059c:	00800a04 	movi	r2,40
   205a0:	e0bcb815 	stw	r2,-3360(fp)
	tackle.numValue = 0;
   205a4:	e03cb915 	stw	zero,-3356(fp)
	allAttacks[tackle.numValue] = tackle;
   205a8:	e0bcb917 	ldw	r2,-3356(fp)
   205ac:	040000b4 	movhi	r16,2
   205b0:	8415b704 	addi	r16,r16,22236
   205b4:	01401b04 	movi	r5,108
   205b8:	1009883a 	mov	r4,r2
   205bc:	0022b040 	call	22b04 <__mulsi3>
   205c0:	8085883a 	add	r2,r16,r2
   205c4:	1007883a 	mov	r3,r2
   205c8:	e13c9f04 	addi	r4,fp,-3460
   205cc:	00801b04 	movi	r2,108
   205d0:	100d883a 	mov	r6,r2
   205d4:	200b883a 	mov	r5,r4
   205d8:	1809883a 	mov	r4,r3
   205dc:	0022b2c0 	call	22b2c <memcpy>

	attack vineWhip;
	strcpy(vineWhip.name, "Vine Whip");
   205e0:	e0bcba04 	addi	r2,fp,-3352
   205e4:	00d95bb4 	movhi	r3,25966
   205e8:	18da5584 	addi	r3,r3,26966
   205ec:	10c00015 	stw	r3,0(r2)
   205f0:	00da5a34 	movhi	r3,26984
   205f4:	18d5c804 	addi	r3,r3,22304
   205f8:	10c00115 	stw	r3,4(r2)
   205fc:	00c01c04 	movi	r3,112
   20600:	10c0020d 	sth	r3,8(r2)
	vineWhip.power = 45;
   20604:	00800b44 	movi	r2,45
   20608:	e0bcd315 	stw	r2,-3252(fp)
	vineWhip.numValue = 1;
   2060c:	00800044 	movi	r2,1
   20610:	e0bcd415 	stw	r2,-3248(fp)
	allAttacks[vineWhip.numValue] = vineWhip;
   20614:	e0bcd417 	ldw	r2,-3248(fp)
   20618:	040000b4 	movhi	r16,2
   2061c:	8415b704 	addi	r16,r16,22236
   20620:	01401b04 	movi	r5,108
   20624:	1009883a 	mov	r4,r2
   20628:	0022b040 	call	22b04 <__mulsi3>
   2062c:	8085883a 	add	r2,r16,r2
   20630:	1009883a 	mov	r4,r2
   20634:	e0bcba04 	addi	r2,fp,-3352
   20638:	00c01b04 	movi	r3,108
   2063c:	180d883a 	mov	r6,r3
   20640:	100b883a 	mov	r5,r2
   20644:	0022b2c0 	call	22b2c <memcpy>

	attack razorLeaf;
	strcpy(razorLeaf.name, "Razor Leaf");
   20648:	e0bcd504 	addi	r2,fp,-3244
   2064c:	00dbdeb4 	movhi	r3,28538
   20650:	18d85484 	addi	r3,r3,24914
   20654:	10c00015 	stw	r3,0(r2)
   20658:	00d95334 	movhi	r3,25932
   2065c:	18c81c84 	addi	r3,r3,8306
   20660:	10c00115 	stw	r3,4(r2)
   20664:	00d99844 	movi	r3,26209
   20668:	10c0020d 	sth	r3,8(r2)
   2066c:	10000285 	stb	zero,10(r2)
	razorLeaf.power = 55;
   20670:	00800dc4 	movi	r2,55
   20674:	e0bcee15 	stw	r2,-3144(fp)
	razorLeaf.numValue = 2;
   20678:	00800084 	movi	r2,2
   2067c:	e0bcef15 	stw	r2,-3140(fp)
	allAttacks[razorLeaf.numValue] = razorLeaf;
   20680:	e0bcef17 	ldw	r2,-3140(fp)
   20684:	040000b4 	movhi	r16,2
   20688:	8415b704 	addi	r16,r16,22236
   2068c:	01401b04 	movi	r5,108
   20690:	1009883a 	mov	r4,r2
   20694:	0022b040 	call	22b04 <__mulsi3>
   20698:	8085883a 	add	r2,r16,r2
   2069c:	1009883a 	mov	r4,r2
   206a0:	e0bcd504 	addi	r2,fp,-3244
   206a4:	00c01b04 	movi	r3,108
   206a8:	180d883a 	mov	r6,r3
   206ac:	100b883a 	mov	r5,r2
   206b0:	0022b2c0 	call	22b2c <memcpy>

	attack doubleEdge;
	strcpy(doubleEdge.name, "Double-Edge");
   206b4:	e0bcf004 	addi	r2,fp,-3136
   206b8:	00d89d74 	movhi	r3,25205
   206bc:	18dbd104 	addi	r3,r3,28484
   206c0:	10c00015 	stw	r3,0(r2)
   206c4:	00d14b74 	movhi	r3,17709
   206c8:	18d95b04 	addi	r3,r3,25964
   206cc:	10c00115 	stw	r3,4(r2)
   206d0:	00c01974 	movhi	r3,101
   206d4:	18d9d904 	addi	r3,r3,26468
   206d8:	10c00215 	stw	r3,8(r2)
	doubleEdge.power = 120;
   206dc:	00801e04 	movi	r2,120
   206e0:	e0bd0915 	stw	r2,-3036(fp)
	doubleEdge.numValue = 3;
   206e4:	008000c4 	movi	r2,3
   206e8:	e0bd0a15 	stw	r2,-3032(fp)
	allAttacks[doubleEdge.numValue] = doubleEdge;
   206ec:	e0bd0a17 	ldw	r2,-3032(fp)
   206f0:	040000b4 	movhi	r16,2
   206f4:	8415b704 	addi	r16,r16,22236
   206f8:	01401b04 	movi	r5,108
   206fc:	1009883a 	mov	r4,r2
   20700:	0022b040 	call	22b04 <__mulsi3>
   20704:	8085883a 	add	r2,r16,r2
   20708:	1009883a 	mov	r4,r2
   2070c:	e0bcf004 	addi	r2,fp,-3136
   20710:	00c01b04 	movi	r3,108
   20714:	180d883a 	mov	r6,r3
   20718:	100b883a 	mov	r5,r2
   2071c:	0022b2c0 	call	22b2c <memcpy>

	// ***********************************************************
	// Attacks for Charmander

	attack scratch;
	strcpy(scratch.name, "SCRATCH");
   20720:	e0fd0b04 	addi	r3,fp,-3028
   20724:	009054b4 	movhi	r2,16722
   20728:	1090d4c4 	addi	r2,r2,17235
   2072c:	18800015 	stw	r2,0(r3)
   20730:	00801234 	movhi	r2,72
   20734:	1090d504 	addi	r2,r2,17236
   20738:	18800115 	stw	r2,4(r3)
	scratch.power = 5;
   2073c:	00800144 	movi	r2,5
   20740:	e0bd2415 	stw	r2,-2928(fp)
	scratch.numValue = 4;
   20744:	00800104 	movi	r2,4
   20748:	e0bd2515 	stw	r2,-2924(fp)
	allAttacks[scratch.numValue] = scratch;
   2074c:	e0bd2517 	ldw	r2,-2924(fp)
   20750:	040000b4 	movhi	r16,2
   20754:	8415b704 	addi	r16,r16,22236
   20758:	01401b04 	movi	r5,108
   2075c:	1009883a 	mov	r4,r2
   20760:	0022b040 	call	22b04 <__mulsi3>
   20764:	8085883a 	add	r2,r16,r2
   20768:	1009883a 	mov	r4,r2
   2076c:	e0bd0b04 	addi	r2,fp,-3028
   20770:	00c01b04 	movi	r3,108
   20774:	180d883a 	mov	r6,r3
   20778:	100b883a 	mov	r5,r2
   2077c:	0022b2c0 	call	22b2c <memcpy>

	attack fireFang;
	strcpy(fireFang.name, "Fire Fang");
   20780:	e0bd2604 	addi	r2,fp,-2920
   20784:	00d95cb4 	movhi	r3,25970
   20788:	18da5184 	addi	r3,r3,26950
   2078c:	10c00015 	stw	r3,0(r2)
   20790:	00db9874 	movhi	r3,28257
   20794:	18d18804 	addi	r3,r3,17952
   20798:	10c00115 	stw	r3,4(r2)
   2079c:	00c019c4 	movi	r3,103
   207a0:	10c0020d 	sth	r3,8(r2)
	fireFang.power = 65;
   207a4:	00801044 	movi	r2,65
   207a8:	e0bd3f15 	stw	r2,-2820(fp)
	fireFang.numValue = 5;
   207ac:	00800144 	movi	r2,5
   207b0:	e0bd4015 	stw	r2,-2816(fp)
	allAttacks[fireFang.numValue] = fireFang;
   207b4:	e0bd4017 	ldw	r2,-2816(fp)
   207b8:	040000b4 	movhi	r16,2
   207bc:	8415b704 	addi	r16,r16,22236
   207c0:	01401b04 	movi	r5,108
   207c4:	1009883a 	mov	r4,r2
   207c8:	0022b040 	call	22b04 <__mulsi3>
   207cc:	8085883a 	add	r2,r16,r2
   207d0:	1009883a 	mov	r4,r2
   207d4:	e0bd2604 	addi	r2,fp,-2920
   207d8:	00c01b04 	movi	r3,108
   207dc:	180d883a 	mov	r6,r3
   207e0:	100b883a 	mov	r5,r2
   207e4:	0022b2c0 	call	22b2c <memcpy>

	attack flameBurst;
	strcpy(flameBurst.name, "Flame Burst");
   207e8:	e0bd4104 	addi	r2,fp,-2812
   207ec:	00db5874 	movhi	r3,28001
   207f0:	18db1184 	addi	r3,r3,27718
   207f4:	10c00015 	stw	r3,0(r2)
   207f8:	00dd50b4 	movhi	r3,30018
   207fc:	18c81944 	addi	r3,r3,8293
   20800:	10c00115 	stw	r3,4(r2)
   20804:	00c01d34 	movhi	r3,116
   20808:	18dcdc84 	addi	r3,r3,29554
   2080c:	10c00215 	stw	r3,8(r2)
	flameBurst.power = 70;
   20810:	00801184 	movi	r2,70
   20814:	e0bd5a15 	stw	r2,-2712(fp)
	flameBurst.numValue = 6;
   20818:	00800184 	movi	r2,6
   2081c:	e0bd5b15 	stw	r2,-2708(fp)
	allAttacks[flameBurst.numValue] = flameBurst;
   20820:	e0bd5b17 	ldw	r2,-2708(fp)
   20824:	040000b4 	movhi	r16,2
   20828:	8415b704 	addi	r16,r16,22236
   2082c:	01401b04 	movi	r5,108
   20830:	1009883a 	mov	r4,r2
   20834:	0022b040 	call	22b04 <__mulsi3>
   20838:	8085883a 	add	r2,r16,r2
   2083c:	1009883a 	mov	r4,r2
   20840:	e0bd4104 	addi	r2,fp,-2812
   20844:	00c01b04 	movi	r3,108
   20848:	180d883a 	mov	r6,r3
   2084c:	100b883a 	mov	r5,r2
   20850:	0022b2c0 	call	22b2c <memcpy>

	attack fireSpin;
	strcpy(fireSpin.name, "Fire Spin");
   20854:	e0bd5c04 	addi	r2,fp,-2704
   20858:	00d95cb4 	movhi	r3,25970
   2085c:	18da5184 	addi	r3,r3,26950
   20860:	10c00015 	stw	r3,0(r2)
   20864:	00da5c34 	movhi	r3,26992
   20868:	18d4c804 	addi	r3,r3,21280
   2086c:	10c00115 	stw	r3,4(r2)
   20870:	00c01b84 	movi	r3,110
   20874:	10c0020d 	sth	r3,8(r2)
	fireSpin.power = 35;
   20878:	008008c4 	movi	r2,35
   2087c:	e0bd7515 	stw	r2,-2604(fp)
	fireSpin.numValue = 7;
   20880:	008001c4 	movi	r2,7
   20884:	e0bd7615 	stw	r2,-2600(fp)
	allAttacks[fireSpin.numValue] = fireSpin;
   20888:	e0bd7617 	ldw	r2,-2600(fp)
   2088c:	040000b4 	movhi	r16,2
   20890:	8415b704 	addi	r16,r16,22236
   20894:	01401b04 	movi	r5,108
   20898:	1009883a 	mov	r4,r2
   2089c:	0022b040 	call	22b04 <__mulsi3>
   208a0:	8085883a 	add	r2,r16,r2
   208a4:	1009883a 	mov	r4,r2
   208a8:	e0bd5c04 	addi	r2,fp,-2704
   208ac:	00c01b04 	movi	r3,108
   208b0:	180d883a 	mov	r6,r3
   208b4:	100b883a 	mov	r5,r2
   208b8:	0022b2c0 	call	22b2c <memcpy>

	// ***********************************************************
	// Attacks for Squirtle

	attack waterGun;
	strcpy(waterGun.name, "Water Gun");
   208bc:	e0bd7704 	addi	r2,fp,-2596
   208c0:	00d95d34 	movhi	r3,25972
   208c4:	18d855c4 	addi	r3,r3,24919
   208c8:	10c00015 	stw	r3,0(r2)
   208cc:	00dd51f4 	movhi	r3,30023
   208d0:	18c81c84 	addi	r3,r3,8306
   208d4:	10c00115 	stw	r3,4(r2)
   208d8:	00c01b84 	movi	r3,110
   208dc:	10c0020d 	sth	r3,8(r2)
	waterGun.power = 40;
   208e0:	00800a04 	movi	r2,40
   208e4:	e0bd9015 	stw	r2,-2496(fp)
	waterGun.numValue = 8;
   208e8:	00800204 	movi	r2,8
   208ec:	e0bd9115 	stw	r2,-2492(fp)
	allAttacks[waterGun.numValue] = waterGun;
   208f0:	e0bd9117 	ldw	r2,-2492(fp)
   208f4:	040000b4 	movhi	r16,2
   208f8:	8415b704 	addi	r16,r16,22236
   208fc:	01401b04 	movi	r5,108
   20900:	1009883a 	mov	r4,r2
   20904:	0022b040 	call	22b04 <__mulsi3>
   20908:	8085883a 	add	r2,r16,r2
   2090c:	1009883a 	mov	r4,r2
   20910:	e0bd7704 	addi	r2,fp,-2596
   20914:	00c01b04 	movi	r3,108
   20918:	180d883a 	mov	r6,r3
   2091c:	100b883a 	mov	r5,r2
   20920:	0022b2c0 	call	22b2c <memcpy>

	attack bubble;
	strcpy(bubble.name, "Bubble");
   20924:	e0bd9204 	addi	r2,fp,-2488
   20928:	00d898b4 	movhi	r3,25186
   2092c:	18dd5084 	addi	r3,r3,30018
   20930:	10c00015 	stw	r3,0(r2)
   20934:	00d95b04 	movi	r3,25964
   20938:	10c0010d 	sth	r3,4(r2)
   2093c:	10000185 	stb	zero,6(r2)
	bubble.power = 40;
   20940:	00800a04 	movi	r2,40
   20944:	e0bdab15 	stw	r2,-2388(fp)
	bubble.numValue = 9;
   20948:	00800244 	movi	r2,9
   2094c:	e0bdac15 	stw	r2,-2384(fp)
	allAttacks[bubble.numValue] = bubble;
   20950:	e0bdac17 	ldw	r2,-2384(fp)
   20954:	040000b4 	movhi	r16,2
   20958:	8415b704 	addi	r16,r16,22236
   2095c:	01401b04 	movi	r5,108
   20960:	1009883a 	mov	r4,r2
   20964:	0022b040 	call	22b04 <__mulsi3>
   20968:	8085883a 	add	r2,r16,r2
   2096c:	1009883a 	mov	r4,r2
   20970:	e0bd9204 	addi	r2,fp,-2488
   20974:	00c01b04 	movi	r3,108
   20978:	180d883a 	mov	r6,r3
   2097c:	100b883a 	mov	r5,r2
   20980:	0022b2c0 	call	22b2c <memcpy>

	attack bite;
	strcpy(bite.name, "Bite");
   20984:	e0fdad04 	addi	r3,fp,-2380
   20988:	00995d34 	movhi	r2,25972
   2098c:	109a5084 	addi	r2,r2,26946
   20990:	18800015 	stw	r2,0(r3)
   20994:	18000105 	stb	zero,4(r3)
	bite.power = 60;
   20998:	00800f04 	movi	r2,60
   2099c:	e0bdc615 	stw	r2,-2280(fp)
	bite.numValue = 10;
   209a0:	00800284 	movi	r2,10
   209a4:	e0bdc715 	stw	r2,-2276(fp)
	allAttacks[bite.numValue] = bite;
   209a8:	e0bdc717 	ldw	r2,-2276(fp)
   209ac:	040000b4 	movhi	r16,2
   209b0:	8415b704 	addi	r16,r16,22236
   209b4:	01401b04 	movi	r5,108
   209b8:	1009883a 	mov	r4,r2
   209bc:	0022b040 	call	22b04 <__mulsi3>
   209c0:	8085883a 	add	r2,r16,r2
   209c4:	1009883a 	mov	r4,r2
   209c8:	e0bdad04 	addi	r2,fp,-2380
   209cc:	00c01b04 	movi	r3,108
   209d0:	180d883a 	mov	r6,r3
   209d4:	100b883a 	mov	r5,r2
   209d8:	0022b2c0 	call	22b2c <memcpy>

	attack rapidSpin;
	strcpy(rapidSpin.name, "Rapid Spin");
   209dc:	e0bdc804 	addi	r2,fp,-2272
   209e0:	00da5c34 	movhi	r3,26992
   209e4:	18d85484 	addi	r3,r3,24914
   209e8:	10c00015 	stw	r3,0(r2)
   209ec:	00dc14f4 	movhi	r3,28755
   209f0:	18c81904 	addi	r3,r3,8292
   209f4:	10c00115 	stw	r3,4(r2)
   209f8:	00db9a44 	movi	r3,28265
   209fc:	10c0020d 	sth	r3,8(r2)
   20a00:	10000285 	stb	zero,10(r2)
	rapidSpin.power = 60;
   20a04:	00800f04 	movi	r2,60
   20a08:	e0bde115 	stw	r2,-2172(fp)
	rapidSpin.numValue = 11;
   20a0c:	008002c4 	movi	r2,11
   20a10:	e0bde215 	stw	r2,-2168(fp)
	allAttacks[rapidSpin.numValue] = rapidSpin;
   20a14:	e0bde217 	ldw	r2,-2168(fp)
   20a18:	040000b4 	movhi	r16,2
   20a1c:	8415b704 	addi	r16,r16,22236
   20a20:	01401b04 	movi	r5,108
   20a24:	1009883a 	mov	r4,r2
   20a28:	0022b040 	call	22b04 <__mulsi3>
   20a2c:	8085883a 	add	r2,r16,r2
   20a30:	1009883a 	mov	r4,r2
   20a34:	e0bdc804 	addi	r2,fp,-2272
   20a38:	00c01b04 	movi	r3,108
   20a3c:	180d883a 	mov	r6,r3
   20a40:	100b883a 	mov	r5,r2
   20a44:	0022b2c0 	call	22b2c <memcpy>

	// ***********************************************************
	// Attacks for Pikachu

	attack thunderShock;
	strcpy(thunderShock.name, "Thunder Attack");
   20a48:	e0bde304 	addi	r2,fp,-2164
   20a4c:	00db9d74 	movhi	r3,28277
   20a50:	18da1504 	addi	r3,r3,26708
   20a54:	10c00015 	stw	r3,0(r2)
   20a58:	00c81cb4 	movhi	r3,8306
   20a5c:	18d95904 	addi	r3,r3,25956
   20a60:	10c00115 	stw	r3,4(r2)
   20a64:	00d85d34 	movhi	r3,24948
   20a68:	18dd1044 	addi	r3,r3,29761
   20a6c:	10c00215 	stw	r3,8(r2)
   20a70:	00dad8c4 	movi	r3,27491
   20a74:	10c0030d 	sth	r3,12(r2)
   20a78:	10000385 	stb	zero,14(r2)
	thunderShock.power = 40;
   20a7c:	00800a04 	movi	r2,40
   20a80:	e0bdfc15 	stw	r2,-2064(fp)
	thunderShock.numValue = 12;
   20a84:	00800304 	movi	r2,12
   20a88:	e0bdfd15 	stw	r2,-2060(fp)
	allAttacks[thunderShock.numValue] = thunderShock;
   20a8c:	e0bdfd17 	ldw	r2,-2060(fp)
   20a90:	040000b4 	movhi	r16,2
   20a94:	8415b704 	addi	r16,r16,22236
   20a98:	01401b04 	movi	r5,108
   20a9c:	1009883a 	mov	r4,r2
   20aa0:	0022b040 	call	22b04 <__mulsi3>
   20aa4:	8085883a 	add	r2,r16,r2
   20aa8:	1009883a 	mov	r4,r2
   20aac:	e0bde304 	addi	r2,fp,-2164
   20ab0:	00c01b04 	movi	r3,108
   20ab4:	180d883a 	mov	r6,r3
   20ab8:	100b883a 	mov	r5,r2
   20abc:	0022b2c0 	call	22b2c <memcpy>

	attack thunderBolt;
	strcpy(thunderBolt.name, "Thunder Bolt");
   20ac0:	e0bdfe04 	addi	r2,fp,-2056
   20ac4:	00db9d74 	movhi	r3,28277
   20ac8:	18da1504 	addi	r3,r3,26708
   20acc:	10c00015 	stw	r3,0(r2)
   20ad0:	00c81cb4 	movhi	r3,8306
   20ad4:	18d95904 	addi	r3,r3,25956
   20ad8:	10c00115 	stw	r3,4(r2)
   20adc:	00dd1b34 	movhi	r3,29804
   20ae0:	18dbd084 	addi	r3,r3,28482
   20ae4:	10c00215 	stw	r3,8(r2)
   20ae8:	10000305 	stb	zero,12(r2)
	thunderBolt.power = 90;
   20aec:	00801684 	movi	r2,90
   20af0:	e0be1715 	stw	r2,-1956(fp)
	thunderBolt.numValue = 13;
   20af4:	00800344 	movi	r2,13
   20af8:	e0be1815 	stw	r2,-1952(fp)
	allAttacks[thunderBolt.numValue] = thunderBolt;
   20afc:	e0be1817 	ldw	r2,-1952(fp)
   20b00:	040000b4 	movhi	r16,2
   20b04:	8415b704 	addi	r16,r16,22236
   20b08:	01401b04 	movi	r5,108
   20b0c:	1009883a 	mov	r4,r2
   20b10:	0022b040 	call	22b04 <__mulsi3>
   20b14:	8085883a 	add	r2,r16,r2
   20b18:	1009883a 	mov	r4,r2
   20b1c:	e0bdfe04 	addi	r2,fp,-2056
   20b20:	00c01b04 	movi	r3,108
   20b24:	180d883a 	mov	r6,r3
   20b28:	100b883a 	mov	r5,r2
   20b2c:	0022b2c0 	call	22b2c <memcpy>

	attack spark;
	strcpy(spark.name, "Spark");
   20b30:	e0fe1904 	addi	r3,fp,-1948
   20b34:	009c9874 	movhi	r2,29281
   20b38:	109c14c4 	addi	r2,r2,28755
   20b3c:	18800015 	stw	r2,0(r3)
   20b40:	00801ac4 	movi	r2,107
   20b44:	1880010d 	sth	r2,4(r3)
	spark.power = 65;
   20b48:	00801044 	movi	r2,65
   20b4c:	e0be3215 	stw	r2,-1848(fp)
	spark.numValue = 14;
   20b50:	00800384 	movi	r2,14
   20b54:	e0be3315 	stw	r2,-1844(fp)
	allAttacks[spark.numValue] = spark;
   20b58:	e0be3317 	ldw	r2,-1844(fp)
   20b5c:	040000b4 	movhi	r16,2
   20b60:	8415b704 	addi	r16,r16,22236
   20b64:	01401b04 	movi	r5,108
   20b68:	1009883a 	mov	r4,r2
   20b6c:	0022b040 	call	22b04 <__mulsi3>
   20b70:	8085883a 	add	r2,r16,r2
   20b74:	1009883a 	mov	r4,r2
   20b78:	e0be1904 	addi	r2,fp,-1948
   20b7c:	00c01b04 	movi	r3,108
   20b80:	180d883a 	mov	r6,r3
   20b84:	100b883a 	mov	r5,r2
   20b88:	0022b2c0 	call	22b2c <memcpy>

	attack nuzzle;
	strcpy(nuzzle.name, "Nuzzle");
   20b8c:	e0be3404 	addi	r2,fp,-1840
   20b90:	00de9eb4 	movhi	r3,31354
   20b94:	18dd5384 	addi	r3,r3,30030
   20b98:	10c00015 	stw	r3,0(r2)
   20b9c:	00d95b04 	movi	r3,25964
   20ba0:	10c0010d 	sth	r3,4(r2)
   20ba4:	10000185 	stb	zero,6(r2)
	nuzzle.power = 20;
   20ba8:	00800504 	movi	r2,20
   20bac:	e0be4d15 	stw	r2,-1740(fp)
	nuzzle.numValue = 15;
   20bb0:	008003c4 	movi	r2,15
   20bb4:	e0be4e15 	stw	r2,-1736(fp)
	allAttacks[nuzzle.numValue] = nuzzle;
   20bb8:	e0be4e17 	ldw	r2,-1736(fp)
   20bbc:	040000b4 	movhi	r16,2
   20bc0:	8415b704 	addi	r16,r16,22236
   20bc4:	01401b04 	movi	r5,108
   20bc8:	1009883a 	mov	r4,r2
   20bcc:	0022b040 	call	22b04 <__mulsi3>
   20bd0:	8085883a 	add	r2,r16,r2
   20bd4:	1009883a 	mov	r4,r2
   20bd8:	e0be3404 	addi	r2,fp,-1840
   20bdc:	00c01b04 	movi	r3,108
   20be0:	180d883a 	mov	r6,r3
   20be4:	100b883a 	mov	r5,r2
   20be8:	0022b2c0 	call	22b2c <memcpy>

	// ***********************************************************
	// Attacks for Eevee

	attack covet;
	strcpy(covet.name, "Covet");
   20bec:	e0fe4f04 	addi	r3,fp,-1732
   20bf0:	00995db4 	movhi	r2,25974
   20bf4:	109bd0c4 	addi	r2,r2,28483
   20bf8:	18800015 	stw	r2,0(r3)
   20bfc:	00801d04 	movi	r2,116
   20c00:	1880010d 	sth	r2,4(r3)
	covet.power = 60;
   20c04:	00800f04 	movi	r2,60
   20c08:	e0be6815 	stw	r2,-1632(fp)
	covet.numValue = 16;
   20c0c:	00800404 	movi	r2,16
   20c10:	e0be6915 	stw	r2,-1628(fp)
	allAttacks[covet.numValue] = covet;
   20c14:	e0be6917 	ldw	r2,-1628(fp)
   20c18:	040000b4 	movhi	r16,2
   20c1c:	8415b704 	addi	r16,r16,22236
   20c20:	01401b04 	movi	r5,108
   20c24:	1009883a 	mov	r4,r2
   20c28:	0022b040 	call	22b04 <__mulsi3>
   20c2c:	8085883a 	add	r2,r16,r2
   20c30:	1009883a 	mov	r4,r2
   20c34:	e0be4f04 	addi	r2,fp,-1732
   20c38:	00c01b04 	movi	r3,108
   20c3c:	180d883a 	mov	r6,r3
   20c40:	100b883a 	mov	r5,r2
   20c44:	0022b2c0 	call	22b2c <memcpy>

	attack lastResort;
	strcpy(lastResort.name, "Last Resort");
   20c48:	e0be6a04 	addi	r2,fp,-1624
   20c4c:	00dd1cf4 	movhi	r3,29811
   20c50:	18d85304 	addi	r3,r3,24908
   20c54:	10c00015 	stw	r3,0(r2)
   20c58:	00dcd974 	movhi	r3,29541
   20c5c:	18d48804 	addi	r3,r3,21024
   20c60:	10c00115 	stw	r3,4(r2)
   20c64:	00c01d34 	movhi	r3,116
   20c68:	18dc9bc4 	addi	r3,r3,29295
   20c6c:	10c00215 	stw	r3,8(r2)
	lastResort.power = 140;
   20c70:	00802304 	movi	r2,140
   20c74:	e0be8315 	stw	r2,-1524(fp)
	lastResort.numValue = 17;
   20c78:	00800444 	movi	r2,17
   20c7c:	e0be8415 	stw	r2,-1520(fp)
	allAttacks[lastResort.numValue] = lastResort;
   20c80:	e0be8417 	ldw	r2,-1520(fp)
   20c84:	040000b4 	movhi	r16,2
   20c88:	8415b704 	addi	r16,r16,22236
   20c8c:	01401b04 	movi	r5,108
   20c90:	1009883a 	mov	r4,r2
   20c94:	0022b040 	call	22b04 <__mulsi3>
   20c98:	8085883a 	add	r2,r16,r2
   20c9c:	1009883a 	mov	r4,r2
   20ca0:	e0be6a04 	addi	r2,fp,-1624
   20ca4:	00c01b04 	movi	r3,108
   20ca8:	180d883a 	mov	r6,r3
   20cac:	100b883a 	mov	r5,r2
   20cb0:	0022b2c0 	call	22b2c <memcpy>

	attack facade;
	strcpy(facade.name, "Facade");
   20cb4:	e0be8504 	addi	r2,fp,-1516
   20cb8:	00d858f4 	movhi	r3,24931
   20cbc:	18d85184 	addi	r3,r3,24902
   20cc0:	10c00015 	stw	r3,0(r2)
   20cc4:	00d95904 	movi	r3,25956
   20cc8:	10c0010d 	sth	r3,4(r2)
   20ccc:	10000185 	stb	zero,6(r2)
	facade.power = 70;
   20cd0:	00801184 	movi	r2,70
   20cd4:	e0be9e15 	stw	r2,-1416(fp)
	facade.numValue = 18;
   20cd8:	00800484 	movi	r2,18
   20cdc:	e0be9f15 	stw	r2,-1412(fp)
	allAttacks[facade.numValue] = facade;
   20ce0:	e0be9f17 	ldw	r2,-1412(fp)
   20ce4:	040000b4 	movhi	r16,2
   20ce8:	8415b704 	addi	r16,r16,22236
   20cec:	01401b04 	movi	r5,108
   20cf0:	1009883a 	mov	r4,r2
   20cf4:	0022b040 	call	22b04 <__mulsi3>
   20cf8:	8085883a 	add	r2,r16,r2
   20cfc:	1009883a 	mov	r4,r2
   20d00:	e0be8504 	addi	r2,fp,-1516
   20d04:	00c01b04 	movi	r3,108
   20d08:	180d883a 	mov	r6,r3
   20d0c:	100b883a 	mov	r5,r2
   20d10:	0022b2c0 	call	22b2c <memcpy>

	attack shadowBall;
	strcpy(shadowBall.name, "Shadow Ball");
   20d14:	e0bea004 	addi	r2,fp,-1408
   20d18:	00d91874 	movhi	r3,25697
   20d1c:	18da14c4 	addi	r3,r3,26707
   20d20:	10c00015 	stw	r3,0(r2)
   20d24:	00d08834 	movhi	r3,16928
   20d28:	18dddbc4 	addi	r3,r3,30575
   20d2c:	10c00115 	stw	r3,4(r2)
   20d30:	00c01b34 	movhi	r3,108
   20d34:	18db1844 	addi	r3,r3,27745
   20d38:	10c00215 	stw	r3,8(r2)
	shadowBall.power = 80;
   20d3c:	00801404 	movi	r2,80
   20d40:	e0beb915 	stw	r2,-1308(fp)
	shadowBall.numValue = 19;
   20d44:	008004c4 	movi	r2,19
   20d48:	e0beba15 	stw	r2,-1304(fp)
	allAttacks[shadowBall.numValue] = shadowBall;
   20d4c:	e0beba17 	ldw	r2,-1304(fp)
   20d50:	040000b4 	movhi	r16,2
   20d54:	8415b704 	addi	r16,r16,22236
   20d58:	01401b04 	movi	r5,108
   20d5c:	1009883a 	mov	r4,r2
   20d60:	0022b040 	call	22b04 <__mulsi3>
   20d64:	8085883a 	add	r2,r16,r2
   20d68:	1009883a 	mov	r4,r2
   20d6c:	e0bea004 	addi	r2,fp,-1408
   20d70:	00c01b04 	movi	r3,108
   20d74:	180d883a 	mov	r6,r3
   20d78:	100b883a 	mov	r5,r2
   20d7c:	0022b2c0 	call	22b2c <memcpy>

	// ***********************************************************
	// Attacks for Chikorita

	attack hiddenPower;
	strcpy(hiddenPower.name, "Hidden Power");
   20d80:	e0bebb04 	addi	r2,fp,-1300
   20d84:	00d91934 	movhi	r3,25700
   20d88:	18da5204 	addi	r3,r3,26952
   20d8c:	10c00015 	stw	r3,0(r2)
   20d90:	00d40834 	movhi	r3,20512
   20d94:	18db9944 	addi	r3,r3,28261
   20d98:	10c00115 	stw	r3,4(r2)
   20d9c:	00dc9974 	movhi	r3,29285
   20da0:	18dddbc4 	addi	r3,r3,30575
   20da4:	10c00215 	stw	r3,8(r2)
   20da8:	10000305 	stb	zero,12(r2)
	hiddenPower.power = 60;
   20dac:	00800f04 	movi	r2,60
   20db0:	e0bed415 	stw	r2,-1200(fp)
	hiddenPower.numValue = 20;
   20db4:	00800504 	movi	r2,20
   20db8:	e0bed515 	stw	r2,-1196(fp)
	allAttacks[hiddenPower.numValue] = hiddenPower;
   20dbc:	e0bed517 	ldw	r2,-1196(fp)
   20dc0:	040000b4 	movhi	r16,2
   20dc4:	8415b704 	addi	r16,r16,22236
   20dc8:	01401b04 	movi	r5,108
   20dcc:	1009883a 	mov	r4,r2
   20dd0:	0022b040 	call	22b04 <__mulsi3>
   20dd4:	8085883a 	add	r2,r16,r2
   20dd8:	1009883a 	mov	r4,r2
   20ddc:	e0bebb04 	addi	r2,fp,-1300
   20de0:	00c01b04 	movi	r3,108
   20de4:	180d883a 	mov	r6,r3
   20de8:	100b883a 	mov	r5,r2
   20dec:	0022b2c0 	call	22b2c <memcpy>

	attack magicalLeaf;
	strcpy(magicalLeaf.name, "Magical Leaf");
   20df0:	e0bed604 	addi	r2,fp,-1192
   20df4:	00da59f4 	movhi	r3,26983
   20df8:	18d85344 	addi	r3,r3,24909
   20dfc:	10c00015 	stw	r3,0(r2)
   20e00:	00c81b34 	movhi	r3,8300
   20e04:	18d858c4 	addi	r3,r3,24931
   20e08:	10c00115 	stw	r3,4(r2)
   20e0c:	00d99874 	movhi	r3,26209
   20e10:	18d95304 	addi	r3,r3,25932
   20e14:	10c00215 	stw	r3,8(r2)
   20e18:	10000305 	stb	zero,12(r2)
	magicalLeaf.power = 60;
   20e1c:	00800f04 	movi	r2,60
   20e20:	e0beef15 	stw	r2,-1092(fp)
	magicalLeaf.numValue = 21;
   20e24:	00800544 	movi	r2,21
   20e28:	e0bef015 	stw	r2,-1088(fp)
	allAttacks[magicalLeaf.numValue] = magicalLeaf;
   20e2c:	e0bef017 	ldw	r2,-1088(fp)
   20e30:	040000b4 	movhi	r16,2
   20e34:	8415b704 	addi	r16,r16,22236
   20e38:	01401b04 	movi	r5,108
   20e3c:	1009883a 	mov	r4,r2
   20e40:	0022b040 	call	22b04 <__mulsi3>
   20e44:	8085883a 	add	r2,r16,r2
   20e48:	1009883a 	mov	r4,r2
   20e4c:	e0bed604 	addi	r2,fp,-1192
   20e50:	00c01b04 	movi	r3,108
   20e54:	180d883a 	mov	r6,r3
   20e58:	100b883a 	mov	r5,r2
   20e5c:	0022b2c0 	call	22b2c <memcpy>

	attack bodySlam;
	strcpy(bodySlam.name, "Body Slam");
   20e60:	e0bef104 	addi	r2,fp,-1084
   20e64:	00de5934 	movhi	r3,31076
   20e68:	18dbd084 	addi	r3,r3,28482
   20e6c:	10c00015 	stw	r3,0(r2)
   20e70:	00d85b34 	movhi	r3,24940
   20e74:	18d4c804 	addi	r3,r3,21280
   20e78:	10c00115 	stw	r3,4(r2)
   20e7c:	00c01b44 	movi	r3,109
   20e80:	10c0020d 	sth	r3,8(r2)
	bodySlam.power = 85;
   20e84:	00801544 	movi	r2,85
   20e88:	e0bf0a15 	stw	r2,-984(fp)
	bodySlam.numValue = 22;
   20e8c:	00800584 	movi	r2,22
   20e90:	e0bf0b15 	stw	r2,-980(fp)
	allAttacks[bodySlam.numValue] = bodySlam;
   20e94:	e0bf0b17 	ldw	r2,-980(fp)
   20e98:	040000b4 	movhi	r16,2
   20e9c:	8415b704 	addi	r16,r16,22236
   20ea0:	01401b04 	movi	r5,108
   20ea4:	1009883a 	mov	r4,r2
   20ea8:	0022b040 	call	22b04 <__mulsi3>
   20eac:	8085883a 	add	r2,r16,r2
   20eb0:	1009883a 	mov	r4,r2
   20eb4:	e0bef104 	addi	r2,fp,-1084
   20eb8:	00c01b04 	movi	r3,108
   20ebc:	180d883a 	mov	r6,r3
   20ec0:	100b883a 	mov	r5,r2
   20ec4:	0022b2c0 	call	22b2c <memcpy>

	attack solarBeam;
	strcpy(solarBeam.name, "Solar Beam");
   20ec8:	e0bf0c04 	addi	r2,fp,-976
   20ecc:	00d85b34 	movhi	r3,24940
   20ed0:	18dbd4c4 	addi	r3,r3,28499
   20ed4:	10c00015 	stw	r3,0(r2)
   20ed8:	00d950b4 	movhi	r3,25922
   20edc:	18c81c84 	addi	r3,r3,8306
   20ee0:	10c00115 	stw	r3,4(r2)
   20ee4:	00db5844 	movi	r3,28001
   20ee8:	10c0020d 	sth	r3,8(r2)
   20eec:	10000285 	stb	zero,10(r2)
	solarBeam.power = 120;
   20ef0:	00801e04 	movi	r2,120
   20ef4:	e0bf2515 	stw	r2,-876(fp)
	solarBeam.numValue = 23;
   20ef8:	008005c4 	movi	r2,23
   20efc:	e0bf2615 	stw	r2,-872(fp)
	allAttacks[solarBeam.numValue] = solarBeam;
   20f00:	e0bf2617 	ldw	r2,-872(fp)
   20f04:	040000b4 	movhi	r16,2
   20f08:	8415b704 	addi	r16,r16,22236
   20f0c:	01401b04 	movi	r5,108
   20f10:	1009883a 	mov	r4,r2
   20f14:	0022b040 	call	22b04 <__mulsi3>
   20f18:	8085883a 	add	r2,r16,r2
   20f1c:	1009883a 	mov	r4,r2
   20f20:	e0bf0c04 	addi	r2,fp,-976
   20f24:	00c01b04 	movi	r3,108
   20f28:	180d883a 	mov	r6,r3
   20f2c:	100b883a 	mov	r5,r2
   20f30:	0022b2c0 	call	22b2c <memcpy>

	// ***********************************************************
	// Attacks for Cyndaquil

	attack flameWheel;
	strcpy(flameWheel.name, "Flame Wheel");
   20f34:	e0bf2704 	addi	r2,fp,-868
   20f38:	00db5874 	movhi	r3,28001
   20f3c:	18db1184 	addi	r3,r3,27718
   20f40:	10c00015 	stw	r3,0(r2)
   20f44:	00da15f4 	movhi	r3,26711
   20f48:	18c81944 	addi	r3,r3,8293
   20f4c:	10c00115 	stw	r3,4(r2)
   20f50:	00c01b34 	movhi	r3,108
   20f54:	18d95944 	addi	r3,r3,25957
   20f58:	10c00215 	stw	r3,8(r2)
	flameWheel.power = 60;
   20f5c:	00800f04 	movi	r2,60
   20f60:	e0bf4015 	stw	r2,-768(fp)
	flameWheel.numValue = 24;
   20f64:	00800604 	movi	r2,24
   20f68:	e0bf4115 	stw	r2,-764(fp)
	allAttacks[flameWheel.numValue] = flameWheel;
   20f6c:	e0bf4117 	ldw	r2,-764(fp)
   20f70:	040000b4 	movhi	r16,2
   20f74:	8415b704 	addi	r16,r16,22236
   20f78:	01401b04 	movi	r5,108
   20f7c:	1009883a 	mov	r4,r2
   20f80:	0022b040 	call	22b04 <__mulsi3>
   20f84:	8085883a 	add	r2,r16,r2
   20f88:	1009883a 	mov	r4,r2
   20f8c:	e0bf2704 	addi	r2,fp,-868
   20f90:	00c01b04 	movi	r3,108
   20f94:	180d883a 	mov	r6,r3
   20f98:	100b883a 	mov	r5,r2
   20f9c:	0022b2c0 	call	22b2c <memcpy>

	attack flamethrower;
	strcpy(flamethrower.name, "Flamethrower");
   20fa0:	e0bf4204 	addi	r2,fp,-760
   20fa4:	00db5874 	movhi	r3,28001
   20fa8:	18db1184 	addi	r3,r3,27718
   20fac:	10c00015 	stw	r3,0(r2)
   20fb0:	00dc9a34 	movhi	r3,29288
   20fb4:	18dd1944 	addi	r3,r3,29797
   20fb8:	10c00115 	stw	r3,4(r2)
   20fbc:	00dc9974 	movhi	r3,29285
   20fc0:	18dddbc4 	addi	r3,r3,30575
   20fc4:	10c00215 	stw	r3,8(r2)
   20fc8:	10000305 	stb	zero,12(r2)
	flamethrower.power = 90;
   20fcc:	00801684 	movi	r2,90
   20fd0:	e0bf5b15 	stw	r2,-660(fp)
	flamethrower.numValue = 25;
   20fd4:	00800644 	movi	r2,25
   20fd8:	e0bf5c15 	stw	r2,-656(fp)
	allAttacks[flamethrower.numValue] = flamethrower;
   20fdc:	e0bf5c17 	ldw	r2,-656(fp)
   20fe0:	040000b4 	movhi	r16,2
   20fe4:	8415b704 	addi	r16,r16,22236
   20fe8:	01401b04 	movi	r5,108
   20fec:	1009883a 	mov	r4,r2
   20ff0:	0022b040 	call	22b04 <__mulsi3>
   20ff4:	8085883a 	add	r2,r16,r2
   20ff8:	1009883a 	mov	r4,r2
   20ffc:	e0bf4204 	addi	r2,fp,-760
   21000:	00c01b04 	movi	r3,108
   21004:	180d883a 	mov	r6,r3
   21008:	100b883a 	mov	r5,r2
   2100c:	0022b2c0 	call	22b2c <memcpy>

	attack inferno;
	strcpy(inferno.name, "Inferno");
   21010:	e0ff5d04 	addi	r3,fp,-652
   21014:	009959b4 	movhi	r2,25958
   21018:	109b9244 	addi	r2,r2,28233
   2101c:	18800015 	stw	r2,0(r3)
   21020:	00801bf4 	movhi	r2,111
   21024:	109b9c84 	addi	r2,r2,28274
   21028:	18800115 	stw	r2,4(r3)
	inferno.power = 100;
   2102c:	00801904 	movi	r2,100
   21030:	e0bf7615 	stw	r2,-552(fp)
	inferno.numValue = 26;
   21034:	00800684 	movi	r2,26
   21038:	e0bf7715 	stw	r2,-548(fp)
	allAttacks[inferno.numValue] = inferno;
   2103c:	e0bf7717 	ldw	r2,-548(fp)
   21040:	040000b4 	movhi	r16,2
   21044:	8415b704 	addi	r16,r16,22236
   21048:	01401b04 	movi	r5,108
   2104c:	1009883a 	mov	r4,r2
   21050:	0022b040 	call	22b04 <__mulsi3>
   21054:	8085883a 	add	r2,r16,r2
   21058:	1009883a 	mov	r4,r2
   2105c:	e0bf5d04 	addi	r2,fp,-652
   21060:	00c01b04 	movi	r3,108
   21064:	180d883a 	mov	r6,r3
   21068:	100b883a 	mov	r5,r2
   2106c:	0022b2c0 	call	22b2c <memcpy>

	attack eruption;
	strcpy(eruption.name, "Eruption");
   21070:	e0bf7804 	addi	r2,fp,-544
   21074:	00dc1d74 	movhi	r3,28789
   21078:	18dc9144 	addi	r3,r3,29253
   2107c:	10c00015 	stw	r3,0(r2)
   21080:	00db9bf4 	movhi	r3,28271
   21084:	18da5d04 	addi	r3,r3,26996
   21088:	10c00115 	stw	r3,4(r2)
   2108c:	10000205 	stb	zero,8(r2)
	eruption.power = 150;
   21090:	00802584 	movi	r2,150
   21094:	e0bf9115 	stw	r2,-444(fp)
	eruption.numValue = 27;
   21098:	008006c4 	movi	r2,27
   2109c:	e0bf9215 	stw	r2,-440(fp)
	allAttacks[eruption.numValue] = eruption;
   210a0:	e0bf9217 	ldw	r2,-440(fp)
   210a4:	040000b4 	movhi	r16,2
   210a8:	8415b704 	addi	r16,r16,22236
   210ac:	01401b04 	movi	r5,108
   210b0:	1009883a 	mov	r4,r2
   210b4:	0022b040 	call	22b04 <__mulsi3>
   210b8:	8085883a 	add	r2,r16,r2
   210bc:	1009883a 	mov	r4,r2
   210c0:	e0bf7804 	addi	r2,fp,-544
   210c4:	00c01b04 	movi	r3,108
   210c8:	180d883a 	mov	r6,r3
   210cc:	100b883a 	mov	r5,r2
   210d0:	0022b2c0 	call	22b2c <memcpy>

	// ***********************************************************
	// Attacks for Totodile

	attack rage;
	strcpy(rage.name, "Rage");
   210d4:	e0ff9304 	addi	r3,fp,-436
   210d8:	009959f4 	movhi	r2,25959
   210dc:	10985484 	addi	r2,r2,24914
   210e0:	18800015 	stw	r2,0(r3)
   210e4:	18000105 	stb	zero,4(r3)
	rage.power = 20;
   210e8:	00800504 	movi	r2,20
   210ec:	e0bfac15 	stw	r2,-336(fp)
	rage.numValue = 28;
   210f0:	00800704 	movi	r2,28
   210f4:	e0bfad15 	stw	r2,-332(fp)
	allAttacks[rage.numValue] = rage;
   210f8:	e0bfad17 	ldw	r2,-332(fp)
   210fc:	040000b4 	movhi	r16,2
   21100:	8415b704 	addi	r16,r16,22236
   21104:	01401b04 	movi	r5,108
   21108:	1009883a 	mov	r4,r2
   2110c:	0022b040 	call	22b04 <__mulsi3>
   21110:	8085883a 	add	r2,r16,r2
   21114:	1009883a 	mov	r4,r2
   21118:	e0bf9304 	addi	r2,fp,-436
   2111c:	00c01b04 	movi	r3,108
   21120:	180d883a 	mov	r6,r3
   21124:	100b883a 	mov	r5,r2
   21128:	0022b2c0 	call	22b2c <memcpy>

	attack chipAway;
	strcpy(chipAway.name, "Chip Away");
   2112c:	e0bfae04 	addi	r2,fp,-328
   21130:	00dc1a74 	movhi	r3,28777
   21134:	18da10c4 	addi	r3,r3,26691
   21138:	10c00015 	stw	r3,0(r2)
   2113c:	00d85df4 	movhi	r3,24951
   21140:	18d04804 	addi	r3,r3,16672
   21144:	10c00115 	stw	r3,4(r2)
   21148:	00c01e44 	movi	r3,121
   2114c:	10c0020d 	sth	r3,8(r2)
	chipAway.power = 70;
   21150:	00801184 	movi	r2,70
   21154:	e0bfc715 	stw	r2,-228(fp)
	chipAway.numValue = 29;
   21158:	00800744 	movi	r2,29
   2115c:	e0bfc815 	stw	r2,-224(fp)
	allAttacks[chipAway.numValue] = chipAway;
   21160:	e0bfc817 	ldw	r2,-224(fp)
   21164:	040000b4 	movhi	r16,2
   21168:	8415b704 	addi	r16,r16,22236
   2116c:	01401b04 	movi	r5,108
   21170:	1009883a 	mov	r4,r2
   21174:	0022b040 	call	22b04 <__mulsi3>
   21178:	8085883a 	add	r2,r16,r2
   2117c:	1009883a 	mov	r4,r2
   21180:	e0bfae04 	addi	r2,fp,-328
   21184:	00c01b04 	movi	r3,108
   21188:	180d883a 	mov	r6,r3
   2118c:	100b883a 	mov	r5,r2
   21190:	0022b2c0 	call	22b2c <memcpy>

	attack slash;
	strcpy(slash.name, "Slash");
   21194:	e0ffc904 	addi	r3,fp,-220
   21198:	009cd874 	movhi	r2,29537
   2119c:	109b14c4 	addi	r2,r2,27731
   211a0:	18800015 	stw	r2,0(r3)
   211a4:	00801a04 	movi	r2,104
   211a8:	1880010d 	sth	r2,4(r3)
	slash.power = 70;
   211ac:	00801184 	movi	r2,70
   211b0:	e0bfe215 	stw	r2,-120(fp)
	slash.numValue = 30;
   211b4:	00800784 	movi	r2,30
   211b8:	e0bfe315 	stw	r2,-116(fp)
	allAttacks[slash.numValue] = slash;
   211bc:	e0bfe317 	ldw	r2,-116(fp)
   211c0:	040000b4 	movhi	r16,2
   211c4:	8415b704 	addi	r16,r16,22236
   211c8:	01401b04 	movi	r5,108
   211cc:	1009883a 	mov	r4,r2
   211d0:	0022b040 	call	22b04 <__mulsi3>
   211d4:	8085883a 	add	r2,r16,r2
   211d8:	1009883a 	mov	r4,r2
   211dc:	e0bfc904 	addi	r2,fp,-220
   211e0:	00c01b04 	movi	r3,108
   211e4:	180d883a 	mov	r6,r3
   211e8:	100b883a 	mov	r5,r2
   211ec:	0022b2c0 	call	22b2c <memcpy>

	attack hydroPump;
	strcpy(hydroPump.name, "Hydro Pump");
   211f0:	e0bfe404 	addi	r2,fp,-112
   211f4:	00dc9934 	movhi	r3,29284
   211f8:	18de5204 	addi	r3,r3,31048
   211fc:	10c00015 	stw	r3,0(r2)
   21200:	00dd5434 	movhi	r3,30032
   21204:	18c81bc4 	addi	r3,r3,8303
   21208:	10c00115 	stw	r3,4(r2)
   2120c:	00dc1b44 	movi	r3,28781
   21210:	10c0020d 	sth	r3,8(r2)
   21214:	10000285 	stb	zero,10(r2)
	hydroPump.power = 110;
   21218:	00801b84 	movi	r2,110
   2121c:	e0bffd15 	stw	r2,-12(fp)
	hydroPump.numValue = 31;
   21220:	008007c4 	movi	r2,31
   21224:	e0bffe15 	stw	r2,-8(fp)
	allAttacks[hydroPump.numValue] = hydroPump;
   21228:	e0bffe17 	ldw	r2,-8(fp)
   2122c:	040000b4 	movhi	r16,2
   21230:	8415b704 	addi	r16,r16,22236
   21234:	01401b04 	movi	r5,108
   21238:	1009883a 	mov	r4,r2
   2123c:	0022b040 	call	22b04 <__mulsi3>
   21240:	8085883a 	add	r2,r16,r2
   21244:	1009883a 	mov	r4,r2
   21248:	e0bfe404 	addi	r2,fp,-112
   2124c:	00c01b04 	movi	r3,108
   21250:	180d883a 	mov	r6,r3
   21254:	100b883a 	mov	r5,r2
   21258:	0022b2c0 	call	22b2c <memcpy>

	return allAttacks;
   2125c:	008000b4 	movhi	r2,2
   21260:	1095b704 	addi	r2,r2,22236
}
   21264:	e6ffff04 	addi	sp,fp,-4
   21268:	dfc00217 	ldw	ra,8(sp)
   2126c:	df000117 	ldw	fp,4(sp)
   21270:	dc000017 	ldw	r16,0(sp)
   21274:	dec00304 	addi	sp,sp,12
   21278:	f800283a 	ret

0002127c <definePlayerMe>:
#include "game_structs.h"

void definePlayerMe(player* whoAmI, pokemon* allPokemon, int pokemonOne, int pokemonTwo) {
   2127c:	defffa04 	addi	sp,sp,-24
   21280:	dfc00515 	stw	ra,20(sp)
   21284:	df000415 	stw	fp,16(sp)
   21288:	df000404 	addi	fp,sp,16
   2128c:	e13ffc15 	stw	r4,-16(fp)
   21290:	e17ffd15 	stw	r5,-12(fp)
   21294:	e1bffe15 	stw	r6,-8(fp)
   21298:	e1ffff15 	stw	r7,-4(fp)
  // Need "static"?
  static pokemon pokePartyMe[POKEMON_PARTY_SIZE];
  pokePartyMe[0] = allPokemon[pokemonOne];
   2129c:	e0bffe17 	ldw	r2,-8(fp)
   212a0:	01401e04 	movi	r5,120
   212a4:	1009883a 	mov	r4,r2
   212a8:	0022b040 	call	22b04 <__mulsi3>
   212ac:	1007883a 	mov	r3,r2
   212b0:	e0bffd17 	ldw	r2,-12(fp)
   212b4:	10c7883a 	add	r3,r2,r3
   212b8:	008000b4 	movhi	r2,2
   212bc:	109afd04 	addi	r2,r2,27636
   212c0:	1009883a 	mov	r4,r2
   212c4:	00801e04 	movi	r2,120
   212c8:	100d883a 	mov	r6,r2
   212cc:	180b883a 	mov	r5,r3
   212d0:	0022b2c0 	call	22b2c <memcpy>
  pokePartyMe[1] = allPokemon[pokemonTwo];
   212d4:	e0bfff17 	ldw	r2,-4(fp)
   212d8:	01401e04 	movi	r5,120
   212dc:	1009883a 	mov	r4,r2
   212e0:	0022b040 	call	22b04 <__mulsi3>
   212e4:	1007883a 	mov	r3,r2
   212e8:	e0bffd17 	ldw	r2,-12(fp)
   212ec:	10c7883a 	add	r3,r2,r3
   212f0:	008000b4 	movhi	r2,2
   212f4:	109afd04 	addi	r2,r2,27636
   212f8:	10801e04 	addi	r2,r2,120
   212fc:	1809883a 	mov	r4,r3
   21300:	00c01e04 	movi	r3,120
   21304:	180d883a 	mov	r6,r3
   21308:	200b883a 	mov	r5,r4
   2130c:	1009883a 	mov	r4,r2
   21310:	0022b2c0 	call	22b2c <memcpy>
  whoAmI->pokemonParty = pokePartyMe;
   21314:	e0fffc17 	ldw	r3,-16(fp)
   21318:	008000b4 	movhi	r2,2
   2131c:	109afd04 	addi	r2,r2,27636
   21320:	18800015 	stw	r2,0(r3)
  whoAmI->whichPokemon = 0;
   21324:	e0bffc17 	ldw	r2,-16(fp)
   21328:	10000115 	stw	zero,4(r2)
  /* Don't want to modify Pokemon struct HP in case player gets two of the same Pokemon. Copy pokemon HP. */
  whoAmI->pokemon1HP = allPokemon[pokemonOne].hp;
   2132c:	e0bffe17 	ldw	r2,-8(fp)
   21330:	01401e04 	movi	r5,120
   21334:	1009883a 	mov	r4,r2
   21338:	0022b040 	call	22b04 <__mulsi3>
   2133c:	1007883a 	mov	r3,r2
   21340:	e0bffd17 	ldw	r2,-12(fp)
   21344:	10c5883a 	add	r2,r2,r3
   21348:	10c01a17 	ldw	r3,104(r2)
   2134c:	e0bffc17 	ldw	r2,-16(fp)
   21350:	10c00215 	stw	r3,8(r2)
  whoAmI->pokemon2HP = allPokemon[pokemonTwo].hp;
   21354:	e0bfff17 	ldw	r2,-4(fp)
   21358:	01401e04 	movi	r5,120
   2135c:	1009883a 	mov	r4,r2
   21360:	0022b040 	call	22b04 <__mulsi3>
   21364:	1007883a 	mov	r3,r2
   21368:	e0bffd17 	ldw	r2,-12(fp)
   2136c:	10c5883a 	add	r2,r2,r3
   21370:	10c01a17 	ldw	r3,104(r2)
   21374:	e0bffc17 	ldw	r2,-16(fp)
   21378:	10c00315 	stw	r3,12(r2)
  /* Determine which HP to subtract from when Pokemon takes damage. */

}
   2137c:	0001883a 	nop
   21380:	e037883a 	mov	sp,fp
   21384:	dfc00117 	ldw	ra,4(sp)
   21388:	df000017 	ldw	fp,0(sp)
   2138c:	dec00204 	addi	sp,sp,8
   21390:	f800283a 	ret

00021394 <definePlayerOppo>:


void definePlayerOppo(player* whoAmI, pokemon* allPokemon, int pokemonOne, int pokemonTwo) {
   21394:	defffa04 	addi	sp,sp,-24
   21398:	dfc00515 	stw	ra,20(sp)
   2139c:	df000415 	stw	fp,16(sp)
   213a0:	df000404 	addi	fp,sp,16
   213a4:	e13ffc15 	stw	r4,-16(fp)
   213a8:	e17ffd15 	stw	r5,-12(fp)
   213ac:	e1bffe15 	stw	r6,-8(fp)
   213b0:	e1ffff15 	stw	r7,-4(fp)
  // Need "static"?
  static pokemon pokePartyOppo[POKEMON_PARTY_SIZE];
  pokePartyOppo[0] = allPokemon[pokemonOne];
   213b4:	e0bffe17 	ldw	r2,-8(fp)
   213b8:	01401e04 	movi	r5,120
   213bc:	1009883a 	mov	r4,r2
   213c0:	0022b040 	call	22b04 <__mulsi3>
   213c4:	1007883a 	mov	r3,r2
   213c8:	e0bffd17 	ldw	r2,-12(fp)
   213cc:	10c7883a 	add	r3,r2,r3
   213d0:	008000b4 	movhi	r2,2
   213d4:	109b3904 	addi	r2,r2,27876
   213d8:	1009883a 	mov	r4,r2
   213dc:	00801e04 	movi	r2,120
   213e0:	100d883a 	mov	r6,r2
   213e4:	180b883a 	mov	r5,r3
   213e8:	0022b2c0 	call	22b2c <memcpy>
  pokePartyOppo[1] = allPokemon[pokemonTwo];
   213ec:	e0bfff17 	ldw	r2,-4(fp)
   213f0:	01401e04 	movi	r5,120
   213f4:	1009883a 	mov	r4,r2
   213f8:	0022b040 	call	22b04 <__mulsi3>
   213fc:	1007883a 	mov	r3,r2
   21400:	e0bffd17 	ldw	r2,-12(fp)
   21404:	10c7883a 	add	r3,r2,r3
   21408:	008000b4 	movhi	r2,2
   2140c:	109b3904 	addi	r2,r2,27876
   21410:	10801e04 	addi	r2,r2,120
   21414:	1809883a 	mov	r4,r3
   21418:	00c01e04 	movi	r3,120
   2141c:	180d883a 	mov	r6,r3
   21420:	200b883a 	mov	r5,r4
   21424:	1009883a 	mov	r4,r2
   21428:	0022b2c0 	call	22b2c <memcpy>
  whoAmI->pokemonParty = pokePartyOppo;
   2142c:	e0fffc17 	ldw	r3,-16(fp)
   21430:	008000b4 	movhi	r2,2
   21434:	109b3904 	addi	r2,r2,27876
   21438:	18800015 	stw	r2,0(r3)
  whoAmI->whichPokemon = 0;
   2143c:	e0bffc17 	ldw	r2,-16(fp)
   21440:	10000115 	stw	zero,4(r2)
  /* Don't want to modify Pokemon struct HP in case player gets two of the same Pokemon. Copy pokemon HP. */
  whoAmI->pokemon1HP = allPokemon[pokemonOne].hp;
   21444:	e0bffe17 	ldw	r2,-8(fp)
   21448:	01401e04 	movi	r5,120
   2144c:	1009883a 	mov	r4,r2
   21450:	0022b040 	call	22b04 <__mulsi3>
   21454:	1007883a 	mov	r3,r2
   21458:	e0bffd17 	ldw	r2,-12(fp)
   2145c:	10c5883a 	add	r2,r2,r3
   21460:	10c01a17 	ldw	r3,104(r2)
   21464:	e0bffc17 	ldw	r2,-16(fp)
   21468:	10c00215 	stw	r3,8(r2)
  whoAmI->pokemon2HP = allPokemon[pokemonTwo].hp;
   2146c:	e0bfff17 	ldw	r2,-4(fp)
   21470:	01401e04 	movi	r5,120
   21474:	1009883a 	mov	r4,r2
   21478:	0022b040 	call	22b04 <__mulsi3>
   2147c:	1007883a 	mov	r3,r2
   21480:	e0bffd17 	ldw	r2,-12(fp)
   21484:	10c5883a 	add	r2,r2,r3
   21488:	10c01a17 	ldw	r3,104(r2)
   2148c:	e0bffc17 	ldw	r2,-16(fp)
   21490:	10c00315 	stw	r3,12(r2)
  /* Determine which HP to subtract from when Pokemon takes damage. */

}
   21494:	0001883a 	nop
   21498:	e037883a 	mov	sp,fp
   2149c:	dfc00117 	ldw	ra,4(sp)
   214a0:	df000017 	ldw	fp,0(sp)
   214a4:	dec00204 	addi	sp,sp,8
   214a8:	f800283a 	ret

000214ac <definePokemon>:
#include "game_structs.h"
#include <string.h>
#include <stdio.h>

pokemon* definePokemon(attack* allAttacks){
   214ac:	deff0c04 	addi	sp,sp,-976
   214b0:	dfc0f315 	stw	ra,972(sp)
   214b4:	df00f215 	stw	fp,968(sp)
   214b8:	dc00f115 	stw	r16,964(sp)
   214bc:	df00f204 	addi	fp,sp,968
   214c0:	e13ffe15 	stw	r4,-8(fp)
	static pokemon allPokemon[NUM_POKEMON];

	pokemon charmander;
	strcpy(charmander.name, "CHARMANDER");
   214c4:	00949074 	movhi	r2,21057
   214c8:	109210c4 	addi	r2,r2,18499
   214cc:	e0bf0e15 	stw	r2,-968(fp)
   214d0:	009113b4 	movhi	r2,17486
   214d4:	10905344 	addi	r2,r2,16717
   214d8:	e0bf0f15 	stw	r2,-964(fp)
   214dc:	00949144 	movi	r2,21061
   214e0:	e0bf100d 	sth	r2,-960(fp)
   214e4:	e03f1085 	stb	zero,-958(fp)
	static attack moveSet0[4];
	moveSet0[0] = allAttacks[4];
   214e8:	008000b4 	movhi	r2,2
   214ec:	109b7504 	addi	r2,r2,28116
   214f0:	e0fffe17 	ldw	r3,-8(fp)
   214f4:	1009883a 	mov	r4,r2
   214f8:	18806c04 	addi	r2,r3,432
   214fc:	00c01b04 	movi	r3,108
   21500:	180d883a 	mov	r6,r3
   21504:	100b883a 	mov	r5,r2
   21508:	0022b2c0 	call	22b2c <memcpy>
	moveSet0[1] = allAttacks[5];
   2150c:	008000b4 	movhi	r2,2
   21510:	109b7504 	addi	r2,r2,28116
   21514:	e0fffe17 	ldw	r3,-8(fp)
   21518:	10801b04 	addi	r2,r2,108
   2151c:	18c08704 	addi	r3,r3,540
   21520:	01001b04 	movi	r4,108
   21524:	200d883a 	mov	r6,r4
   21528:	180b883a 	mov	r5,r3
   2152c:	1009883a 	mov	r4,r2
   21530:	0022b2c0 	call	22b2c <memcpy>
	moveSet0[2] = allAttacks[6];
   21534:	008000b4 	movhi	r2,2
   21538:	109b7504 	addi	r2,r2,28116
   2153c:	e0fffe17 	ldw	r3,-8(fp)
   21540:	10803604 	addi	r2,r2,216
   21544:	18c0a204 	addi	r3,r3,648
   21548:	01001b04 	movi	r4,108
   2154c:	200d883a 	mov	r6,r4
   21550:	180b883a 	mov	r5,r3
   21554:	1009883a 	mov	r4,r2
   21558:	0022b2c0 	call	22b2c <memcpy>
	moveSet0[3] = allAttacks[7];
   2155c:	008000b4 	movhi	r2,2
   21560:	109b7504 	addi	r2,r2,28116
   21564:	e0fffe17 	ldw	r3,-8(fp)
   21568:	10805104 	addi	r2,r2,324
   2156c:	18c0bd04 	addi	r3,r3,756
   21570:	01001b04 	movi	r4,108
   21574:	200d883a 	mov	r6,r4
   21578:	180b883a 	mov	r5,r3
   2157c:	1009883a 	mov	r4,r2
   21580:	0022b2c0 	call	22b2c <memcpy>
	charmander.attacks = moveSet0;
   21584:	008000b4 	movhi	r2,2
   21588:	109b7504 	addi	r2,r2,28116
   2158c:	e0bf2715 	stw	r2,-868(fp)
	charmander.hp = 39;
   21590:	008009c4 	movi	r2,39
   21594:	e0bf2815 	stw	r2,-864(fp)
	charmander.atk = 52;
   21598:	00800d04 	movi	r2,52
   2159c:	e0bf2915 	stw	r2,-860(fp)
	charmander.def = 65;
   215a0:	00801044 	movi	r2,65
   215a4:	e0bf2a15 	stw	r2,-856(fp)
	charmander.numValue = 0;
   215a8:	e03f2b15 	stw	zero,-852(fp)
	allPokemon[charmander.numValue] = charmander;
   215ac:	e0bf2b17 	ldw	r2,-852(fp)
   215b0:	040000b4 	movhi	r16,2
   215b4:	841be104 	addi	r16,r16,28548
   215b8:	01401e04 	movi	r5,120
   215bc:	1009883a 	mov	r4,r2
   215c0:	0022b040 	call	22b04 <__mulsi3>
   215c4:	8085883a 	add	r2,r16,r2
   215c8:	1007883a 	mov	r3,r2
   215cc:	e13f0e04 	addi	r4,fp,-968
   215d0:	00801e04 	movi	r2,120
   215d4:	100d883a 	mov	r6,r2
   215d8:	200b883a 	mov	r5,r4
   215dc:	1809883a 	mov	r4,r3
   215e0:	0022b2c0 	call	22b2c <memcpy>

	pokemon squirtle;
	strcpy(squirtle.name, "SQUIRTLE");
   215e4:	e0bf2c04 	addi	r2,fp,-848
   215e8:	00d25574 	movhi	r3,18773
   215ec:	18d454c4 	addi	r3,r3,20819
   215f0:	10c00015 	stw	r3,0(r2)
   215f4:	00d15334 	movhi	r3,17740
   215f8:	18d51484 	addi	r3,r3,21586
   215fc:	10c00115 	stw	r3,4(r2)
   21600:	10000205 	stb	zero,8(r2)
	static attack moveSet1[4];
	moveSet1[0] = allAttacks[8];
   21604:	008000b4 	movhi	r2,2
   21608:	109cd104 	addi	r2,r2,29508
   2160c:	e0fffe17 	ldw	r3,-8(fp)
   21610:	1009883a 	mov	r4,r2
   21614:	1880d804 	addi	r2,r3,864
   21618:	00c01b04 	movi	r3,108
   2161c:	180d883a 	mov	r6,r3
   21620:	100b883a 	mov	r5,r2
   21624:	0022b2c0 	call	22b2c <memcpy>
	moveSet1[1] = allAttacks[9];
   21628:	008000b4 	movhi	r2,2
   2162c:	109cd104 	addi	r2,r2,29508
   21630:	e0fffe17 	ldw	r3,-8(fp)
   21634:	10801b04 	addi	r2,r2,108
   21638:	18c0f304 	addi	r3,r3,972
   2163c:	01001b04 	movi	r4,108
   21640:	200d883a 	mov	r6,r4
   21644:	180b883a 	mov	r5,r3
   21648:	1009883a 	mov	r4,r2
   2164c:	0022b2c0 	call	22b2c <memcpy>
	moveSet1[2] = allAttacks[10];
   21650:	008000b4 	movhi	r2,2
   21654:	109cd104 	addi	r2,r2,29508
   21658:	e0fffe17 	ldw	r3,-8(fp)
   2165c:	10803604 	addi	r2,r2,216
   21660:	18c10e04 	addi	r3,r3,1080
   21664:	01001b04 	movi	r4,108
   21668:	200d883a 	mov	r6,r4
   2166c:	180b883a 	mov	r5,r3
   21670:	1009883a 	mov	r4,r2
   21674:	0022b2c0 	call	22b2c <memcpy>
	moveSet1[3] = allAttacks[11];
   21678:	008000b4 	movhi	r2,2
   2167c:	109cd104 	addi	r2,r2,29508
   21680:	e0fffe17 	ldw	r3,-8(fp)
   21684:	10805104 	addi	r2,r2,324
   21688:	18c12904 	addi	r3,r3,1188
   2168c:	01001b04 	movi	r4,108
   21690:	200d883a 	mov	r6,r4
   21694:	180b883a 	mov	r5,r3
   21698:	1009883a 	mov	r4,r2
   2169c:	0022b2c0 	call	22b2c <memcpy>
	squirtle.attacks = moveSet1;
   216a0:	008000b4 	movhi	r2,2
   216a4:	109cd104 	addi	r2,r2,29508
   216a8:	e0bf4515 	stw	r2,-748(fp)
	squirtle.hp = 44;
   216ac:	00800b04 	movi	r2,44
   216b0:	e0bf4615 	stw	r2,-744(fp)
	squirtle.atk = 48;
   216b4:	00800c04 	movi	r2,48
   216b8:	e0bf4715 	stw	r2,-740(fp)
	squirtle.def = 48;
   216bc:	00800c04 	movi	r2,48
   216c0:	e0bf4815 	stw	r2,-736(fp)
	squirtle.numValue = 1;
   216c4:	00800044 	movi	r2,1
   216c8:	e0bf4915 	stw	r2,-732(fp)
	allPokemon[squirtle.numValue] = squirtle;
   216cc:	e0bf4917 	ldw	r2,-732(fp)
   216d0:	040000b4 	movhi	r16,2
   216d4:	841be104 	addi	r16,r16,28548
   216d8:	01401e04 	movi	r5,120
   216dc:	1009883a 	mov	r4,r2
   216e0:	0022b040 	call	22b04 <__mulsi3>
   216e4:	8085883a 	add	r2,r16,r2
   216e8:	1009883a 	mov	r4,r2
   216ec:	e0bf2c04 	addi	r2,fp,-848
   216f0:	00c01e04 	movi	r3,120
   216f4:	180d883a 	mov	r6,r3
   216f8:	100b883a 	mov	r5,r2
   216fc:	0022b2c0 	call	22b2c <memcpy>

	pokemon bulbasaur;
	strcpy(bulbasaur.name, "BULBASAUR");
   21700:	e0bf4a04 	addi	r2,fp,-728
   21704:	00d09334 	movhi	r3,16972
   21708:	18d55084 	addi	r3,r3,21826
   2170c:	10c00015 	stw	r3,0(r2)
   21710:	00d55074 	movhi	r3,21825
   21714:	18d4d044 	addi	r3,r3,21313
   21718:	10c00115 	stw	r3,4(r2)
   2171c:	00c01484 	movi	r3,82
   21720:	10c0020d 	sth	r3,8(r2)
	static attack moveSet2[4];
	moveSet2[0] = allAttacks[0];
   21724:	008000b4 	movhi	r2,2
   21728:	109d3d04 	addi	r2,r2,29940
   2172c:	e0fffe17 	ldw	r3,-8(fp)
   21730:	1009883a 	mov	r4,r2
   21734:	00801b04 	movi	r2,108
   21738:	100d883a 	mov	r6,r2
   2173c:	180b883a 	mov	r5,r3
   21740:	0022b2c0 	call	22b2c <memcpy>
	moveSet2[1] = allAttacks[1];
   21744:	008000b4 	movhi	r2,2
   21748:	109d3d04 	addi	r2,r2,29940
   2174c:	e0fffe17 	ldw	r3,-8(fp)
   21750:	10801b04 	addi	r2,r2,108
   21754:	18c01b04 	addi	r3,r3,108
   21758:	01001b04 	movi	r4,108
   2175c:	200d883a 	mov	r6,r4
   21760:	180b883a 	mov	r5,r3
   21764:	1009883a 	mov	r4,r2
   21768:	0022b2c0 	call	22b2c <memcpy>
	moveSet2[2] = allAttacks[2];
   2176c:	008000b4 	movhi	r2,2
   21770:	109d3d04 	addi	r2,r2,29940
   21774:	e0fffe17 	ldw	r3,-8(fp)
   21778:	10803604 	addi	r2,r2,216
   2177c:	18c03604 	addi	r3,r3,216
   21780:	01001b04 	movi	r4,108
   21784:	200d883a 	mov	r6,r4
   21788:	180b883a 	mov	r5,r3
   2178c:	1009883a 	mov	r4,r2
   21790:	0022b2c0 	call	22b2c <memcpy>
	moveSet2[3] = allAttacks[3];
   21794:	008000b4 	movhi	r2,2
   21798:	109d3d04 	addi	r2,r2,29940
   2179c:	e0fffe17 	ldw	r3,-8(fp)
   217a0:	10805104 	addi	r2,r2,324
   217a4:	18c05104 	addi	r3,r3,324
   217a8:	01001b04 	movi	r4,108
   217ac:	200d883a 	mov	r6,r4
   217b0:	180b883a 	mov	r5,r3
   217b4:	1009883a 	mov	r4,r2
   217b8:	0022b2c0 	call	22b2c <memcpy>
	bulbasaur.attacks = moveSet2;
   217bc:	008000b4 	movhi	r2,2
   217c0:	109d3d04 	addi	r2,r2,29940
   217c4:	e0bf6315 	stw	r2,-628(fp)
	bulbasaur.hp = 45;
   217c8:	00800b44 	movi	r2,45
   217cc:	e0bf6415 	stw	r2,-624(fp)
	bulbasaur.atk = 49;
   217d0:	00800c44 	movi	r2,49
   217d4:	e0bf6515 	stw	r2,-620(fp)
	bulbasaur.def = 49;
   217d8:	00800c44 	movi	r2,49
   217dc:	e0bf6615 	stw	r2,-616(fp)
	bulbasaur.numValue = 2;
   217e0:	00800084 	movi	r2,2
   217e4:	e0bf6715 	stw	r2,-612(fp)
	allPokemon[bulbasaur.numValue] = bulbasaur;
   217e8:	e0bf6717 	ldw	r2,-612(fp)
   217ec:	040000b4 	movhi	r16,2
   217f0:	841be104 	addi	r16,r16,28548
   217f4:	01401e04 	movi	r5,120
   217f8:	1009883a 	mov	r4,r2
   217fc:	0022b040 	call	22b04 <__mulsi3>
   21800:	8085883a 	add	r2,r16,r2
   21804:	1009883a 	mov	r4,r2
   21808:	e0bf4a04 	addi	r2,fp,-728
   2180c:	00c01e04 	movi	r3,120
   21810:	180d883a 	mov	r6,r3
   21814:	100b883a 	mov	r5,r2
   21818:	0022b2c0 	call	22b2c <memcpy>

	pokemon pikachu;
	strcpy(pikachu.name, "PIKACHU");
   2181c:	e0ff6804 	addi	r3,fp,-608
   21820:	009052f4 	movhi	r2,16715
   21824:	10925404 	addi	r2,r2,18768
   21828:	18800015 	stw	r2,0(r3)
   2182c:	00801574 	movhi	r2,85
   21830:	109210c4 	addi	r2,r2,18499
   21834:	18800115 	stw	r2,4(r3)
	static attack moveSet3[4];
	moveSet3[0] = allAttacks[12];
   21838:	008000b4 	movhi	r2,2
   2183c:	109da904 	addi	r2,r2,30372
   21840:	e0fffe17 	ldw	r3,-8(fp)
   21844:	1009883a 	mov	r4,r2
   21848:	18814404 	addi	r2,r3,1296
   2184c:	00c01b04 	movi	r3,108
   21850:	180d883a 	mov	r6,r3
   21854:	100b883a 	mov	r5,r2
   21858:	0022b2c0 	call	22b2c <memcpy>
	moveSet3[1] = allAttacks[13];
   2185c:	008000b4 	movhi	r2,2
   21860:	109da904 	addi	r2,r2,30372
   21864:	e0fffe17 	ldw	r3,-8(fp)
   21868:	10801b04 	addi	r2,r2,108
   2186c:	18c15f04 	addi	r3,r3,1404
   21870:	01001b04 	movi	r4,108
   21874:	200d883a 	mov	r6,r4
   21878:	180b883a 	mov	r5,r3
   2187c:	1009883a 	mov	r4,r2
   21880:	0022b2c0 	call	22b2c <memcpy>
	moveSet3[2] = allAttacks[14];
   21884:	008000b4 	movhi	r2,2
   21888:	109da904 	addi	r2,r2,30372
   2188c:	e0fffe17 	ldw	r3,-8(fp)
   21890:	10803604 	addi	r2,r2,216
   21894:	18c17a04 	addi	r3,r3,1512
   21898:	01001b04 	movi	r4,108
   2189c:	200d883a 	mov	r6,r4
   218a0:	180b883a 	mov	r5,r3
   218a4:	1009883a 	mov	r4,r2
   218a8:	0022b2c0 	call	22b2c <memcpy>
	moveSet3[3] = allAttacks[15];
   218ac:	008000b4 	movhi	r2,2
   218b0:	109da904 	addi	r2,r2,30372
   218b4:	e0fffe17 	ldw	r3,-8(fp)
   218b8:	10805104 	addi	r2,r2,324
   218bc:	18c19504 	addi	r3,r3,1620
   218c0:	01001b04 	movi	r4,108
   218c4:	200d883a 	mov	r6,r4
   218c8:	180b883a 	mov	r5,r3
   218cc:	1009883a 	mov	r4,r2
   218d0:	0022b2c0 	call	22b2c <memcpy>
	pikachu.attacks = moveSet3;
   218d4:	008000b4 	movhi	r2,2
   218d8:	109da904 	addi	r2,r2,30372
   218dc:	e0bf8115 	stw	r2,-508(fp)
	pikachu.hp = 35;
   218e0:	008008c4 	movi	r2,35
   218e4:	e0bf8215 	stw	r2,-504(fp)
	pikachu.atk = 55;
   218e8:	00800dc4 	movi	r2,55
   218ec:	e0bf8315 	stw	r2,-500(fp)
	pikachu.def = 40;
   218f0:	00800a04 	movi	r2,40
   218f4:	e0bf8415 	stw	r2,-496(fp)
	pikachu.numValue = 3;
   218f8:	008000c4 	movi	r2,3
   218fc:	e0bf8515 	stw	r2,-492(fp)
	allPokemon[pikachu.numValue] = pikachu;
   21900:	e0bf8517 	ldw	r2,-492(fp)
   21904:	040000b4 	movhi	r16,2
   21908:	841be104 	addi	r16,r16,28548
   2190c:	01401e04 	movi	r5,120
   21910:	1009883a 	mov	r4,r2
   21914:	0022b040 	call	22b04 <__mulsi3>
   21918:	8085883a 	add	r2,r16,r2
   2191c:	1009883a 	mov	r4,r2
   21920:	e0bf6804 	addi	r2,fp,-608
   21924:	00c01e04 	movi	r3,120
   21928:	180d883a 	mov	r6,r3
   2192c:	100b883a 	mov	r5,r2
   21930:	0022b2c0 	call	22b2c <memcpy>

	pokemon eevee;
	strcpy(eevee.name, "EEVEE");
   21934:	e0ff8604 	addi	r3,fp,-488
   21938:	009155b4 	movhi	r2,17750
   2193c:	10915144 	addi	r2,r2,17733
   21940:	18800015 	stw	r2,0(r3)
   21944:	00801144 	movi	r2,69
   21948:	1880010d 	sth	r2,4(r3)
	static attack moveSet4[4];
	moveSet4[0] = allAttacks[16];
   2194c:	008000b4 	movhi	r2,2
   21950:	109e1504 	addi	r2,r2,30804
   21954:	e0fffe17 	ldw	r3,-8(fp)
   21958:	1009883a 	mov	r4,r2
   2195c:	1881b004 	addi	r2,r3,1728
   21960:	00c01b04 	movi	r3,108
   21964:	180d883a 	mov	r6,r3
   21968:	100b883a 	mov	r5,r2
   2196c:	0022b2c0 	call	22b2c <memcpy>
	moveSet4[1] = allAttacks[17];
   21970:	008000b4 	movhi	r2,2
   21974:	109e1504 	addi	r2,r2,30804
   21978:	e0fffe17 	ldw	r3,-8(fp)
   2197c:	10801b04 	addi	r2,r2,108
   21980:	18c1cb04 	addi	r3,r3,1836
   21984:	01001b04 	movi	r4,108
   21988:	200d883a 	mov	r6,r4
   2198c:	180b883a 	mov	r5,r3
   21990:	1009883a 	mov	r4,r2
   21994:	0022b2c0 	call	22b2c <memcpy>
	moveSet4[2] = allAttacks[18];
   21998:	008000b4 	movhi	r2,2
   2199c:	109e1504 	addi	r2,r2,30804
   219a0:	e0fffe17 	ldw	r3,-8(fp)
   219a4:	10803604 	addi	r2,r2,216
   219a8:	18c1e604 	addi	r3,r3,1944
   219ac:	01001b04 	movi	r4,108
   219b0:	200d883a 	mov	r6,r4
   219b4:	180b883a 	mov	r5,r3
   219b8:	1009883a 	mov	r4,r2
   219bc:	0022b2c0 	call	22b2c <memcpy>
	moveSet4[3] = allAttacks[19];
   219c0:	008000b4 	movhi	r2,2
   219c4:	109e1504 	addi	r2,r2,30804
   219c8:	e0fffe17 	ldw	r3,-8(fp)
   219cc:	10805104 	addi	r2,r2,324
   219d0:	18c20104 	addi	r3,r3,2052
   219d4:	01001b04 	movi	r4,108
   219d8:	200d883a 	mov	r6,r4
   219dc:	180b883a 	mov	r5,r3
   219e0:	1009883a 	mov	r4,r2
   219e4:	0022b2c0 	call	22b2c <memcpy>
	eevee.attacks = moveSet4;
   219e8:	008000b4 	movhi	r2,2
   219ec:	109e1504 	addi	r2,r2,30804
   219f0:	e0bf9f15 	stw	r2,-388(fp)
	eevee.hp = 55;
   219f4:	00800dc4 	movi	r2,55
   219f8:	e0bfa015 	stw	r2,-384(fp)
	eevee.atk = 55;
   219fc:	00800dc4 	movi	r2,55
   21a00:	e0bfa115 	stw	r2,-380(fp)
	eevee.def = 50;
   21a04:	00800c84 	movi	r2,50
   21a08:	e0bfa215 	stw	r2,-376(fp)
	eevee.numValue = 4;
   21a0c:	00800104 	movi	r2,4
   21a10:	e0bfa315 	stw	r2,-372(fp)
	allPokemon[eevee.numValue] = eevee;
   21a14:	e0bfa317 	ldw	r2,-372(fp)
   21a18:	040000b4 	movhi	r16,2
   21a1c:	841be104 	addi	r16,r16,28548
   21a20:	01401e04 	movi	r5,120
   21a24:	1009883a 	mov	r4,r2
   21a28:	0022b040 	call	22b04 <__mulsi3>
   21a2c:	8085883a 	add	r2,r16,r2
   21a30:	1009883a 	mov	r4,r2
   21a34:	e0bf8604 	addi	r2,fp,-488
   21a38:	00c01e04 	movi	r3,120
   21a3c:	180d883a 	mov	r6,r3
   21a40:	100b883a 	mov	r5,r2
   21a44:	0022b2c0 	call	22b2c <memcpy>

	pokemon chikorita;
	strcpy(chikorita.name, "CHIKORITA");
   21a48:	e0bfa404 	addi	r2,fp,-368
   21a4c:	00d2d274 	movhi	r3,19273
   21a50:	18d210c4 	addi	r3,r3,18499
   21a54:	10c00015 	stw	r3,0(r2)
   21a58:	00d51274 	movhi	r3,21577
   21a5c:	18d493c4 	addi	r3,r3,21071
   21a60:	10c00115 	stw	r3,4(r2)
   21a64:	00c01044 	movi	r3,65
   21a68:	10c0020d 	sth	r3,8(r2)
	static attack moveSet5[4];
	moveSet5[0] = allAttacks[20];
   21a6c:	008000b4 	movhi	r2,2
   21a70:	109e8104 	addi	r2,r2,31236
   21a74:	e0fffe17 	ldw	r3,-8(fp)
   21a78:	1009883a 	mov	r4,r2
   21a7c:	18821c04 	addi	r2,r3,2160
   21a80:	00c01b04 	movi	r3,108
   21a84:	180d883a 	mov	r6,r3
   21a88:	100b883a 	mov	r5,r2
   21a8c:	0022b2c0 	call	22b2c <memcpy>
	moveSet5[1] = allAttacks[21];
   21a90:	008000b4 	movhi	r2,2
   21a94:	109e8104 	addi	r2,r2,31236
   21a98:	e0fffe17 	ldw	r3,-8(fp)
   21a9c:	10801b04 	addi	r2,r2,108
   21aa0:	18c23704 	addi	r3,r3,2268
   21aa4:	01001b04 	movi	r4,108
   21aa8:	200d883a 	mov	r6,r4
   21aac:	180b883a 	mov	r5,r3
   21ab0:	1009883a 	mov	r4,r2
   21ab4:	0022b2c0 	call	22b2c <memcpy>
	moveSet5[2] = allAttacks[22];
   21ab8:	008000b4 	movhi	r2,2
   21abc:	109e8104 	addi	r2,r2,31236
   21ac0:	e0fffe17 	ldw	r3,-8(fp)
   21ac4:	10803604 	addi	r2,r2,216
   21ac8:	18c25204 	addi	r3,r3,2376
   21acc:	01001b04 	movi	r4,108
   21ad0:	200d883a 	mov	r6,r4
   21ad4:	180b883a 	mov	r5,r3
   21ad8:	1009883a 	mov	r4,r2
   21adc:	0022b2c0 	call	22b2c <memcpy>
	moveSet5[3] = allAttacks[23];
   21ae0:	008000b4 	movhi	r2,2
   21ae4:	109e8104 	addi	r2,r2,31236
   21ae8:	e0fffe17 	ldw	r3,-8(fp)
   21aec:	10805104 	addi	r2,r2,324
   21af0:	18c26d04 	addi	r3,r3,2484
   21af4:	01001b04 	movi	r4,108
   21af8:	200d883a 	mov	r6,r4
   21afc:	180b883a 	mov	r5,r3
   21b00:	1009883a 	mov	r4,r2
   21b04:	0022b2c0 	call	22b2c <memcpy>
	chikorita.attacks = moveSet5;
   21b08:	008000b4 	movhi	r2,2
   21b0c:	109e8104 	addi	r2,r2,31236
   21b10:	e0bfbd15 	stw	r2,-268(fp)
	chikorita.hp = 45;
   21b14:	00800b44 	movi	r2,45
   21b18:	e0bfbe15 	stw	r2,-264(fp)
	chikorita.atk = 49;
   21b1c:	00800c44 	movi	r2,49
   21b20:	e0bfbf15 	stw	r2,-260(fp)
	chikorita.def = 65;
   21b24:	00801044 	movi	r2,65
   21b28:	e0bfc015 	stw	r2,-256(fp)
	chikorita.numValue = 5;
   21b2c:	00800144 	movi	r2,5
   21b30:	e0bfc115 	stw	r2,-252(fp)
	allPokemon[chikorita.numValue] = chikorita;
   21b34:	e0bfc117 	ldw	r2,-252(fp)
   21b38:	040000b4 	movhi	r16,2
   21b3c:	841be104 	addi	r16,r16,28548
   21b40:	01401e04 	movi	r5,120
   21b44:	1009883a 	mov	r4,r2
   21b48:	0022b040 	call	22b04 <__mulsi3>
   21b4c:	8085883a 	add	r2,r16,r2
   21b50:	1009883a 	mov	r4,r2
   21b54:	e0bfa404 	addi	r2,fp,-368
   21b58:	00c01e04 	movi	r3,120
   21b5c:	180d883a 	mov	r6,r3
   21b60:	100b883a 	mov	r5,r2
   21b64:	0022b2c0 	call	22b2c <memcpy>

	pokemon cyndaquil;
	strcpy(cyndaquil.name, "CYNDAQUIL");
   21b68:	e0bfc204 	addi	r2,fp,-248
   21b6c:	00d113b4 	movhi	r3,17486
   21b70:	18d650c4 	addi	r3,r3,22851
   21b74:	10c00015 	stw	r3,0(r2)
   21b78:	00d25574 	movhi	r3,18773
   21b7c:	18d45044 	addi	r3,r3,20801
   21b80:	10c00115 	stw	r3,4(r2)
   21b84:	00c01304 	movi	r3,76
   21b88:	10c0020d 	sth	r3,8(r2)
	static attack moveSet6[4];
	moveSet6[0] = allAttacks[24];
   21b8c:	008000b4 	movhi	r2,2
   21b90:	109eed04 	addi	r2,r2,31668
   21b94:	e0fffe17 	ldw	r3,-8(fp)
   21b98:	1009883a 	mov	r4,r2
   21b9c:	18828804 	addi	r2,r3,2592
   21ba0:	00c01b04 	movi	r3,108
   21ba4:	180d883a 	mov	r6,r3
   21ba8:	100b883a 	mov	r5,r2
   21bac:	0022b2c0 	call	22b2c <memcpy>
	moveSet6[1] = allAttacks[25];
   21bb0:	008000b4 	movhi	r2,2
   21bb4:	109eed04 	addi	r2,r2,31668
   21bb8:	e0fffe17 	ldw	r3,-8(fp)
   21bbc:	10801b04 	addi	r2,r2,108
   21bc0:	18c2a304 	addi	r3,r3,2700
   21bc4:	01001b04 	movi	r4,108
   21bc8:	200d883a 	mov	r6,r4
   21bcc:	180b883a 	mov	r5,r3
   21bd0:	1009883a 	mov	r4,r2
   21bd4:	0022b2c0 	call	22b2c <memcpy>
	moveSet6[2] = allAttacks[26];
   21bd8:	008000b4 	movhi	r2,2
   21bdc:	109eed04 	addi	r2,r2,31668
   21be0:	e0fffe17 	ldw	r3,-8(fp)
   21be4:	10803604 	addi	r2,r2,216
   21be8:	18c2be04 	addi	r3,r3,2808
   21bec:	01001b04 	movi	r4,108
   21bf0:	200d883a 	mov	r6,r4
   21bf4:	180b883a 	mov	r5,r3
   21bf8:	1009883a 	mov	r4,r2
   21bfc:	0022b2c0 	call	22b2c <memcpy>
	moveSet6[3] = allAttacks[27];
   21c00:	008000b4 	movhi	r2,2
   21c04:	109eed04 	addi	r2,r2,31668
   21c08:	e0fffe17 	ldw	r3,-8(fp)
   21c0c:	10805104 	addi	r2,r2,324
   21c10:	18c2d904 	addi	r3,r3,2916
   21c14:	01001b04 	movi	r4,108
   21c18:	200d883a 	mov	r6,r4
   21c1c:	180b883a 	mov	r5,r3
   21c20:	1009883a 	mov	r4,r2
   21c24:	0022b2c0 	call	22b2c <memcpy>
	cyndaquil.attacks = moveSet6;
   21c28:	008000b4 	movhi	r2,2
   21c2c:	109eed04 	addi	r2,r2,31668
   21c30:	e0bfdb15 	stw	r2,-148(fp)
	cyndaquil.hp = 39;
   21c34:	008009c4 	movi	r2,39
   21c38:	e0bfdc15 	stw	r2,-144(fp)
	cyndaquil.atk = 52;
   21c3c:	00800d04 	movi	r2,52
   21c40:	e0bfdd15 	stw	r2,-140(fp)
	cyndaquil.def = 43;
   21c44:	00800ac4 	movi	r2,43
   21c48:	e0bfde15 	stw	r2,-136(fp)
	cyndaquil.numValue = 6;
   21c4c:	00800184 	movi	r2,6
   21c50:	e0bfdf15 	stw	r2,-132(fp)
	allPokemon[cyndaquil.numValue] = cyndaquil;
   21c54:	e0bfdf17 	ldw	r2,-132(fp)
   21c58:	040000b4 	movhi	r16,2
   21c5c:	841be104 	addi	r16,r16,28548
   21c60:	01401e04 	movi	r5,120
   21c64:	1009883a 	mov	r4,r2
   21c68:	0022b040 	call	22b04 <__mulsi3>
   21c6c:	8085883a 	add	r2,r16,r2
   21c70:	1009883a 	mov	r4,r2
   21c74:	e0bfc204 	addi	r2,fp,-248
   21c78:	00c01e04 	movi	r3,120
   21c7c:	180d883a 	mov	r6,r3
   21c80:	100b883a 	mov	r5,r2
   21c84:	0022b2c0 	call	22b2c <memcpy>

	pokemon totodile;
	strcpy(totodile.name, "TOTODILE");
   21c88:	e0bfe004 	addi	r2,fp,-128
   21c8c:	00d3d534 	movhi	r3,20308
   21c90:	18d3d504 	addi	r3,r3,20308
   21c94:	10c00015 	stw	r3,0(r2)
   21c98:	00d15334 	movhi	r3,17740
   21c9c:	18d25104 	addi	r3,r3,18756
   21ca0:	10c00115 	stw	r3,4(r2)
   21ca4:	10000205 	stb	zero,8(r2)
	static attack moveSet7[4];
	moveSet7[0] = allAttacks[28];
   21ca8:	008000b4 	movhi	r2,2
   21cac:	109f5904 	addi	r2,r2,32100
   21cb0:	e0fffe17 	ldw	r3,-8(fp)
   21cb4:	1009883a 	mov	r4,r2
   21cb8:	1882f404 	addi	r2,r3,3024
   21cbc:	00c01b04 	movi	r3,108
   21cc0:	180d883a 	mov	r6,r3
   21cc4:	100b883a 	mov	r5,r2
   21cc8:	0022b2c0 	call	22b2c <memcpy>
	moveSet7[1] = allAttacks[29];
   21ccc:	008000b4 	movhi	r2,2
   21cd0:	109f5904 	addi	r2,r2,32100
   21cd4:	e0fffe17 	ldw	r3,-8(fp)
   21cd8:	10801b04 	addi	r2,r2,108
   21cdc:	18c30f04 	addi	r3,r3,3132
   21ce0:	01001b04 	movi	r4,108
   21ce4:	200d883a 	mov	r6,r4
   21ce8:	180b883a 	mov	r5,r3
   21cec:	1009883a 	mov	r4,r2
   21cf0:	0022b2c0 	call	22b2c <memcpy>
	moveSet7[2] = allAttacks[30];
   21cf4:	008000b4 	movhi	r2,2
   21cf8:	109f5904 	addi	r2,r2,32100
   21cfc:	e0fffe17 	ldw	r3,-8(fp)
   21d00:	10803604 	addi	r2,r2,216
   21d04:	18c32a04 	addi	r3,r3,3240
   21d08:	01001b04 	movi	r4,108
   21d0c:	200d883a 	mov	r6,r4
   21d10:	180b883a 	mov	r5,r3
   21d14:	1009883a 	mov	r4,r2
   21d18:	0022b2c0 	call	22b2c <memcpy>
	moveSet7[3] = allAttacks[31];
   21d1c:	008000b4 	movhi	r2,2
   21d20:	109f5904 	addi	r2,r2,32100
   21d24:	e0fffe17 	ldw	r3,-8(fp)
   21d28:	10805104 	addi	r2,r2,324
   21d2c:	18c34504 	addi	r3,r3,3348
   21d30:	01001b04 	movi	r4,108
   21d34:	200d883a 	mov	r6,r4
   21d38:	180b883a 	mov	r5,r3
   21d3c:	1009883a 	mov	r4,r2
   21d40:	0022b2c0 	call	22b2c <memcpy>
	totodile.attacks = moveSet7;
   21d44:	008000b4 	movhi	r2,2
   21d48:	109f5904 	addi	r2,r2,32100
   21d4c:	e0bff915 	stw	r2,-28(fp)
	totodile.hp = 50;
   21d50:	00800c84 	movi	r2,50
   21d54:	e0bffa15 	stw	r2,-24(fp)
	totodile.atk = 65;
   21d58:	00801044 	movi	r2,65
   21d5c:	e0bffb15 	stw	r2,-20(fp)
	totodile.def = 64;
   21d60:	00801004 	movi	r2,64
   21d64:	e0bffc15 	stw	r2,-16(fp)
	totodile.numValue = 7;
   21d68:	008001c4 	movi	r2,7
   21d6c:	e0bffd15 	stw	r2,-12(fp)
	allPokemon[totodile.numValue] = totodile;
   21d70:	e0bffd17 	ldw	r2,-12(fp)
   21d74:	040000b4 	movhi	r16,2
   21d78:	841be104 	addi	r16,r16,28548
   21d7c:	01401e04 	movi	r5,120
   21d80:	1009883a 	mov	r4,r2
   21d84:	0022b040 	call	22b04 <__mulsi3>
   21d88:	8085883a 	add	r2,r16,r2
   21d8c:	1009883a 	mov	r4,r2
   21d90:	e0bfe004 	addi	r2,fp,-128
   21d94:	00c01e04 	movi	r3,120
   21d98:	180d883a 	mov	r6,r3
   21d9c:	100b883a 	mov	r5,r2
   21da0:	0022b2c0 	call	22b2c <memcpy>

	return allPokemon;
   21da4:	008000b4 	movhi	r2,2
   21da8:	109be104 	addi	r2,r2,28548
}
   21dac:	e6ffff04 	addi	sp,fp,-4
   21db0:	dfc00217 	ldw	ra,8(sp)
   21db4:	df000117 	ldw	fp,4(sp)
   21db8:	dc000017 	ldw	r16,0(sp)
   21dbc:	dec00304 	addi	sp,sp,12
   21dc0:	f800283a 	ret

00021dc4 <getCommand>:

#include "auxillary_functions.h"
#include <ctype.h>
//#include "sys/alt_stdio.h"

int getCommand(player* opponent, player* whoAmI) {
   21dc4:	deffe604 	addi	sp,sp,-104
   21dc8:	dfc01915 	stw	ra,100(sp)
   21dcc:	df001815 	stw	fp,96(sp)
   21dd0:	dc001715 	stw	r16,92(sp)
   21dd4:	df001804 	addi	fp,sp,96
   21dd8:	e13ffd15 	stw	r4,-12(fp)
   21ddc:	e17ffe15 	stw	r5,-8(fp)
	player oppo = *opponent;
   21de0:	e0bffd17 	ldw	r2,-12(fp)
   21de4:	10c00017 	ldw	r3,0(r2)
   21de8:	e0fff315 	stw	r3,-52(fp)
   21dec:	10c00117 	ldw	r3,4(r2)
   21df0:	e0fff415 	stw	r3,-48(fp)
   21df4:	10c00217 	ldw	r3,8(r2)
   21df8:	e0fff515 	stw	r3,-44(fp)
   21dfc:	10c00317 	ldw	r3,12(r2)
   21e00:	e0fff615 	stw	r3,-40(fp)
   21e04:	10800417 	ldw	r2,16(r2)
   21e08:	e0bff715 	stw	r2,-36(fp)
	player me = *whoAmI;
   21e0c:	e0bffe17 	ldw	r2,-8(fp)
   21e10:	10c00017 	ldw	r3,0(r2)
   21e14:	e0fff815 	stw	r3,-32(fp)
   21e18:	10c00117 	ldw	r3,4(r2)
   21e1c:	e0fff915 	stw	r3,-28(fp)
   21e20:	10c00217 	ldw	r3,8(r2)
   21e24:	e0fffa15 	stw	r3,-24(fp)
   21e28:	10c00317 	ldw	r3,12(r2)
   21e2c:	e0fffb15 	stw	r3,-20(fp)
   21e30:	10800417 	ldw	r2,16(r2)
   21e34:	e0bffc15 	stw	r2,-16(fp)

	char* oppoPokemonName = oppo.pokemonParty[oppo.whichPokemon].name;
   21e38:	e43ff317 	ldw	r16,-52(fp)
   21e3c:	e0bff417 	ldw	r2,-48(fp)
   21e40:	01401e04 	movi	r5,120
   21e44:	1009883a 	mov	r4,r2
   21e48:	0022b040 	call	22b04 <__mulsi3>
   21e4c:	8085883a 	add	r2,r16,r2
   21e50:	e0bfe915 	stw	r2,-92(fp)
	char* mePokemonName = me.pokemonParty[me.whichPokemon].name;
   21e54:	e43ff817 	ldw	r16,-32(fp)
   21e58:	e0bff917 	ldw	r2,-28(fp)
   21e5c:	01401e04 	movi	r5,120
   21e60:	1009883a 	mov	r4,r2
   21e64:	0022b040 	call	22b04 <__mulsi3>
   21e68:	8085883a 	add	r2,r16,r2
   21e6c:	e0bfea15 	stw	r2,-88(fp)
	int oppoPokemonHP =
			(oppo.whichPokemon == 0) ? oppo.pokemon1HP : oppo.pokemon2HP;
   21e70:	e0bff417 	ldw	r2,-48(fp)
   21e74:	1000021e 	bne	r2,zero,21e80 <getCommand+0xbc>
   21e78:	e0bff517 	ldw	r2,-44(fp)
   21e7c:	00000106 	br	21e84 <getCommand+0xc0>
   21e80:	e0bff617 	ldw	r2,-40(fp)
	player oppo = *opponent;
	player me = *whoAmI;

	char* oppoPokemonName = oppo.pokemonParty[oppo.whichPokemon].name;
	char* mePokemonName = me.pokemonParty[me.whichPokemon].name;
	int oppoPokemonHP =
   21e84:	e0bfeb15 	stw	r2,-84(fp)
			(oppo.whichPokemon == 0) ? oppo.pokemon1HP : oppo.pokemon2HP;
	int mePokemonHP = (me.whichPokemon == 0) ? me.pokemon1HP : me.pokemon2HP;
   21e88:	e0bff917 	ldw	r2,-28(fp)
   21e8c:	1000021e 	bne	r2,zero,21e98 <getCommand+0xd4>
   21e90:	e0bffa17 	ldw	r2,-24(fp)
   21e94:	00000106 	br	21e9c <getCommand+0xd8>
   21e98:	e0bffb17 	ldw	r2,-20(fp)
   21e9c:	e0bfec15 	stw	r2,-80(fp)
	char* attack1 = me.pokemonParty[me.whichPokemon].attacks[0].name;
   21ea0:	e43ff817 	ldw	r16,-32(fp)
   21ea4:	e0bff917 	ldw	r2,-28(fp)
   21ea8:	01401e04 	movi	r5,120
   21eac:	1009883a 	mov	r4,r2
   21eb0:	0022b040 	call	22b04 <__mulsi3>
   21eb4:	8085883a 	add	r2,r16,r2
   21eb8:	10801917 	ldw	r2,100(r2)
   21ebc:	e0bfed15 	stw	r2,-76(fp)
	char* attack2 = me.pokemonParty[me.whichPokemon].attacks[1].name;
   21ec0:	e43ff817 	ldw	r16,-32(fp)
   21ec4:	e0bff917 	ldw	r2,-28(fp)
   21ec8:	01401e04 	movi	r5,120
   21ecc:	1009883a 	mov	r4,r2
   21ed0:	0022b040 	call	22b04 <__mulsi3>
   21ed4:	8085883a 	add	r2,r16,r2
   21ed8:	10801917 	ldw	r2,100(r2)
   21edc:	10801b04 	addi	r2,r2,108
   21ee0:	e0bfee15 	stw	r2,-72(fp)
	char* attack3 = me.pokemonParty[me.whichPokemon].attacks[2].name;
   21ee4:	e43ff817 	ldw	r16,-32(fp)
   21ee8:	e0bff917 	ldw	r2,-28(fp)
   21eec:	01401e04 	movi	r5,120
   21ef0:	1009883a 	mov	r4,r2
   21ef4:	0022b040 	call	22b04 <__mulsi3>
   21ef8:	8085883a 	add	r2,r16,r2
   21efc:	10801917 	ldw	r2,100(r2)
   21f00:	10803604 	addi	r2,r2,216
   21f04:	e0bfef15 	stw	r2,-68(fp)
	char* attack4 = me.pokemonParty[me.whichPokemon].attacks[3].name;
   21f08:	e43ff817 	ldw	r16,-32(fp)
   21f0c:	e0bff917 	ldw	r2,-28(fp)
   21f10:	01401e04 	movi	r5,120
   21f14:	1009883a 	mov	r4,r2
   21f18:	0022b040 	call	22b04 <__mulsi3>
   21f1c:	8085883a 	add	r2,r16,r2
   21f20:	10801917 	ldw	r2,100(r2)
   21f24:	10805104 	addi	r2,r2,324
   21f28:	e0bff015 	stw	r2,-64(fp)

	bool validAnswer;
	validAnswer = false;
   21f2c:	e03ff115 	stw	zero,-60(fp)

	while (!validAnswer) {
   21f30:	e0bff117 	ldw	r2,-60(fp)
   21f34:	10004c1e 	bne	r2,zero,22068 <getCommand+0x2a4>
		printf("Opponent Pokemon: %s, HP: %d\n", oppoPokemonName,
   21f38:	e1bfeb17 	ldw	r6,-84(fp)
   21f3c:	e17fe917 	ldw	r5,-92(fp)
   21f40:	010000b4 	movhi	r4,2
   21f44:	2112fc04 	addi	r4,r4,19440
   21f48:	0022b900 	call	22b90 <printf>
				oppoPokemonHP); // Will print entire string or just one char?
		printf("Own Pokemon: %s, HP: %d\n", mePokemonName, mePokemonHP); // Will print entire string or just one char?
   21f4c:	e1bfec17 	ldw	r6,-80(fp)
   21f50:	e17fea17 	ldw	r5,-88(fp)
   21f54:	010000b4 	movhi	r4,2
   21f58:	21130404 	addi	r4,r4,19472
   21f5c:	0022b900 	call	22b90 <printf>
		printf("Switch: (0)\n");
   21f60:	010000b4 	movhi	r4,2
   21f64:	21130b04 	addi	r4,r4,19500
   21f68:	0022c800 	call	22c80 <puts>
		printf("Attack: \n %s (1) %s (2) \n %s (3) %s (4)\n", attack1, attack2,
   21f6c:	e0bff017 	ldw	r2,-64(fp)
   21f70:	d8800015 	stw	r2,0(sp)
   21f74:	e1ffef17 	ldw	r7,-68(fp)
   21f78:	e1bfee17 	ldw	r6,-72(fp)
   21f7c:	e17fed17 	ldw	r5,-76(fp)
   21f80:	010000b4 	movhi	r4,2
   21f84:	21130e04 	addi	r4,r4,19512
   21f88:	0022b900 	call	22b90 <printf>

		int command;
		redoCommand:

		do
			command = alt_getchar();
   21f8c:	00236440 	call	23644 <alt_getchar>
   21f90:	e0bff215 	stw	r2,-56(fp)
		while (isspace(command));
   21f94:	d0e00017 	ldw	r3,-32768(gp)
   21f98:	e0bff217 	ldw	r2,-56(fp)
   21f9c:	10800044 	addi	r2,r2,1
   21fa0:	1885883a 	add	r2,r3,r2
   21fa4:	10800003 	ldbu	r2,0(r2)
   21fa8:	10803fcc 	andi	r2,r2,255
   21fac:	1080020c 	andi	r2,r2,8
   21fb0:	103ff61e 	bne	r2,zero,21f8c <__alt_data_end+0xfffedf8c>
		command -= '0';
   21fb4:	e0bff217 	ldw	r2,-56(fp)
   21fb8:	10bff404 	addi	r2,r2,-48
   21fbc:	e0bff215 	stw	r2,-56(fp)

		if (command < 0 || command > 4) {
   21fc0:	e0bff217 	ldw	r2,-56(fp)
   21fc4:	10000316 	blt	r2,zero,21fd4 <getCommand+0x210>
   21fc8:	e0bff217 	ldw	r2,-56(fp)
   21fcc:	10800150 	cmplti	r2,r2,5
   21fd0:	1000041e 	bne	r2,zero,21fe4 <getCommand+0x220>
			printf("Please enter a valid command!\n");
   21fd4:	010000b4 	movhi	r4,2
   21fd8:	21131904 	addi	r4,r4,19556
   21fdc:	0022c800 	call	22c80 <puts>
			goto redoCommand;
   21fe0:	003fea06 	br	21f8c <__alt_data_end+0xfffedf8c>
		}

		if (command == 0 && (me.whichPokemon == 0 && me.pokemon2HP <= 0
   21fe4:	e0bff217 	ldw	r2,-56(fp)
   21fe8:	10001d1e 	bne	r2,zero,22060 <getCommand+0x29c>
   21fec:	e0bff917 	ldw	r2,-28(fp)
   21ff0:	1000021e 	bne	r2,zero,21ffc <getCommand+0x238>
   21ff4:	e0bffb17 	ldw	r2,-20(fp)
   21ff8:	0080050e 	bge	zero,r2,22010 <getCommand+0x24c>
				|| me.whichPokemon == 1 && me.pokemon1HP <= 0)) {
   21ffc:	e0bff917 	ldw	r2,-28(fp)
   22000:	10800058 	cmpnei	r2,r2,1
   22004:	1000161e 	bne	r2,zero,22060 <getCommand+0x29c>
   22008:	e0bffa17 	ldw	r2,-24(fp)
   2200c:	00801416 	blt	zero,r2,22060 <getCommand+0x29c>
			printf("%s already fainted. Unable to battle!\n",
					me.pokemonParty[(me.whichPokemon + 1) % 2].name);
   22010:	e43ff817 	ldw	r16,-32(fp)
   22014:	e0bff917 	ldw	r2,-28(fp)
   22018:	10c00044 	addi	r3,r2,1
   2201c:	00a00034 	movhi	r2,32768
   22020:	10800044 	addi	r2,r2,1
   22024:	1884703a 	and	r2,r3,r2
   22028:	1000040e 	bge	r2,zero,2203c <getCommand+0x278>
   2202c:	10bfffc4 	addi	r2,r2,-1
   22030:	00ffff84 	movi	r3,-2
   22034:	10c4b03a 	or	r2,r2,r3
   22038:	10800044 	addi	r2,r2,1
   2203c:	01401e04 	movi	r5,120
   22040:	1009883a 	mov	r4,r2
   22044:	0022b040 	call	22b04 <__mulsi3>
   22048:	8085883a 	add	r2,r16,r2
			goto redoCommand;
		}

		if (command == 0 && (me.whichPokemon == 0 && me.pokemon2HP <= 0
				|| me.whichPokemon == 1 && me.pokemon1HP <= 0)) {
			printf("%s already fainted. Unable to battle!\n",
   2204c:	100b883a 	mov	r5,r2
   22050:	010000b4 	movhi	r4,2
   22054:	21132104 	addi	r4,r4,19588
   22058:	0022b900 	call	22b90 <printf>
					me.pokemonParty[(me.whichPokemon + 1) % 2].name);
			goto redoCommand;
   2205c:	003fcb06 	br	21f8c <__alt_data_end+0xfffedf8c>
		}
		return command;
   22060:	e0bff217 	ldw	r2,-56(fp)
   22064:	00000006 	br	22068 <getCommand+0x2a4>
	}
}
   22068:	e6ffff04 	addi	sp,fp,-4
   2206c:	dfc00217 	ldw	ra,8(sp)
   22070:	df000117 	ldw	fp,4(sp)
   22074:	dc000017 	ldw	r16,0(sp)
   22078:	dec00304 	addi	sp,sp,12
   2207c:	f800283a 	ret

00022080 <processCommand>:

int processCommand(player* opponent, player* whoAmI, int usrCommand) {
   22080:	defffa04 	addi	sp,sp,-24
   22084:	dfc00515 	stw	ra,20(sp)
   22088:	df000415 	stw	fp,16(sp)
   2208c:	df000404 	addi	fp,sp,16
   22090:	e13ffd15 	stw	r4,-12(fp)
   22094:	e17ffe15 	stw	r5,-8(fp)
   22098:	e1bfff15 	stw	r6,-4(fp)
	if (usrCommand == 0) {
   2209c:	e0bfff17 	ldw	r2,-4(fp)
   220a0:	1000041e 	bne	r2,zero,220b4 <processCommand+0x34>
		switchPokemon(whoAmI);
   220a4:	e13ffe17 	ldw	r4,-8(fp)
   220a8:	00220ec0 	call	220ec <switchPokemon>
		return 0;
   220ac:	0005883a 	mov	r2,zero
   220b0:	00000906 	br	220d8 <processCommand+0x58>
	} else {
		int damage = calculateDamage(opponent, whoAmI, usrCommand);
   220b4:	e1bfff17 	ldw	r6,-4(fp)
   220b8:	e17ffe17 	ldw	r5,-8(fp)
   220bc:	e13ffd17 	ldw	r4,-12(fp)
   220c0:	00221740 	call	22174 <calculateDamage>
   220c4:	e0bffc15 	stw	r2,-16(fp)
		updateHP(opponent, damage);
   220c8:	e17ffc17 	ldw	r5,-16(fp)
   220cc:	e13ffd17 	ldw	r4,-12(fp)
   220d0:	00223340 	call	22334 <updateHP>
		return damage;
   220d4:	e0bffc17 	ldw	r2,-16(fp)
	}
}
   220d8:	e037883a 	mov	sp,fp
   220dc:	dfc00117 	ldw	ra,4(sp)
   220e0:	df000017 	ldw	fp,0(sp)
   220e4:	dec00204 	addi	sp,sp,8
   220e8:	f800283a 	ret

000220ec <switchPokemon>:

void switchPokemon(player* whoAmI) {
   220ec:	defffc04 	addi	sp,sp,-16
   220f0:	dfc00315 	stw	ra,12(sp)
   220f4:	df000215 	stw	fp,8(sp)
   220f8:	dc000115 	stw	r16,4(sp)
   220fc:	df000204 	addi	fp,sp,8
   22100:	e13ffe15 	stw	r4,-8(fp)
	if (whoAmI->whichPokemon == 0) {
   22104:	e0bffe17 	ldw	r2,-8(fp)
   22108:	10800117 	ldw	r2,4(r2)
   2210c:	1000041e 	bne	r2,zero,22120 <switchPokemon+0x34>
		whoAmI->whichPokemon = 1;
   22110:	e0bffe17 	ldw	r2,-8(fp)
   22114:	00c00044 	movi	r3,1
   22118:	10c00115 	stw	r3,4(r2)
   2211c:	00000206 	br	22128 <switchPokemon+0x3c>
	} else {
		whoAmI->whichPokemon = 0;
   22120:	e0bffe17 	ldw	r2,-8(fp)
   22124:	10000115 	stw	zero,4(r2)
	}
	printf("Switch to Pokemon: %s\n", whoAmI->pokemonParty[whoAmI->whichPokemon].name);
   22128:	e0bffe17 	ldw	r2,-8(fp)
   2212c:	14000017 	ldw	r16,0(r2)
   22130:	e0bffe17 	ldw	r2,-8(fp)
   22134:	10800117 	ldw	r2,4(r2)
   22138:	01401e04 	movi	r5,120
   2213c:	1009883a 	mov	r4,r2
   22140:	0022b040 	call	22b04 <__mulsi3>
   22144:	8085883a 	add	r2,r16,r2
   22148:	100b883a 	mov	r5,r2
   2214c:	010000b4 	movhi	r4,2
   22150:	21132b04 	addi	r4,r4,19628
   22154:	0022b900 	call	22b90 <printf>
}
   22158:	0001883a 	nop
   2215c:	e6ffff04 	addi	sp,fp,-4
   22160:	dfc00217 	ldw	ra,8(sp)
   22164:	df000117 	ldw	fp,4(sp)
   22168:	dc000017 	ldw	r16,0(sp)
   2216c:	dec00304 	addi	sp,sp,12
   22170:	f800283a 	ret

00022174 <calculateDamage>:

int calculateDamage(player* opponent, player* whoAmI, int usrCommand) {
   22174:	deffe904 	addi	sp,sp,-92
   22178:	dfc01615 	stw	ra,88(sp)
   2217c:	df001515 	stw	fp,84(sp)
   22180:	dc801415 	stw	r18,80(sp)
   22184:	dc401315 	stw	r17,76(sp)
   22188:	dc001215 	stw	r16,72(sp)
   2218c:	df001504 	addi	fp,sp,84
   22190:	e13ffa15 	stw	r4,-24(fp)
   22194:	e17ffb15 	stw	r5,-20(fp)
   22198:	e1bffc15 	stw	r6,-16(fp)
	player oppo = *opponent;
   2219c:	e0bffa17 	ldw	r2,-24(fp)
   221a0:	10c00017 	ldw	r3,0(r2)
   221a4:	e0fff015 	stw	r3,-64(fp)
   221a8:	10c00117 	ldw	r3,4(r2)
   221ac:	e0fff115 	stw	r3,-60(fp)
   221b0:	10c00217 	ldw	r3,8(r2)
   221b4:	e0fff215 	stw	r3,-56(fp)
   221b8:	10c00317 	ldw	r3,12(r2)
   221bc:	e0fff315 	stw	r3,-52(fp)
   221c0:	10800417 	ldw	r2,16(r2)
   221c4:	e0bff415 	stw	r2,-48(fp)
	player me = *whoAmI;
   221c8:	e0bffb17 	ldw	r2,-20(fp)
   221cc:	10c00017 	ldw	r3,0(r2)
   221d0:	e0fff515 	stw	r3,-44(fp)
   221d4:	10c00117 	ldw	r3,4(r2)
   221d8:	e0fff615 	stw	r3,-40(fp)
   221dc:	10c00217 	ldw	r3,8(r2)
   221e0:	e0fff715 	stw	r3,-36(fp)
   221e4:	10c00317 	ldw	r3,12(r2)
   221e8:	e0fff815 	stw	r3,-32(fp)
   221ec:	10800417 	ldw	r2,16(r2)
   221f0:	e0bff915 	stw	r2,-28(fp)
	int atkIndex = usrCommand - 1;
   221f4:	e0bffc17 	ldw	r2,-16(fp)
   221f8:	10bfffc4 	addi	r2,r2,-1
   221fc:	e0bfed15 	stw	r2,-76(fp)
	int atkStat = me.pokemonParty[me.whichPokemon].attacks[atkIndex].power;
   22200:	e43ff517 	ldw	r16,-44(fp)
   22204:	e0bff617 	ldw	r2,-40(fp)
   22208:	01401e04 	movi	r5,120
   2220c:	1009883a 	mov	r4,r2
   22210:	0022b040 	call	22b04 <__mulsi3>
   22214:	8085883a 	add	r2,r16,r2
   22218:	14001917 	ldw	r16,100(r2)
   2221c:	e0bfed17 	ldw	r2,-76(fp)
   22220:	01401b04 	movi	r5,108
   22224:	1009883a 	mov	r4,r2
   22228:	0022b040 	call	22b04 <__mulsi3>
   2222c:	8085883a 	add	r2,r16,r2
   22230:	10801917 	ldw	r2,100(r2)
   22234:	e0bfee15 	stw	r2,-72(fp)
	int defStat = oppo.pokemonParty[oppo.whichPokemon].def;
   22238:	e43ff017 	ldw	r16,-64(fp)
   2223c:	e0bff117 	ldw	r2,-60(fp)
   22240:	01401e04 	movi	r5,120
   22244:	1009883a 	mov	r4,r2
   22248:	0022b040 	call	22b04 <__mulsi3>
   2224c:	8085883a 	add	r2,r16,r2
   22250:	10801c17 	ldw	r2,112(r2)
   22254:	e0bfef15 	stw	r2,-68(fp)
	int damage;
	damage = (int) (atkStat - defStat / 10);
   22258:	e0bfef17 	ldw	r2,-68(fp)
   2225c:	01400284 	movi	r5,10
   22260:	1009883a 	mov	r4,r2
   22264:	00229500 	call	22950 <__divsi3>
   22268:	1007883a 	mov	r3,r2
   2226c:	e0bfee17 	ldw	r2,-72(fp)
   22270:	10c5c83a 	sub	r2,r2,r3
   22274:	e0bfec15 	stw	r2,-80(fp)
	if (damage < 0) {
   22278:	e0bfec17 	ldw	r2,-80(fp)
   2227c:	1000010e 	bge	r2,zero,22284 <calculateDamage+0x110>
		damage = 0;
   22280:	e03fec15 	stw	zero,-80(fp)
	}
	printf("%s used %s to %s for %d damage!\n", me.pokemonParty[me.whichPokemon].name, me.pokemonParty[me.whichPokemon].attacks[atkIndex].name, oppo.pokemonParty[oppo.whichPokemon].name, damage);
   22284:	e43ff517 	ldw	r16,-44(fp)
   22288:	e0bff617 	ldw	r2,-40(fp)
   2228c:	01401e04 	movi	r5,120
   22290:	1009883a 	mov	r4,r2
   22294:	0022b040 	call	22b04 <__mulsi3>
   22298:	8085883a 	add	r2,r16,r2
   2229c:	1023883a 	mov	r17,r2
   222a0:	e43ff517 	ldw	r16,-44(fp)
   222a4:	e0bff617 	ldw	r2,-40(fp)
   222a8:	01401e04 	movi	r5,120
   222ac:	1009883a 	mov	r4,r2
   222b0:	0022b040 	call	22b04 <__mulsi3>
   222b4:	8085883a 	add	r2,r16,r2
   222b8:	14001917 	ldw	r16,100(r2)
   222bc:	e0bfed17 	ldw	r2,-76(fp)
   222c0:	01401b04 	movi	r5,108
   222c4:	1009883a 	mov	r4,r2
   222c8:	0022b040 	call	22b04 <__mulsi3>
   222cc:	8085883a 	add	r2,r16,r2
   222d0:	1025883a 	mov	r18,r2
   222d4:	e43ff017 	ldw	r16,-64(fp)
   222d8:	e0bff117 	ldw	r2,-60(fp)
   222dc:	01401e04 	movi	r5,120
   222e0:	1009883a 	mov	r4,r2
   222e4:	0022b040 	call	22b04 <__mulsi3>
   222e8:	8085883a 	add	r2,r16,r2
   222ec:	1007883a 	mov	r3,r2
   222f0:	e0bfec17 	ldw	r2,-80(fp)
   222f4:	d8800015 	stw	r2,0(sp)
   222f8:	180f883a 	mov	r7,r3
   222fc:	900d883a 	mov	r6,r18
   22300:	880b883a 	mov	r5,r17
   22304:	010000b4 	movhi	r4,2
   22308:	21133104 	addi	r4,r4,19652
   2230c:	0022b900 	call	22b90 <printf>
	return damage;
   22310:	e0bfec17 	ldw	r2,-80(fp)
}
   22314:	e6fffd04 	addi	sp,fp,-12
   22318:	dfc00417 	ldw	ra,16(sp)
   2231c:	df000317 	ldw	fp,12(sp)
   22320:	dc800217 	ldw	r18,8(sp)
   22324:	dc400117 	ldw	r17,4(sp)
   22328:	dc000017 	ldw	r16,0(sp)
   2232c:	dec00504 	addi	sp,sp,20
   22330:	f800283a 	ret

00022334 <updateHP>:

void updateHP(player* whoAmI, int damage) {
   22334:	defffc04 	addi	sp,sp,-16
   22338:	dfc00315 	stw	ra,12(sp)
   2233c:	df000215 	stw	fp,8(sp)
   22340:	df000204 	addi	fp,sp,8
   22344:	e13ffe15 	stw	r4,-8(fp)
   22348:	e17fff15 	stw	r5,-4(fp)
	printf("damage in updateHP %d\n", damage);
   2234c:	e17fff17 	ldw	r5,-4(fp)
   22350:	010000b4 	movhi	r4,2
   22354:	21133a04 	addi	r4,r4,19688
   22358:	0022b900 	call	22b90 <printf>
	if (whoAmI->whichPokemon == 1) {
   2235c:	e0bffe17 	ldw	r2,-8(fp)
   22360:	10800117 	ldw	r2,4(r2)
   22364:	10800058 	cmpnei	r2,r2,1
   22368:	10000e1e 	bne	r2,zero,223a4 <updateHP+0x70>
		whoAmI->pokemon2HP -= damage;
   2236c:	e0bffe17 	ldw	r2,-8(fp)
   22370:	10c00317 	ldw	r3,12(r2)
   22374:	e0bfff17 	ldw	r2,-4(fp)
   22378:	1887c83a 	sub	r3,r3,r2
   2237c:	e0bffe17 	ldw	r2,-8(fp)
   22380:	10c00315 	stw	r3,12(r2)
		if (whoAmI->pokemon2HP < 0) {
   22384:	e0bffe17 	ldw	r2,-8(fp)
   22388:	10800317 	ldw	r2,12(r2)
   2238c:	1000120e 	bge	r2,zero,223d8 <updateHP+0xa4>
			whoAmI->pokemon2HP = 0;
   22390:	e0bffe17 	ldw	r2,-8(fp)
   22394:	10000315 	stw	zero,12(r2)
			switchPokemon(whoAmI);
   22398:	e13ffe17 	ldw	r4,-8(fp)
   2239c:	00220ec0 	call	220ec <switchPokemon>
		if (whoAmI->pokemon1HP < 0) {
			whoAmI->pokemon1HP = 0;
			switchPokemon(whoAmI);
		}
	}
}
   223a0:	00000d06 	br	223d8 <updateHP+0xa4>
		if (whoAmI->pokemon2HP < 0) {
			whoAmI->pokemon2HP = 0;
			switchPokemon(whoAmI);
		}
	} else {
		whoAmI->pokemon1HP -= damage;
   223a4:	e0bffe17 	ldw	r2,-8(fp)
   223a8:	10c00217 	ldw	r3,8(r2)
   223ac:	e0bfff17 	ldw	r2,-4(fp)
   223b0:	1887c83a 	sub	r3,r3,r2
   223b4:	e0bffe17 	ldw	r2,-8(fp)
   223b8:	10c00215 	stw	r3,8(r2)
		if (whoAmI->pokemon1HP < 0) {
   223bc:	e0bffe17 	ldw	r2,-8(fp)
   223c0:	10800217 	ldw	r2,8(r2)
   223c4:	1000040e 	bge	r2,zero,223d8 <updateHP+0xa4>
			whoAmI->pokemon1HP = 0;
   223c8:	e0bffe17 	ldw	r2,-8(fp)
   223cc:	10000215 	stw	zero,8(r2)
			switchPokemon(whoAmI);
   223d0:	e13ffe17 	ldw	r4,-8(fp)
   223d4:	00220ec0 	call	220ec <switchPokemon>
		}
	}
}
   223d8:	0001883a 	nop
   223dc:	e037883a 	mov	sp,fp
   223e0:	dfc00117 	ldw	ra,4(sp)
   223e4:	df000017 	ldw	fp,0(sp)
   223e8:	dec00204 	addi	sp,sp,8
   223ec:	f800283a 	ret

000223f0 <processInformation>:

void processInformation(player* opponent, player* whoAmI,
		int opponentInformation) {
   223f0:	defffb04 	addi	sp,sp,-20
   223f4:	dfc00415 	stw	ra,16(sp)
   223f8:	df000315 	stw	fp,12(sp)
   223fc:	df000304 	addi	fp,sp,12
   22400:	e13ffd15 	stw	r4,-12(fp)
   22404:	e17ffe15 	stw	r5,-8(fp)
   22408:	e1bfff15 	stw	r6,-4(fp)
	if (opponentInformation == 0) {
   2240c:	e0bfff17 	ldw	r2,-4(fp)
   22410:	1000031e 	bne	r2,zero,22420 <processInformation+0x30>
		switchPokemon(opponent);
   22414:	e13ffd17 	ldw	r4,-12(fp)
   22418:	00220ec0 	call	220ec <switchPokemon>
	} else {
		updateHP(whoAmI, opponentInformation);
	}
}
   2241c:	00000306 	br	2242c <processInformation+0x3c>
void processInformation(player* opponent, player* whoAmI,
		int opponentInformation) {
	if (opponentInformation == 0) {
		switchPokemon(opponent);
	} else {
		updateHP(whoAmI, opponentInformation);
   22420:	e17fff17 	ldw	r5,-4(fp)
   22424:	e13ffe17 	ldw	r4,-8(fp)
   22428:	00223340 	call	22334 <updateHP>
	}
}
   2242c:	0001883a 	nop
   22430:	e037883a 	mov	sp,fp
   22434:	dfc00117 	ldw	ra,4(sp)
   22438:	df000017 	ldw	fp,0(sp)
   2243c:	dec00204 	addi	sp,sp,8
   22440:	f800283a 	ret

00022444 <checkGameOver>:

bool checkGameOver(player* whoAmI) {
   22444:	defff604 	addi	sp,sp,-40
   22448:	df000915 	stw	fp,36(sp)
   2244c:	df000904 	addi	fp,sp,36
   22450:	e13fff15 	stw	r4,-4(fp)
	player thePlayer = *whoAmI;
   22454:	e0bfff17 	ldw	r2,-4(fp)
   22458:	10c00017 	ldw	r3,0(r2)
   2245c:	e0fffa15 	stw	r3,-24(fp)
   22460:	10c00117 	ldw	r3,4(r2)
   22464:	e0fffb15 	stw	r3,-20(fp)
   22468:	10c00217 	ldw	r3,8(r2)
   2246c:	e0fffc15 	stw	r3,-16(fp)
   22470:	10c00317 	ldw	r3,12(r2)
   22474:	e0fffd15 	stw	r3,-12(fp)
   22478:	10800417 	ldw	r2,16(r2)
   2247c:	e0bffe15 	stw	r2,-8(fp)
	int pokemon1HP = thePlayer.pokemon1HP;
   22480:	e0bffc17 	ldw	r2,-16(fp)
   22484:	e0bff715 	stw	r2,-36(fp)
	int pokemon2HP = thePlayer.pokemon2HP;
   22488:	e0bffd17 	ldw	r2,-12(fp)
   2248c:	e0bff815 	stw	r2,-32(fp)
	int total = pokemon1HP + pokemon2HP;
   22490:	e0fff717 	ldw	r3,-36(fp)
   22494:	e0bff817 	ldw	r2,-32(fp)
   22498:	1885883a 	add	r2,r3,r2
   2249c:	e0bff915 	stw	r2,-28(fp)
	if (total <= 0) {
   224a0:	e0bff917 	ldw	r2,-28(fp)
   224a4:	00800216 	blt	zero,r2,224b0 <checkGameOver+0x6c>
		return true;
   224a8:	00800044 	movi	r2,1
   224ac:	00000106 	br	224b4 <checkGameOver+0x70>
	} else {
		return false;
   224b0:	0005883a 	mov	r2,zero
	}
}
   224b4:	e037883a 	mov	sp,fp
   224b8:	df000017 	ldw	fp,0(sp)
   224bc:	dec00104 	addi	sp,sp,4
   224c0:	f800283a 	ret

000224c4 <handleGameOver>:

void handleGameOver(bool gameOverForOpponent, bool gameOverForMe) {
   224c4:	defff804 	addi	sp,sp,-32
   224c8:	dfc00715 	stw	ra,28(sp)
   224cc:	df000615 	stw	fp,24(sp)
   224d0:	df000604 	addi	fp,sp,24
   224d4:	e13ffe15 	stw	r4,-8(fp)
   224d8:	e17fff15 	stw	r5,-4(fp)
	int sramAddressWins = 0;
   224dc:	e03ffc15 	stw	zero,-16(fp)
	int sramAddressLosses = 1;
   224e0:	00800044 	movi	r2,1
   224e4:	e0bffd15 	stw	r2,-12(fp)
	int wins = readSRAM(sramAddressWins);
   224e8:	e13ffc17 	ldw	r4,-16(fp)
   224ec:	00225980 	call	22598 <readSRAM>
   224f0:	e0bffa15 	stw	r2,-24(fp)
	int losses = readSRAM(sramAddressLosses);
   224f4:	e13ffd17 	ldw	r4,-12(fp)
   224f8:	00225980 	call	22598 <readSRAM>
   224fc:	e0bffb15 	stw	r2,-20(fp)

	if (gameOverForOpponent) {
   22500:	e0bffe17 	ldw	r2,-8(fp)
   22504:	10000726 	beq	r2,zero,22524 <handleGameOver+0x60>
		wins += 1;
   22508:	e0bffa17 	ldw	r2,-24(fp)
   2250c:	10800044 	addi	r2,r2,1
   22510:	e0bffa15 	stw	r2,-24(fp)
		writeSRAM(sramAddressWins, wins);
   22514:	e17ffa17 	ldw	r5,-24(fp)
   22518:	e13ffc17 	ldw	r4,-16(fp)
   2251c:	00226080 	call	22608 <writeSRAM>
   22520:	00000606 	br	2253c <handleGameOver+0x78>
	} else {
		losses += 1;
   22524:	e0bffb17 	ldw	r2,-20(fp)
   22528:	10800044 	addi	r2,r2,1
   2252c:	e0bffb15 	stw	r2,-20(fp)
		writeSRAM(sramAddressLosses, losses);
   22530:	e17ffb17 	ldw	r5,-20(fp)
   22534:	e13ffd17 	ldw	r4,-12(fp)
   22538:	00226080 	call	22608 <writeSRAM>
	}

	printf("Wins: %d\n", wins);
   2253c:	e17ffa17 	ldw	r5,-24(fp)
   22540:	010000b4 	movhi	r4,2
   22544:	21134004 	addi	r4,r4,19712
   22548:	0022b900 	call	22b90 <printf>
	printf("Losses: %d\n", losses);
   2254c:	e17ffb17 	ldw	r5,-20(fp)
   22550:	010000b4 	movhi	r4,2
   22554:	21134304 	addi	r4,r4,19724
   22558:	0022b900 	call	22b90 <printf>
	if (gameOverForOpponent) {
   2255c:	e0bffe17 	ldw	r2,-8(fp)
   22560:	10000426 	beq	r2,zero,22574 <handleGameOver+0xb0>
		printf("\n\n\n\nPlayer won.\n\n\n\n\n");
   22564:	010000b4 	movhi	r4,2
   22568:	21134604 	addi	r4,r4,19736
   2256c:	0022c800 	call	22c80 <puts>

	} else {
		printf("\n\n\n\n\nOpponent won.\n\n\n\n\n");
	}
}
   22570:	00000306 	br	22580 <handleGameOver+0xbc>
	printf("Losses: %d\n", losses);
	if (gameOverForOpponent) {
		printf("\n\n\n\nPlayer won.\n\n\n\n\n");

	} else {
		printf("\n\n\n\n\nOpponent won.\n\n\n\n\n");
   22574:	010000b4 	movhi	r4,2
   22578:	21134b04 	addi	r4,r4,19756
   2257c:	0022c800 	call	22c80 <puts>
	}
}
   22580:	0001883a 	nop
   22584:	e037883a 	mov	sp,fp
   22588:	dfc00117 	ldw	ra,4(sp)
   2258c:	df000017 	ldw	fp,0(sp)
   22590:	dec00204 	addi	sp,sp,8
   22594:	f800283a 	ret

00022598 <readSRAM>:


//Will vary among groups depending on SRAM is connected.
int readSRAM(int sramAddress) {
   22598:	defffd04 	addi	sp,sp,-12
   2259c:	df000215 	stw	fp,8(sp)
   225a0:	df000204 	addi	fp,sp,8
   225a4:	e13fff15 	stw	r4,-4(fp)
  *ramControls = 2;
   225a8:	00800134 	movhi	r2,4
   225ac:	10841404 	addi	r2,r2,4176
   225b0:	00c00084 	movi	r3,2
   225b4:	10c00005 	stb	r3,0(r2)
  *address = sramAddress;
   225b8:	00800134 	movhi	r2,4
   225bc:	10840804 	addi	r2,r2,4128
   225c0:	e0ffff17 	ldw	r3,-4(fp)
   225c4:	10c00005 	stb	r3,0(r2)
  int sramData = *dataIn;
   225c8:	00800134 	movhi	r2,4
   225cc:	10841004 	addi	r2,r2,4160
   225d0:	10800003 	ldbu	r2,0(r2)
   225d4:	10803fcc 	andi	r2,r2,255
   225d8:	1080201c 	xori	r2,r2,128
   225dc:	10bfe004 	addi	r2,r2,-128
   225e0:	e0bffe15 	stw	r2,-8(fp)
  *ramControls = 1;
   225e4:	00800134 	movhi	r2,4
   225e8:	10841404 	addi	r2,r2,4176
   225ec:	00c00044 	movi	r3,1
   225f0:	10c00005 	stb	r3,0(r2)
  return sramData;
   225f4:	e0bffe17 	ldw	r2,-8(fp)
}
   225f8:	e037883a 	mov	sp,fp
   225fc:	df000017 	ldw	fp,0(sp)
   22600:	dec00104 	addi	sp,sp,4
   22604:	f800283a 	ret

00022608 <writeSRAM>:

// Will vary among groups depending on SRAM is connected.
void writeSRAM(int sramAddress, int sramData) {
   22608:	defffd04 	addi	sp,sp,-12
   2260c:	df000215 	stw	fp,8(sp)
   22610:	df000204 	addi	fp,sp,8
   22614:	e13ffe15 	stw	r4,-8(fp)
   22618:	e17fff15 	stw	r5,-4(fp)
  *ramControls = 4;
   2261c:	00800134 	movhi	r2,4
   22620:	10841404 	addi	r2,r2,4176
   22624:	00c00104 	movi	r3,4
   22628:	10c00005 	stb	r3,0(r2)
  *dataOut = sramData;
   2262c:	00800134 	movhi	r2,4
   22630:	10840c04 	addi	r2,r2,4144
   22634:	e0ffff17 	ldw	r3,-4(fp)
   22638:	10c00005 	stb	r3,0(r2)
  *ramControls = 1;
   2263c:	00800134 	movhi	r2,4
   22640:	10841404 	addi	r2,r2,4176
   22644:	00c00044 	movi	r3,1
   22648:	10c00005 	stb	r3,0(r2)
}
   2264c:	0001883a 	nop
   22650:	e037883a 	mov	sp,fp
   22654:	df000017 	ldw	fp,0(sp)
   22658:	dec00104 	addi	sp,sp,4
   2265c:	f800283a 	ret

00022660 <printPokemon>:
// #include <altera_avalon_pio_regs.h> // Uncomment later. Caused compiliation errors.
#include "game_structs.h"
#include "auxillary_functions.h"
/* Import any additional necessary libraries here. */

void printPokemon(pokemon * poke) {
   22660:	defffe04 	addi	sp,sp,-8
   22664:	df000115 	stw	fp,4(sp)
   22668:	df000104 	addi	fp,sp,4
   2266c:	e13fff15 	stw	r4,-4(fp)
//  char * name = poke->name;
//  printf("pokemon name: %s\n", name);

} 
   22670:	0001883a 	nop
   22674:	e037883a 	mov	sp,fp
   22678:	df000017 	ldw	fp,0(sp)
   2267c:	dec00104 	addi	sp,sp,4
   22680:	f800283a 	ret

00022684 <printPlayer>:

void printPlayer(player * player) {
   22684:	defffd04 	addi	sp,sp,-12
   22688:	dfc00215 	stw	ra,8(sp)
   2268c:	df000115 	stw	fp,4(sp)
   22690:	df000104 	addi	fp,sp,4
   22694:	e13fff15 	stw	r4,-4(fp)
  printPokemon(&(player->pokemonParty[0]));
   22698:	e0bfff17 	ldw	r2,-4(fp)
   2269c:	10800017 	ldw	r2,0(r2)
   226a0:	1009883a 	mov	r4,r2
   226a4:	00226600 	call	22660 <printPokemon>
  printf("pokemon hp: %d\n", player->pokemon1HP);
   226a8:	e0bfff17 	ldw	r2,-4(fp)
   226ac:	10800217 	ldw	r2,8(r2)
   226b0:	100b883a 	mov	r5,r2
   226b4:	010000b4 	movhi	r4,2
   226b8:	21135104 	addi	r4,r4,19780
   226bc:	0022b900 	call	22b90 <printf>
  printPokemon(&(player->pokemonParty[1]));
   226c0:	e0bfff17 	ldw	r2,-4(fp)
   226c4:	10800017 	ldw	r2,0(r2)
   226c8:	10801e04 	addi	r2,r2,120
   226cc:	1009883a 	mov	r4,r2
   226d0:	00226600 	call	22660 <printPokemon>
  printf("pokemon hp: %d\n", player->pokemon2HP);
   226d4:	e0bfff17 	ldw	r2,-4(fp)
   226d8:	10800317 	ldw	r2,12(r2)
   226dc:	100b883a 	mov	r5,r2
   226e0:	010000b4 	movhi	r4,2
   226e4:	21135104 	addi	r4,r4,19780
   226e8:	0022b900 	call	22b90 <printf>
  printf("which pokemon: %d\n", player->whichPokemon);
   226ec:	e0bfff17 	ldw	r2,-4(fp)
   226f0:	10800117 	ldw	r2,4(r2)
   226f4:	100b883a 	mov	r5,r2
   226f8:	010000b4 	movhi	r4,2
   226fc:	21135504 	addi	r4,r4,19796
   22700:	0022b900 	call	22b90 <printf>
}
   22704:	0001883a 	nop
   22708:	e037883a 	mov	sp,fp
   2270c:	dfc00117 	ldw	ra,4(sp)
   22710:	df000017 	ldw	fp,0(sp)
   22714:	dec00204 	addi	sp,sp,8
   22718:	f800283a 	ret

0002271c <main>:




int main() {
   2271c:	deffe804 	addi	sp,sp,-96
   22720:	dfc01715 	stw	ra,92(sp)
   22724:	df001615 	stw	fp,88(sp)
   22728:	df001604 	addi	fp,sp,88
  attack* allAttacks = defineAttacks();
   2272c:	00205700 	call	20570 <defineAttacks>
   22730:	e0bfee15 	stw	r2,-72(fp)
  pokemon* allPokemon = definePokemon(allAttacks);
   22734:	e13fee17 	ldw	r4,-72(fp)
   22738:	00214ac0 	call	214ac <definePokemon>
   2273c:	e0bfef15 	stw	r2,-68(fp)
  *LOAD = 0;
   22740:	00800134 	movhi	r2,4
   22744:	10842004 	addi	r2,r2,4224
   22748:	10000005 	stb	zero,0(r2)
  *TRANSMIT = 0;
   2274c:	00800134 	movhi	r2,4
   22750:	10842404 	addi	r2,r2,4240
   22754:	10000005 	stb	zero,0(r2)


  while (1) {
    player me;
  	player* whoAmI = &me;
   22758:	e0bff604 	addi	r2,fp,-40
   2275c:	e0bff015 	stw	r2,-64(fp)
  	srand(time(NULL));
   22760:	0009883a 	mov	r4,zero
   22764:	0022d240 	call	22d24 <time>
   22768:	1009883a 	mov	r4,r2
   2276c:	0022c940 	call	22c94 <srand>
    int ran1 = rand() % 8;
   22770:	0022ca80 	call	22ca8 <rand>
   22774:	1007883a 	mov	r3,r2
   22778:	00a00034 	movhi	r2,32768
   2277c:	108001c4 	addi	r2,r2,7
   22780:	1884703a 	and	r2,r3,r2
   22784:	1000040e 	bge	r2,zero,22798 <main+0x7c>
   22788:	10bfffc4 	addi	r2,r2,-1
   2278c:	00fffe04 	movi	r3,-8
   22790:	10c4b03a 	or	r2,r2,r3
   22794:	10800044 	addi	r2,r2,1
   22798:	e0bff115 	stw	r2,-60(fp)
    int ran2 = rand() % 8;
   2279c:	0022ca80 	call	22ca8 <rand>
   227a0:	1007883a 	mov	r3,r2
   227a4:	00a00034 	movhi	r2,32768
   227a8:	108001c4 	addi	r2,r2,7
   227ac:	1884703a 	and	r2,r3,r2
   227b0:	1000040e 	bge	r2,zero,227c4 <main+0xa8>
   227b4:	10bfffc4 	addi	r2,r2,-1
   227b8:	00fffe04 	movi	r3,-8
   227bc:	10c4b03a 	or	r2,r2,r3
   227c0:	10800044 	addi	r2,r2,1
   227c4:	e0bff215 	stw	r2,-56(fp)
    printf("ran1 %d, rand2 %d\n", ran1, ran2);
   227c8:	e1bff217 	ldw	r6,-56(fp)
   227cc:	e17ff117 	ldw	r5,-60(fp)
   227d0:	010000b4 	movhi	r4,2
   227d4:	21135a04 	addi	r4,r4,19816
   227d8:	0022b900 	call	22b90 <printf>
    // Maybe add function to check connection?

    player oppo;
    player* opponent = & oppo;
   227dc:	e0bffb04 	addi	r2,fp,-20
   227e0:	e0bff315 	stw	r2,-52(fp)
    receiveInfoFromOpponent(opponent, allPokemon);
   227e4:	e17fef17 	ldw	r5,-68(fp)
   227e8:	e13ff317 	ldw	r4,-52(fp)
   227ec:	00203d40 	call	203d4 <receiveInfoFromOpponent>
    printPlayer(opponent);
   227f0:	e13ff317 	ldw	r4,-52(fp)
   227f4:	00226840 	call	22684 <printPlayer>

  	definePlayerMe(whoAmI, allPokemon, ran1, ran2);
   227f8:	e1fff217 	ldw	r7,-56(fp)
   227fc:	e1bff117 	ldw	r6,-60(fp)
   22800:	e17fef17 	ldw	r5,-68(fp)
   22804:	e13ff017 	ldw	r4,-64(fp)
   22808:	002127c0 	call	2127c <definePlayerMe>
    printPlayer(whoAmI);
   2280c:	e13ff017 	ldw	r4,-64(fp)
   22810:	00226840 	call	22684 <printPlayer>
    sendInfoToOpponent(whoAmI);
   22814:	e13ff017 	ldw	r4,-64(fp)
   22818:	00203380 	call	20338 <sendInfoToOpponent>

  	bool myTurn = rockPaperScissor();
   2281c:	00204580 	call	20458 <rockPaperScissor>
   22820:	e0bfea15 	stw	r2,-88(fp)
  	printf("myTurn: %d\n", myTurn);
   22824:	e17fea17 	ldw	r5,-88(fp)
   22828:	010000b4 	movhi	r4,2
   2282c:	21135f04 	addi	r4,r4,19836
   22830:	0022b900 	call	22b90 <printf>

    bool gameOverForOpponent = false;
   22834:	e03feb15 	stw	zero,-84(fp)
    bool gameOverForMe = false;
   22838:	e03fec15 	stw	zero,-80(fp)

    int round = 1;
   2283c:	00800044 	movi	r2,1
   22840:	e0bfed15 	stw	r2,-76(fp)
  	while (!gameOverForOpponent && !gameOverForMe) {
   22844:	00003d06 	br	2293c <main+0x220>
      printf("round %d \n", round);
   22848:	e17fed17 	ldw	r5,-76(fp)
   2284c:	010000b4 	movhi	r4,2
   22850:	21136204 	addi	r4,r4,19848
   22854:	0022b900 	call	22b90 <printf>
      printf("me\n");
   22858:	010000b4 	movhi	r4,2
   2285c:	21136504 	addi	r4,r4,19860
   22860:	0022c800 	call	22c80 <puts>
      printPlayer(whoAmI);
   22864:	e13ff017 	ldw	r4,-64(fp)
   22868:	00226840 	call	22684 <printPlayer>
      printf("oppo\n");
   2286c:	010000b4 	movhi	r4,2
   22870:	21136604 	addi	r4,r4,19864
   22874:	0022c800 	call	22c80 <puts>
      printPlayer(opponent);
   22878:	e13ff317 	ldw	r4,-52(fp)
   2287c:	00226840 	call	22684 <printPlayer>
  		if (myTurn) {
   22880:	e0bfea17 	ldw	r2,-88(fp)
   22884:	10001026 	beq	r2,zero,228c8 <main+0x1ac>
        int usrCommand = getCommand(opponent, whoAmI);
   22888:	e17ff017 	ldw	r5,-64(fp)
   2288c:	e13ff317 	ldw	r4,-52(fp)
   22890:	0021dc40 	call	21dc4 <getCommand>
   22894:	e0bff415 	stw	r2,-48(fp)
        processCommand(opponent, whoAmI, usrCommand);
   22898:	e1bff417 	ldw	r6,-48(fp)
   2289c:	e17ff017 	ldw	r5,-64(fp)
   228a0:	e13ff317 	ldw	r4,-52(fp)
   228a4:	00220800 	call	22080 <processCommand>
        send(usrCommand);
   228a8:	e0bff417 	ldw	r2,-48(fp)
   228ac:	10803fcc 	andi	r2,r2,255
   228b0:	1080201c 	xori	r2,r2,128
   228b4:	10bfe004 	addi	r2,r2,-128
   228b8:	1009883a 	mov	r4,r2
   228bc:	00201fc0 	call	201fc <send>
        myTurn = false;
   228c0:	e03fea15 	stw	zero,-88(fp)
   228c4:	00000b06 	br	228f4 <main+0x1d8>
      } else {
        int opponentInformation = receive();
   228c8:	00202cc0 	call	202cc <receive>
   228cc:	10803fcc 	andi	r2,r2,255
   228d0:	1080201c 	xori	r2,r2,128
   228d4:	10bfe004 	addi	r2,r2,-128
   228d8:	e0bff515 	stw	r2,-44(fp)
        processCommand(whoAmI, opponent, opponentInformation);
   228dc:	e1bff517 	ldw	r6,-44(fp)
   228e0:	e17ff317 	ldw	r5,-52(fp)
   228e4:	e13ff017 	ldw	r4,-64(fp)
   228e8:	00220800 	call	22080 <processCommand>
        myTurn = true;
   228ec:	00800044 	movi	r2,1
   228f0:	e0bfea15 	stw	r2,-88(fp)
      }

      gameOverForOpponent = checkGameOver(opponent);
   228f4:	e13ff317 	ldw	r4,-52(fp)
   228f8:	00224440 	call	22444 <checkGameOver>
   228fc:	e0bfeb15 	stw	r2,-84(fp)
      gameOverForMe = checkGameOver(whoAmI);
   22900:	e13ff017 	ldw	r4,-64(fp)
   22904:	00224440 	call	22444 <checkGameOver>
   22908:	e0bfec15 	stw	r2,-80(fp)
      if (gameOverForOpponent || gameOverForMe) {
   2290c:	e0bfeb17 	ldw	r2,-84(fp)
   22910:	1000021e 	bne	r2,zero,2291c <main+0x200>
   22914:	e0bfec17 	ldw	r2,-80(fp)
   22918:	10000326 	beq	r2,zero,22928 <main+0x20c>
        handleGameOver(gameOverForOpponent, gameOverForMe);
   2291c:	e17fec17 	ldw	r5,-80(fp)
   22920:	e13feb17 	ldw	r4,-84(fp)
   22924:	00224c40 	call	224c4 <handleGameOver>
      }
      round += 1;
   22928:	e0bfed17 	ldw	r2,-76(fp)
   2292c:	10800044 	addi	r2,r2,1
   22930:	e0bfed15 	stw	r2,-76(fp)
      printf("\n");
   22934:	01000284 	movi	r4,10
   22938:	0022be40 	call	22be4 <putchar>

    bool gameOverForOpponent = false;
    bool gameOverForMe = false;

    int round = 1;
  	while (!gameOverForOpponent && !gameOverForMe) {
   2293c:	e0bfeb17 	ldw	r2,-84(fp)
   22940:	103f851e 	bne	r2,zero,22758 <__alt_data_end+0xfffee758>
   22944:	e0bfec17 	ldw	r2,-80(fp)
   22948:	103fbf26 	beq	r2,zero,22848 <__alt_data_end+0xfffee848>
        handleGameOver(gameOverForOpponent, gameOverForMe);
      }
      round += 1;
      printf("\n");
    }
  }
   2294c:	003f8206 	br	22758 <__alt_data_end+0xfffee758>

00022950 <__divsi3>:
   22950:	20001b16 	blt	r4,zero,229c0 <__divsi3+0x70>
   22954:	000f883a 	mov	r7,zero
   22958:	28001616 	blt	r5,zero,229b4 <__divsi3+0x64>
   2295c:	200d883a 	mov	r6,r4
   22960:	29001a2e 	bgeu	r5,r4,229cc <__divsi3+0x7c>
   22964:	00800804 	movi	r2,32
   22968:	00c00044 	movi	r3,1
   2296c:	00000106 	br	22974 <__divsi3+0x24>
   22970:	10000d26 	beq	r2,zero,229a8 <__divsi3+0x58>
   22974:	294b883a 	add	r5,r5,r5
   22978:	10bfffc4 	addi	r2,r2,-1
   2297c:	18c7883a 	add	r3,r3,r3
   22980:	293ffb36 	bltu	r5,r4,22970 <__alt_data_end+0xfffee970>
   22984:	0005883a 	mov	r2,zero
   22988:	18000726 	beq	r3,zero,229a8 <__divsi3+0x58>
   2298c:	0005883a 	mov	r2,zero
   22990:	31400236 	bltu	r6,r5,2299c <__divsi3+0x4c>
   22994:	314dc83a 	sub	r6,r6,r5
   22998:	10c4b03a 	or	r2,r2,r3
   2299c:	1806d07a 	srli	r3,r3,1
   229a0:	280ad07a 	srli	r5,r5,1
   229a4:	183ffa1e 	bne	r3,zero,22990 <__alt_data_end+0xfffee990>
   229a8:	38000126 	beq	r7,zero,229b0 <__divsi3+0x60>
   229ac:	0085c83a 	sub	r2,zero,r2
   229b0:	f800283a 	ret
   229b4:	014bc83a 	sub	r5,zero,r5
   229b8:	39c0005c 	xori	r7,r7,1
   229bc:	003fe706 	br	2295c <__alt_data_end+0xfffee95c>
   229c0:	0109c83a 	sub	r4,zero,r4
   229c4:	01c00044 	movi	r7,1
   229c8:	003fe306 	br	22958 <__alt_data_end+0xfffee958>
   229cc:	00c00044 	movi	r3,1
   229d0:	003fee06 	br	2298c <__alt_data_end+0xfffee98c>

000229d4 <__modsi3>:
   229d4:	20001716 	blt	r4,zero,22a34 <__modsi3+0x60>
   229d8:	000f883a 	mov	r7,zero
   229dc:	2005883a 	mov	r2,r4
   229e0:	28001216 	blt	r5,zero,22a2c <__modsi3+0x58>
   229e4:	2900162e 	bgeu	r5,r4,22a40 <__modsi3+0x6c>
   229e8:	01800804 	movi	r6,32
   229ec:	00c00044 	movi	r3,1
   229f0:	00000106 	br	229f8 <__modsi3+0x24>
   229f4:	30000a26 	beq	r6,zero,22a20 <__modsi3+0x4c>
   229f8:	294b883a 	add	r5,r5,r5
   229fc:	31bfffc4 	addi	r6,r6,-1
   22a00:	18c7883a 	add	r3,r3,r3
   22a04:	293ffb36 	bltu	r5,r4,229f4 <__alt_data_end+0xfffee9f4>
   22a08:	18000526 	beq	r3,zero,22a20 <__modsi3+0x4c>
   22a0c:	1806d07a 	srli	r3,r3,1
   22a10:	11400136 	bltu	r2,r5,22a18 <__modsi3+0x44>
   22a14:	1145c83a 	sub	r2,r2,r5
   22a18:	280ad07a 	srli	r5,r5,1
   22a1c:	183ffb1e 	bne	r3,zero,22a0c <__alt_data_end+0xfffeea0c>
   22a20:	38000126 	beq	r7,zero,22a28 <__modsi3+0x54>
   22a24:	0085c83a 	sub	r2,zero,r2
   22a28:	f800283a 	ret
   22a2c:	014bc83a 	sub	r5,zero,r5
   22a30:	003fec06 	br	229e4 <__alt_data_end+0xfffee9e4>
   22a34:	0109c83a 	sub	r4,zero,r4
   22a38:	01c00044 	movi	r7,1
   22a3c:	003fe706 	br	229dc <__alt_data_end+0xfffee9dc>
   22a40:	00c00044 	movi	r3,1
   22a44:	003ff106 	br	22a0c <__alt_data_end+0xfffeea0c>

00022a48 <__udivsi3>:
   22a48:	200d883a 	mov	r6,r4
   22a4c:	2900152e 	bgeu	r5,r4,22aa4 <__udivsi3+0x5c>
   22a50:	28001416 	blt	r5,zero,22aa4 <__udivsi3+0x5c>
   22a54:	00800804 	movi	r2,32
   22a58:	00c00044 	movi	r3,1
   22a5c:	00000206 	br	22a68 <__udivsi3+0x20>
   22a60:	10000e26 	beq	r2,zero,22a9c <__udivsi3+0x54>
   22a64:	28000516 	blt	r5,zero,22a7c <__udivsi3+0x34>
   22a68:	294b883a 	add	r5,r5,r5
   22a6c:	10bfffc4 	addi	r2,r2,-1
   22a70:	18c7883a 	add	r3,r3,r3
   22a74:	293ffa36 	bltu	r5,r4,22a60 <__alt_data_end+0xfffeea60>
   22a78:	18000826 	beq	r3,zero,22a9c <__udivsi3+0x54>
   22a7c:	0005883a 	mov	r2,zero
   22a80:	31400236 	bltu	r6,r5,22a8c <__udivsi3+0x44>
   22a84:	314dc83a 	sub	r6,r6,r5
   22a88:	10c4b03a 	or	r2,r2,r3
   22a8c:	1806d07a 	srli	r3,r3,1
   22a90:	280ad07a 	srli	r5,r5,1
   22a94:	183ffa1e 	bne	r3,zero,22a80 <__alt_data_end+0xfffeea80>
   22a98:	f800283a 	ret
   22a9c:	0005883a 	mov	r2,zero
   22aa0:	f800283a 	ret
   22aa4:	00c00044 	movi	r3,1
   22aa8:	003ff406 	br	22a7c <__alt_data_end+0xfffeea7c>

00022aac <__umodsi3>:
   22aac:	2005883a 	mov	r2,r4
   22ab0:	2900122e 	bgeu	r5,r4,22afc <__umodsi3+0x50>
   22ab4:	28001116 	blt	r5,zero,22afc <__umodsi3+0x50>
   22ab8:	01800804 	movi	r6,32
   22abc:	00c00044 	movi	r3,1
   22ac0:	00000206 	br	22acc <__umodsi3+0x20>
   22ac4:	30000c26 	beq	r6,zero,22af8 <__umodsi3+0x4c>
   22ac8:	28000516 	blt	r5,zero,22ae0 <__umodsi3+0x34>
   22acc:	294b883a 	add	r5,r5,r5
   22ad0:	31bfffc4 	addi	r6,r6,-1
   22ad4:	18c7883a 	add	r3,r3,r3
   22ad8:	293ffa36 	bltu	r5,r4,22ac4 <__alt_data_end+0xfffeeac4>
   22adc:	18000626 	beq	r3,zero,22af8 <__umodsi3+0x4c>
   22ae0:	1806d07a 	srli	r3,r3,1
   22ae4:	11400136 	bltu	r2,r5,22aec <__umodsi3+0x40>
   22ae8:	1145c83a 	sub	r2,r2,r5
   22aec:	280ad07a 	srli	r5,r5,1
   22af0:	183ffb1e 	bne	r3,zero,22ae0 <__alt_data_end+0xfffeeae0>
   22af4:	f800283a 	ret
   22af8:	f800283a 	ret
   22afc:	00c00044 	movi	r3,1
   22b00:	003ff706 	br	22ae0 <__alt_data_end+0xfffeeae0>

00022b04 <__mulsi3>:
   22b04:	0005883a 	mov	r2,zero
   22b08:	20000726 	beq	r4,zero,22b28 <__mulsi3+0x24>
   22b0c:	20c0004c 	andi	r3,r4,1
   22b10:	2008d07a 	srli	r4,r4,1
   22b14:	18000126 	beq	r3,zero,22b1c <__mulsi3+0x18>
   22b18:	1145883a 	add	r2,r2,r5
   22b1c:	294b883a 	add	r5,r5,r5
   22b20:	203ffa1e 	bne	r4,zero,22b0c <__alt_data_end+0xfffeeb0c>
   22b24:	f800283a 	ret
   22b28:	f800283a 	ret

00022b2c <memcpy>:
   22b2c:	2005883a 	mov	r2,r4
   22b30:	2007883a 	mov	r3,r4
   22b34:	218d883a 	add	r6,r4,r6
   22b38:	19800526 	beq	r3,r6,22b50 <memcpy+0x24>
   22b3c:	29000003 	ldbu	r4,0(r5)
   22b40:	18c00044 	addi	r3,r3,1
   22b44:	29400044 	addi	r5,r5,1
   22b48:	193fffc5 	stb	r4,-1(r3)
   22b4c:	003ffa06 	br	22b38 <__alt_data_end+0xfffeeb38>
   22b50:	f800283a 	ret

00022b54 <_printf_r>:
   22b54:	defffd04 	addi	sp,sp,-12
   22b58:	dfc00015 	stw	ra,0(sp)
   22b5c:	d9800115 	stw	r6,4(sp)
   22b60:	d9c00215 	stw	r7,8(sp)
   22b64:	20c00217 	ldw	r3,8(r4)
   22b68:	018000b4 	movhi	r6,2
   22b6c:	318cca04 	addi	r6,r6,13096
   22b70:	19800115 	stw	r6,4(r3)
   22b74:	280d883a 	mov	r6,r5
   22b78:	21400217 	ldw	r5,8(r4)
   22b7c:	d9c00104 	addi	r7,sp,4
   22b80:	0022de00 	call	22de0 <___vfprintf_internal_r>
   22b84:	dfc00017 	ldw	ra,0(sp)
   22b88:	dec00304 	addi	sp,sp,12
   22b8c:	f800283a 	ret

00022b90 <printf>:
   22b90:	defffc04 	addi	sp,sp,-16
   22b94:	dfc00015 	stw	ra,0(sp)
   22b98:	d9400115 	stw	r5,4(sp)
   22b9c:	d9800215 	stw	r6,8(sp)
   22ba0:	d9c00315 	stw	r7,12(sp)
   22ba4:	008000b4 	movhi	r2,2
   22ba8:	1094f004 	addi	r2,r2,21440
   22bac:	10800017 	ldw	r2,0(r2)
   22bb0:	014000b4 	movhi	r5,2
   22bb4:	294cca04 	addi	r5,r5,13096
   22bb8:	10c00217 	ldw	r3,8(r2)
   22bbc:	d9800104 	addi	r6,sp,4
   22bc0:	19400115 	stw	r5,4(r3)
   22bc4:	200b883a 	mov	r5,r4
   22bc8:	11000217 	ldw	r4,8(r2)
   22bcc:	002330c0 	call	2330c <__vfprintf_internal>
   22bd0:	dfc00017 	ldw	ra,0(sp)
   22bd4:	dec00404 	addi	sp,sp,16
   22bd8:	f800283a 	ret

00022bdc <_putchar_r>:
   22bdc:	21800217 	ldw	r6,8(r4)
   22be0:	00234881 	jmpi	23488 <_putc_r>

00022be4 <putchar>:
   22be4:	008000b4 	movhi	r2,2
   22be8:	1094f004 	addi	r2,r2,21440
   22bec:	10800017 	ldw	r2,0(r2)
   22bf0:	200b883a 	mov	r5,r4
   22bf4:	11800217 	ldw	r6,8(r2)
   22bf8:	1009883a 	mov	r4,r2
   22bfc:	00234881 	jmpi	23488 <_putc_r>

00022c00 <_puts_r>:
   22c00:	defffd04 	addi	sp,sp,-12
   22c04:	dc000015 	stw	r16,0(sp)
   22c08:	2021883a 	mov	r16,r4
   22c0c:	2809883a 	mov	r4,r5
   22c10:	dfc00215 	stw	ra,8(sp)
   22c14:	dc400115 	stw	r17,4(sp)
   22c18:	2823883a 	mov	r17,r5
   22c1c:	0022d080 	call	22d08 <strlen>
   22c20:	81400217 	ldw	r5,8(r16)
   22c24:	010000b4 	movhi	r4,2
   22c28:	210cca04 	addi	r4,r4,13096
   22c2c:	29000115 	stw	r4,4(r5)
   22c30:	100f883a 	mov	r7,r2
   22c34:	880d883a 	mov	r6,r17
   22c38:	8009883a 	mov	r4,r16
   22c3c:	00233280 	call	23328 <__sfvwrite_small_dev>
   22c40:	00ffffc4 	movi	r3,-1
   22c44:	10c00926 	beq	r2,r3,22c6c <_puts_r+0x6c>
   22c48:	81400217 	ldw	r5,8(r16)
   22c4c:	018000b4 	movhi	r6,2
   22c50:	01c00044 	movi	r7,1
   22c54:	28800117 	ldw	r2,4(r5)
   22c58:	31940804 	addi	r6,r6,20512
   22c5c:	8009883a 	mov	r4,r16
   22c60:	103ee83a 	callr	r2
   22c64:	10bfffe0 	cmpeqi	r2,r2,-1
   22c68:	0085c83a 	sub	r2,zero,r2
   22c6c:	dfc00217 	ldw	ra,8(sp)
   22c70:	dc400117 	ldw	r17,4(sp)
   22c74:	dc000017 	ldw	r16,0(sp)
   22c78:	dec00304 	addi	sp,sp,12
   22c7c:	f800283a 	ret

00022c80 <puts>:
   22c80:	008000b4 	movhi	r2,2
   22c84:	1094f004 	addi	r2,r2,21440
   22c88:	200b883a 	mov	r5,r4
   22c8c:	11000017 	ldw	r4,0(r2)
   22c90:	0022c001 	jmpi	22c00 <_puts_r>

00022c94 <srand>:
   22c94:	008000b4 	movhi	r2,2
   22c98:	1095aa04 	addi	r2,r2,22184
   22c9c:	11000015 	stw	r4,0(r2)
   22ca0:	10000115 	stw	zero,4(r2)
   22ca4:	f800283a 	ret

00022ca8 <rand>:
   22ca8:	defffe04 	addi	sp,sp,-8
   22cac:	dc000015 	stw	r16,0(sp)
   22cb0:	040000b4 	movhi	r16,2
   22cb4:	8415aa04 	addi	r16,r16,22184
   22cb8:	81000017 	ldw	r4,0(r16)
   22cbc:	81400117 	ldw	r5,4(r16)
   22cc0:	01932574 	movhi	r6,19605
   22cc4:	01d614b4 	movhi	r7,22610
   22cc8:	319fcb44 	addi	r6,r6,32557
   22ccc:	39fd0b44 	addi	r7,r7,-3027
   22cd0:	dfc00115 	stw	ra,4(sp)
   22cd4:	00235380 	call	23538 <__muldi3>
   22cd8:	11000044 	addi	r4,r2,1
   22cdc:	2085803a 	cmpltu	r2,r4,r2
   22ce0:	10c7883a 	add	r3,r2,r3
   22ce4:	00a00034 	movhi	r2,32768
   22ce8:	10bfffc4 	addi	r2,r2,-1
   22cec:	1884703a 	and	r2,r3,r2
   22cf0:	81000015 	stw	r4,0(r16)
   22cf4:	80c00115 	stw	r3,4(r16)
   22cf8:	dfc00117 	ldw	ra,4(sp)
   22cfc:	dc000017 	ldw	r16,0(sp)
   22d00:	dec00204 	addi	sp,sp,8
   22d04:	f800283a 	ret

00022d08 <strlen>:
   22d08:	2005883a 	mov	r2,r4
   22d0c:	10c00007 	ldb	r3,0(r2)
   22d10:	18000226 	beq	r3,zero,22d1c <strlen+0x14>
   22d14:	10800044 	addi	r2,r2,1
   22d18:	003ffc06 	br	22d0c <__alt_data_end+0xfffeed0c>
   22d1c:	1105c83a 	sub	r2,r2,r4
   22d20:	f800283a 	ret

00022d24 <time>:
   22d24:	008000b4 	movhi	r2,2
   22d28:	defffc04 	addi	sp,sp,-16
   22d2c:	1094f004 	addi	r2,r2,21440
   22d30:	dc000215 	stw	r16,8(sp)
   22d34:	2021883a 	mov	r16,r4
   22d38:	11000017 	ldw	r4,0(r2)
   22d3c:	000d883a 	mov	r6,zero
   22d40:	d80b883a 	mov	r5,sp
   22d44:	dfc00315 	stw	ra,12(sp)
   22d48:	00233e00 	call	233e0 <_gettimeofday_r>
   22d4c:	10000416 	blt	r2,zero,22d60 <time+0x3c>
   22d50:	d8800017 	ldw	r2,0(sp)
   22d54:	80000326 	beq	r16,zero,22d64 <time+0x40>
   22d58:	80800015 	stw	r2,0(r16)
   22d5c:	00000106 	br	22d64 <time+0x40>
   22d60:	00bfffc4 	movi	r2,-1
   22d64:	dfc00317 	ldw	ra,12(sp)
   22d68:	dc000217 	ldw	r16,8(sp)
   22d6c:	dec00404 	addi	sp,sp,16
   22d70:	f800283a 	ret

00022d74 <print_repeat>:
   22d74:	defffb04 	addi	sp,sp,-20
   22d78:	dc800315 	stw	r18,12(sp)
   22d7c:	dc400215 	stw	r17,8(sp)
   22d80:	dc000115 	stw	r16,4(sp)
   22d84:	dfc00415 	stw	ra,16(sp)
   22d88:	2025883a 	mov	r18,r4
   22d8c:	2823883a 	mov	r17,r5
   22d90:	d9800005 	stb	r6,0(sp)
   22d94:	3821883a 	mov	r16,r7
   22d98:	04000a0e 	bge	zero,r16,22dc4 <print_repeat+0x50>
   22d9c:	88800117 	ldw	r2,4(r17)
   22da0:	01c00044 	movi	r7,1
   22da4:	d80d883a 	mov	r6,sp
   22da8:	880b883a 	mov	r5,r17
   22dac:	9009883a 	mov	r4,r18
   22db0:	103ee83a 	callr	r2
   22db4:	843fffc4 	addi	r16,r16,-1
   22db8:	103ff726 	beq	r2,zero,22d98 <__alt_data_end+0xfffeed98>
   22dbc:	00bfffc4 	movi	r2,-1
   22dc0:	00000106 	br	22dc8 <print_repeat+0x54>
   22dc4:	0005883a 	mov	r2,zero
   22dc8:	dfc00417 	ldw	ra,16(sp)
   22dcc:	dc800317 	ldw	r18,12(sp)
   22dd0:	dc400217 	ldw	r17,8(sp)
   22dd4:	dc000117 	ldw	r16,4(sp)
   22dd8:	dec00504 	addi	sp,sp,20
   22ddc:	f800283a 	ret

00022de0 <___vfprintf_internal_r>:
   22de0:	deffe504 	addi	sp,sp,-108
   22de4:	d8c00804 	addi	r3,sp,32
   22de8:	ddc01815 	stw	r23,96(sp)
   22dec:	dd801715 	stw	r22,92(sp)
   22df0:	dd401615 	stw	r21,88(sp)
   22df4:	dd001515 	stw	r20,84(sp)
   22df8:	dcc01415 	stw	r19,80(sp)
   22dfc:	dc801315 	stw	r18,76(sp)
   22e00:	dc401215 	stw	r17,72(sp)
   22e04:	dc001115 	stw	r16,68(sp)
   22e08:	dfc01a15 	stw	ra,104(sp)
   22e0c:	df001915 	stw	fp,100(sp)
   22e10:	2029883a 	mov	r20,r4
   22e14:	2823883a 	mov	r17,r5
   22e18:	382d883a 	mov	r22,r7
   22e1c:	d9800f15 	stw	r6,60(sp)
   22e20:	0021883a 	mov	r16,zero
   22e24:	d8000e15 	stw	zero,56(sp)
   22e28:	d8000a15 	stw	zero,40(sp)
   22e2c:	002b883a 	mov	r21,zero
   22e30:	0027883a 	mov	r19,zero
   22e34:	0025883a 	mov	r18,zero
   22e38:	d8000c15 	stw	zero,48(sp)
   22e3c:	d8000b15 	stw	zero,44(sp)
   22e40:	002f883a 	mov	r23,zero
   22e44:	d8c00915 	stw	r3,36(sp)
   22e48:	d8c00f17 	ldw	r3,60(sp)
   22e4c:	19000003 	ldbu	r4,0(r3)
   22e50:	20803fcc 	andi	r2,r4,255
   22e54:	1080201c 	xori	r2,r2,128
   22e58:	10bfe004 	addi	r2,r2,-128
   22e5c:	10011e26 	beq	r2,zero,232d8 <___vfprintf_internal_r+0x4f8>
   22e60:	00c00044 	movi	r3,1
   22e64:	b8c01426 	beq	r23,r3,22eb8 <___vfprintf_internal_r+0xd8>
   22e68:	1dc00216 	blt	r3,r23,22e74 <___vfprintf_internal_r+0x94>
   22e6c:	b8000626 	beq	r23,zero,22e88 <___vfprintf_internal_r+0xa8>
   22e70:	00011506 	br	232c8 <___vfprintf_internal_r+0x4e8>
   22e74:	01400084 	movi	r5,2
   22e78:	b9401d26 	beq	r23,r5,22ef0 <___vfprintf_internal_r+0x110>
   22e7c:	014000c4 	movi	r5,3
   22e80:	b9402b26 	beq	r23,r5,22f30 <___vfprintf_internal_r+0x150>
   22e84:	00011006 	br	232c8 <___vfprintf_internal_r+0x4e8>
   22e88:	01400944 	movi	r5,37
   22e8c:	1140fc26 	beq	r2,r5,23280 <___vfprintf_internal_r+0x4a0>
   22e90:	88800117 	ldw	r2,4(r17)
   22e94:	d9000005 	stb	r4,0(sp)
   22e98:	01c00044 	movi	r7,1
   22e9c:	d80d883a 	mov	r6,sp
   22ea0:	880b883a 	mov	r5,r17
   22ea4:	a009883a 	mov	r4,r20
   22ea8:	103ee83a 	callr	r2
   22eac:	1000d81e 	bne	r2,zero,23210 <___vfprintf_internal_r+0x430>
   22eb0:	84000044 	addi	r16,r16,1
   22eb4:	00010406 	br	232c8 <___vfprintf_internal_r+0x4e8>
   22eb8:	01400c04 	movi	r5,48
   22ebc:	1140fa26 	beq	r2,r5,232a8 <___vfprintf_internal_r+0x4c8>
   22ec0:	01400944 	movi	r5,37
   22ec4:	11400a1e 	bne	r2,r5,22ef0 <___vfprintf_internal_r+0x110>
   22ec8:	d8800005 	stb	r2,0(sp)
   22ecc:	88800117 	ldw	r2,4(r17)
   22ed0:	b80f883a 	mov	r7,r23
   22ed4:	d80d883a 	mov	r6,sp
   22ed8:	880b883a 	mov	r5,r17
   22edc:	a009883a 	mov	r4,r20
   22ee0:	103ee83a 	callr	r2
   22ee4:	1000ca1e 	bne	r2,zero,23210 <___vfprintf_internal_r+0x430>
   22ee8:	84000044 	addi	r16,r16,1
   22eec:	0000f506 	br	232c4 <___vfprintf_internal_r+0x4e4>
   22ef0:	25fff404 	addi	r23,r4,-48
   22ef4:	bdc03fcc 	andi	r23,r23,255
   22ef8:	00c00244 	movi	r3,9
   22efc:	1dc00936 	bltu	r3,r23,22f24 <___vfprintf_internal_r+0x144>
   22f00:	00bfffc4 	movi	r2,-1
   22f04:	90800426 	beq	r18,r2,22f18 <___vfprintf_internal_r+0x138>
   22f08:	01400284 	movi	r5,10
   22f0c:	9009883a 	mov	r4,r18
   22f10:	0022b040 	call	22b04 <__mulsi3>
   22f14:	00000106 	br	22f1c <___vfprintf_internal_r+0x13c>
   22f18:	0005883a 	mov	r2,zero
   22f1c:	b8a5883a 	add	r18,r23,r2
   22f20:	0000e206 	br	232ac <___vfprintf_internal_r+0x4cc>
   22f24:	01400b84 	movi	r5,46
   22f28:	1140e426 	beq	r2,r5,232bc <___vfprintf_internal_r+0x4dc>
   22f2c:	05c00084 	movi	r23,2
   22f30:	213ff404 	addi	r4,r4,-48
   22f34:	27003fcc 	andi	fp,r4,255
   22f38:	00c00244 	movi	r3,9
   22f3c:	1f000936 	bltu	r3,fp,22f64 <___vfprintf_internal_r+0x184>
   22f40:	00bfffc4 	movi	r2,-1
   22f44:	98800426 	beq	r19,r2,22f58 <___vfprintf_internal_r+0x178>
   22f48:	01400284 	movi	r5,10
   22f4c:	9809883a 	mov	r4,r19
   22f50:	0022b040 	call	22b04 <__mulsi3>
   22f54:	00000106 	br	22f5c <___vfprintf_internal_r+0x17c>
   22f58:	0005883a 	mov	r2,zero
   22f5c:	e0a7883a 	add	r19,fp,r2
   22f60:	0000d906 	br	232c8 <___vfprintf_internal_r+0x4e8>
   22f64:	00c01b04 	movi	r3,108
   22f68:	10c0d226 	beq	r2,r3,232b4 <___vfprintf_internal_r+0x4d4>
   22f6c:	013fffc4 	movi	r4,-1
   22f70:	99000226 	beq	r19,r4,22f7c <___vfprintf_internal_r+0x19c>
   22f74:	d8000b15 	stw	zero,44(sp)
   22f78:	00000106 	br	22f80 <___vfprintf_internal_r+0x1a0>
   22f7c:	04c00044 	movi	r19,1
   22f80:	01001a44 	movi	r4,105
   22f84:	11001626 	beq	r2,r4,22fe0 <___vfprintf_internal_r+0x200>
   22f88:	20800916 	blt	r4,r2,22fb0 <___vfprintf_internal_r+0x1d0>
   22f8c:	010018c4 	movi	r4,99
   22f90:	11008826 	beq	r2,r4,231b4 <___vfprintf_internal_r+0x3d4>
   22f94:	01001904 	movi	r4,100
   22f98:	11001126 	beq	r2,r4,22fe0 <___vfprintf_internal_r+0x200>
   22f9c:	01001604 	movi	r4,88
   22fa0:	1100c81e 	bne	r2,r4,232c4 <___vfprintf_internal_r+0x4e4>
   22fa4:	00c00044 	movi	r3,1
   22fa8:	d8c00e15 	stw	r3,56(sp)
   22fac:	00001506 	br	23004 <___vfprintf_internal_r+0x224>
   22fb0:	01001cc4 	movi	r4,115
   22fb4:	11009826 	beq	r2,r4,23218 <___vfprintf_internal_r+0x438>
   22fb8:	20800416 	blt	r4,r2,22fcc <___vfprintf_internal_r+0x1ec>
   22fbc:	01001bc4 	movi	r4,111
   22fc0:	1100c01e 	bne	r2,r4,232c4 <___vfprintf_internal_r+0x4e4>
   22fc4:	05400204 	movi	r21,8
   22fc8:	00000f06 	br	23008 <___vfprintf_internal_r+0x228>
   22fcc:	01001d44 	movi	r4,117
   22fd0:	11000d26 	beq	r2,r4,23008 <___vfprintf_internal_r+0x228>
   22fd4:	01001e04 	movi	r4,120
   22fd8:	11000a26 	beq	r2,r4,23004 <___vfprintf_internal_r+0x224>
   22fdc:	0000b906 	br	232c4 <___vfprintf_internal_r+0x4e4>
   22fe0:	d8c00a17 	ldw	r3,40(sp)
   22fe4:	b7000104 	addi	fp,r22,4
   22fe8:	18000726 	beq	r3,zero,23008 <___vfprintf_internal_r+0x228>
   22fec:	df000d15 	stw	fp,52(sp)
   22ff0:	b5c00017 	ldw	r23,0(r22)
   22ff4:	b800080e 	bge	r23,zero,23018 <___vfprintf_internal_r+0x238>
   22ff8:	05efc83a 	sub	r23,zero,r23
   22ffc:	02400044 	movi	r9,1
   23000:	00000606 	br	2301c <___vfprintf_internal_r+0x23c>
   23004:	05400404 	movi	r21,16
   23008:	b0c00104 	addi	r3,r22,4
   2300c:	d8c00d15 	stw	r3,52(sp)
   23010:	b5c00017 	ldw	r23,0(r22)
   23014:	d8000a15 	stw	zero,40(sp)
   23018:	0013883a 	mov	r9,zero
   2301c:	d839883a 	mov	fp,sp
   23020:	b8001726 	beq	r23,zero,23080 <___vfprintf_internal_r+0x2a0>
   23024:	a80b883a 	mov	r5,r21
   23028:	b809883a 	mov	r4,r23
   2302c:	da401015 	stw	r9,64(sp)
   23030:	0022a480 	call	22a48 <__udivsi3>
   23034:	a80b883a 	mov	r5,r21
   23038:	1009883a 	mov	r4,r2
   2303c:	102d883a 	mov	r22,r2
   23040:	0022b040 	call	22b04 <__mulsi3>
   23044:	b885c83a 	sub	r2,r23,r2
   23048:	00c00244 	movi	r3,9
   2304c:	da401017 	ldw	r9,64(sp)
   23050:	18800216 	blt	r3,r2,2305c <___vfprintf_internal_r+0x27c>
   23054:	10800c04 	addi	r2,r2,48
   23058:	00000506 	br	23070 <___vfprintf_internal_r+0x290>
   2305c:	d8c00e17 	ldw	r3,56(sp)
   23060:	18000226 	beq	r3,zero,2306c <___vfprintf_internal_r+0x28c>
   23064:	10800dc4 	addi	r2,r2,55
   23068:	00000106 	br	23070 <___vfprintf_internal_r+0x290>
   2306c:	108015c4 	addi	r2,r2,87
   23070:	e0800005 	stb	r2,0(fp)
   23074:	b02f883a 	mov	r23,r22
   23078:	e7000044 	addi	fp,fp,1
   2307c:	003fe806 	br	23020 <__alt_data_end+0xfffef020>
   23080:	e6efc83a 	sub	r23,fp,sp
   23084:	9dc5c83a 	sub	r2,r19,r23
   23088:	0080090e 	bge	zero,r2,230b0 <___vfprintf_internal_r+0x2d0>
   2308c:	e085883a 	add	r2,fp,r2
   23090:	01400c04 	movi	r5,48
   23094:	d8c00917 	ldw	r3,36(sp)
   23098:	e009883a 	mov	r4,fp
   2309c:	e0c0032e 	bgeu	fp,r3,230ac <___vfprintf_internal_r+0x2cc>
   230a0:	e7000044 	addi	fp,fp,1
   230a4:	21400005 	stb	r5,0(r4)
   230a8:	e0bffa1e 	bne	fp,r2,23094 <__alt_data_end+0xfffef094>
   230ac:	e6efc83a 	sub	r23,fp,sp
   230b0:	d8c00b17 	ldw	r3,44(sp)
   230b4:	4dd1883a 	add	r8,r9,r23
   230b8:	922dc83a 	sub	r22,r18,r8
   230bc:	18001626 	beq	r3,zero,23118 <___vfprintf_internal_r+0x338>
   230c0:	48000a26 	beq	r9,zero,230ec <___vfprintf_internal_r+0x30c>
   230c4:	00800b44 	movi	r2,45
   230c8:	d8800805 	stb	r2,32(sp)
   230cc:	88800117 	ldw	r2,4(r17)
   230d0:	01c00044 	movi	r7,1
   230d4:	d9800804 	addi	r6,sp,32
   230d8:	880b883a 	mov	r5,r17
   230dc:	a009883a 	mov	r4,r20
   230e0:	103ee83a 	callr	r2
   230e4:	10004a1e 	bne	r2,zero,23210 <___vfprintf_internal_r+0x430>
   230e8:	84000044 	addi	r16,r16,1
   230ec:	0580070e 	bge	zero,r22,2310c <___vfprintf_internal_r+0x32c>
   230f0:	b00f883a 	mov	r7,r22
   230f4:	01800c04 	movi	r6,48
   230f8:	880b883a 	mov	r5,r17
   230fc:	a009883a 	mov	r4,r20
   23100:	0022d740 	call	22d74 <print_repeat>
   23104:	1000421e 	bne	r2,zero,23210 <___vfprintf_internal_r+0x430>
   23108:	85a1883a 	add	r16,r16,r22
   2310c:	e02d883a 	mov	r22,fp
   23110:	bf2fc83a 	sub	r23,r23,fp
   23114:	00002006 	br	23198 <___vfprintf_internal_r+0x3b8>
   23118:	0580090e 	bge	zero,r22,23140 <___vfprintf_internal_r+0x360>
   2311c:	b00f883a 	mov	r7,r22
   23120:	01800804 	movi	r6,32
   23124:	880b883a 	mov	r5,r17
   23128:	a009883a 	mov	r4,r20
   2312c:	da401015 	stw	r9,64(sp)
   23130:	0022d740 	call	22d74 <print_repeat>
   23134:	da401017 	ldw	r9,64(sp)
   23138:	1000351e 	bne	r2,zero,23210 <___vfprintf_internal_r+0x430>
   2313c:	85a1883a 	add	r16,r16,r22
   23140:	483ff226 	beq	r9,zero,2310c <__alt_data_end+0xfffef10c>
   23144:	00800b44 	movi	r2,45
   23148:	d8800805 	stb	r2,32(sp)
   2314c:	88800117 	ldw	r2,4(r17)
   23150:	01c00044 	movi	r7,1
   23154:	d9800804 	addi	r6,sp,32
   23158:	880b883a 	mov	r5,r17
   2315c:	a009883a 	mov	r4,r20
   23160:	103ee83a 	callr	r2
   23164:	10002a1e 	bne	r2,zero,23210 <___vfprintf_internal_r+0x430>
   23168:	84000044 	addi	r16,r16,1
   2316c:	003fe706 	br	2310c <__alt_data_end+0xfffef10c>
   23170:	b5bfffc4 	addi	r22,r22,-1
   23174:	b0800003 	ldbu	r2,0(r22)
   23178:	01c00044 	movi	r7,1
   2317c:	d9800804 	addi	r6,sp,32
   23180:	d8800805 	stb	r2,32(sp)
   23184:	88800117 	ldw	r2,4(r17)
   23188:	880b883a 	mov	r5,r17
   2318c:	a009883a 	mov	r4,r20
   23190:	103ee83a 	callr	r2
   23194:	10001e1e 	bne	r2,zero,23210 <___vfprintf_internal_r+0x430>
   23198:	8585c83a 	sub	r2,r16,r22
   2319c:	b5c9883a 	add	r4,r22,r23
   231a0:	e085883a 	add	r2,fp,r2
   231a4:	013ff216 	blt	zero,r4,23170 <__alt_data_end+0xfffef170>
   231a8:	1021883a 	mov	r16,r2
   231ac:	dd800d17 	ldw	r22,52(sp)
   231b0:	00004406 	br	232c4 <___vfprintf_internal_r+0x4e4>
   231b4:	00800044 	movi	r2,1
   231b8:	1480080e 	bge	r2,r18,231dc <___vfprintf_internal_r+0x3fc>
   231bc:	95ffffc4 	addi	r23,r18,-1
   231c0:	b80f883a 	mov	r7,r23
   231c4:	01800804 	movi	r6,32
   231c8:	880b883a 	mov	r5,r17
   231cc:	a009883a 	mov	r4,r20
   231d0:	0022d740 	call	22d74 <print_repeat>
   231d4:	10000e1e 	bne	r2,zero,23210 <___vfprintf_internal_r+0x430>
   231d8:	85e1883a 	add	r16,r16,r23
   231dc:	b0800017 	ldw	r2,0(r22)
   231e0:	01c00044 	movi	r7,1
   231e4:	d80d883a 	mov	r6,sp
   231e8:	d8800005 	stb	r2,0(sp)
   231ec:	88800117 	ldw	r2,4(r17)
   231f0:	880b883a 	mov	r5,r17
   231f4:	a009883a 	mov	r4,r20
   231f8:	b5c00104 	addi	r23,r22,4
   231fc:	103ee83a 	callr	r2
   23200:	1000031e 	bne	r2,zero,23210 <___vfprintf_internal_r+0x430>
   23204:	84000044 	addi	r16,r16,1
   23208:	b82d883a 	mov	r22,r23
   2320c:	00002d06 	br	232c4 <___vfprintf_internal_r+0x4e4>
   23210:	00bfffc4 	movi	r2,-1
   23214:	00003106 	br	232dc <___vfprintf_internal_r+0x4fc>
   23218:	b5c00017 	ldw	r23,0(r22)
   2321c:	b7000104 	addi	fp,r22,4
   23220:	b809883a 	mov	r4,r23
   23224:	0022d080 	call	22d08 <strlen>
   23228:	9091c83a 	sub	r8,r18,r2
   2322c:	102d883a 	mov	r22,r2
   23230:	0200090e 	bge	zero,r8,23258 <___vfprintf_internal_r+0x478>
   23234:	400f883a 	mov	r7,r8
   23238:	01800804 	movi	r6,32
   2323c:	880b883a 	mov	r5,r17
   23240:	a009883a 	mov	r4,r20
   23244:	da001015 	stw	r8,64(sp)
   23248:	0022d740 	call	22d74 <print_repeat>
   2324c:	da001017 	ldw	r8,64(sp)
   23250:	103fef1e 	bne	r2,zero,23210 <__alt_data_end+0xfffef210>
   23254:	8221883a 	add	r16,r16,r8
   23258:	88800117 	ldw	r2,4(r17)
   2325c:	b00f883a 	mov	r7,r22
   23260:	b80d883a 	mov	r6,r23
   23264:	880b883a 	mov	r5,r17
   23268:	a009883a 	mov	r4,r20
   2326c:	103ee83a 	callr	r2
   23270:	103fe71e 	bne	r2,zero,23210 <__alt_data_end+0xfffef210>
   23274:	85a1883a 	add	r16,r16,r22
   23278:	e02d883a 	mov	r22,fp
   2327c:	00001106 	br	232c4 <___vfprintf_internal_r+0x4e4>
   23280:	00c00044 	movi	r3,1
   23284:	04ffffc4 	movi	r19,-1
   23288:	d8000e15 	stw	zero,56(sp)
   2328c:	d8c00a15 	stw	r3,40(sp)
   23290:	05400284 	movi	r21,10
   23294:	9825883a 	mov	r18,r19
   23298:	d8000c15 	stw	zero,48(sp)
   2329c:	d8000b15 	stw	zero,44(sp)
   232a0:	182f883a 	mov	r23,r3
   232a4:	00000806 	br	232c8 <___vfprintf_internal_r+0x4e8>
   232a8:	ddc00b15 	stw	r23,44(sp)
   232ac:	05c00084 	movi	r23,2
   232b0:	00000506 	br	232c8 <___vfprintf_internal_r+0x4e8>
   232b4:	00c00044 	movi	r3,1
   232b8:	d8c00c15 	stw	r3,48(sp)
   232bc:	05c000c4 	movi	r23,3
   232c0:	00000106 	br	232c8 <___vfprintf_internal_r+0x4e8>
   232c4:	002f883a 	mov	r23,zero
   232c8:	d8c00f17 	ldw	r3,60(sp)
   232cc:	18c00044 	addi	r3,r3,1
   232d0:	d8c00f15 	stw	r3,60(sp)
   232d4:	003edc06 	br	22e48 <__alt_data_end+0xfffeee48>
   232d8:	8005883a 	mov	r2,r16
   232dc:	dfc01a17 	ldw	ra,104(sp)
   232e0:	df001917 	ldw	fp,100(sp)
   232e4:	ddc01817 	ldw	r23,96(sp)
   232e8:	dd801717 	ldw	r22,92(sp)
   232ec:	dd401617 	ldw	r21,88(sp)
   232f0:	dd001517 	ldw	r20,84(sp)
   232f4:	dcc01417 	ldw	r19,80(sp)
   232f8:	dc801317 	ldw	r18,76(sp)
   232fc:	dc401217 	ldw	r17,72(sp)
   23300:	dc001117 	ldw	r16,68(sp)
   23304:	dec01b04 	addi	sp,sp,108
   23308:	f800283a 	ret

0002330c <__vfprintf_internal>:
   2330c:	008000b4 	movhi	r2,2
   23310:	1094f004 	addi	r2,r2,21440
   23314:	300f883a 	mov	r7,r6
   23318:	280d883a 	mov	r6,r5
   2331c:	200b883a 	mov	r5,r4
   23320:	11000017 	ldw	r4,0(r2)
   23324:	0022de01 	jmpi	22de0 <___vfprintf_internal_r>

00023328 <__sfvwrite_small_dev>:
   23328:	2880000b 	ldhu	r2,0(r5)
   2332c:	1080020c 	andi	r2,r2,8
   23330:	10002126 	beq	r2,zero,233b8 <__sfvwrite_small_dev+0x90>
   23334:	2880008f 	ldh	r2,2(r5)
   23338:	defffa04 	addi	sp,sp,-24
   2333c:	dc000015 	stw	r16,0(sp)
   23340:	dfc00515 	stw	ra,20(sp)
   23344:	dd000415 	stw	r20,16(sp)
   23348:	dcc00315 	stw	r19,12(sp)
   2334c:	dc800215 	stw	r18,8(sp)
   23350:	dc400115 	stw	r17,4(sp)
   23354:	2821883a 	mov	r16,r5
   23358:	10001216 	blt	r2,zero,233a4 <__sfvwrite_small_dev+0x7c>
   2335c:	2027883a 	mov	r19,r4
   23360:	3025883a 	mov	r18,r6
   23364:	3823883a 	mov	r17,r7
   23368:	05010004 	movi	r20,1024
   2336c:	04400b0e 	bge	zero,r17,2339c <__sfvwrite_small_dev+0x74>
   23370:	880f883a 	mov	r7,r17
   23374:	a440010e 	bge	r20,r17,2337c <__sfvwrite_small_dev+0x54>
   23378:	01c10004 	movi	r7,1024
   2337c:	8140008f 	ldh	r5,2(r16)
   23380:	900d883a 	mov	r6,r18
   23384:	9809883a 	mov	r4,r19
   23388:	00234e00 	call	234e0 <_write_r>
   2338c:	0080050e 	bge	zero,r2,233a4 <__sfvwrite_small_dev+0x7c>
   23390:	88a3c83a 	sub	r17,r17,r2
   23394:	90a5883a 	add	r18,r18,r2
   23398:	003ff406 	br	2336c <__alt_data_end+0xfffef36c>
   2339c:	0005883a 	mov	r2,zero
   233a0:	00000706 	br	233c0 <__sfvwrite_small_dev+0x98>
   233a4:	8080000b 	ldhu	r2,0(r16)
   233a8:	10801014 	ori	r2,r2,64
   233ac:	8080000d 	sth	r2,0(r16)
   233b0:	00bfffc4 	movi	r2,-1
   233b4:	00000206 	br	233c0 <__sfvwrite_small_dev+0x98>
   233b8:	00bfffc4 	movi	r2,-1
   233bc:	f800283a 	ret
   233c0:	dfc00517 	ldw	ra,20(sp)
   233c4:	dd000417 	ldw	r20,16(sp)
   233c8:	dcc00317 	ldw	r19,12(sp)
   233cc:	dc800217 	ldw	r18,8(sp)
   233d0:	dc400117 	ldw	r17,4(sp)
   233d4:	dc000017 	ldw	r16,0(sp)
   233d8:	dec00604 	addi	sp,sp,24
   233dc:	f800283a 	ret

000233e0 <_gettimeofday_r>:
   233e0:	defffd04 	addi	sp,sp,-12
   233e4:	dc000015 	stw	r16,0(sp)
   233e8:	040000b4 	movhi	r16,2
   233ec:	dc400115 	stw	r17,4(sp)
   233f0:	8415ac04 	addi	r16,r16,22192
   233f4:	2023883a 	mov	r17,r4
   233f8:	2809883a 	mov	r4,r5
   233fc:	300b883a 	mov	r5,r6
   23400:	dfc00215 	stw	ra,8(sp)
   23404:	80000015 	stw	zero,0(r16)
   23408:	00236a80 	call	236a8 <gettimeofday>
   2340c:	00ffffc4 	movi	r3,-1
   23410:	10c0031e 	bne	r2,r3,23420 <_gettimeofday_r+0x40>
   23414:	80c00017 	ldw	r3,0(r16)
   23418:	18000126 	beq	r3,zero,23420 <_gettimeofday_r+0x40>
   2341c:	88c00015 	stw	r3,0(r17)
   23420:	dfc00217 	ldw	ra,8(sp)
   23424:	dc400117 	ldw	r17,4(sp)
   23428:	dc000017 	ldw	r16,0(sp)
   2342c:	dec00304 	addi	sp,sp,12
   23430:	f800283a 	ret

00023434 <putc>:
   23434:	defffd04 	addi	sp,sp,-12
   23438:	008000b4 	movhi	r2,2
   2343c:	dc000115 	stw	r16,4(sp)
   23440:	dfc00215 	stw	ra,8(sp)
   23444:	108cca04 	addi	r2,r2,13096
   23448:	28800115 	stw	r2,4(r5)
   2344c:	008000b4 	movhi	r2,2
   23450:	1094f004 	addi	r2,r2,21440
   23454:	d9000005 	stb	r4,0(sp)
   23458:	2021883a 	mov	r16,r4
   2345c:	11000017 	ldw	r4,0(r2)
   23460:	01c00044 	movi	r7,1
   23464:	d80d883a 	mov	r6,sp
   23468:	00233280 	call	23328 <__sfvwrite_small_dev>
   2346c:	00ffffc4 	movi	r3,-1
   23470:	10c00126 	beq	r2,r3,23478 <putc+0x44>
   23474:	8005883a 	mov	r2,r16
   23478:	dfc00217 	ldw	ra,8(sp)
   2347c:	dc000117 	ldw	r16,4(sp)
   23480:	dec00304 	addi	sp,sp,12
   23484:	f800283a 	ret

00023488 <_putc_r>:
   23488:	defffd04 	addi	sp,sp,-12
   2348c:	008000b4 	movhi	r2,2
   23490:	dc000115 	stw	r16,4(sp)
   23494:	dfc00215 	stw	ra,8(sp)
   23498:	108cca04 	addi	r2,r2,13096
   2349c:	30800115 	stw	r2,4(r6)
   234a0:	008000b4 	movhi	r2,2
   234a4:	1094f004 	addi	r2,r2,21440
   234a8:	11000017 	ldw	r4,0(r2)
   234ac:	2821883a 	mov	r16,r5
   234b0:	01c00044 	movi	r7,1
   234b4:	300b883a 	mov	r5,r6
   234b8:	d80d883a 	mov	r6,sp
   234bc:	dc000005 	stb	r16,0(sp)
   234c0:	00233280 	call	23328 <__sfvwrite_small_dev>
   234c4:	00ffffc4 	movi	r3,-1
   234c8:	10c00126 	beq	r2,r3,234d0 <_putc_r+0x48>
   234cc:	8005883a 	mov	r2,r16
   234d0:	dfc00217 	ldw	ra,8(sp)
   234d4:	dc000117 	ldw	r16,4(sp)
   234d8:	dec00304 	addi	sp,sp,12
   234dc:	f800283a 	ret

000234e0 <_write_r>:
   234e0:	defffd04 	addi	sp,sp,-12
   234e4:	dc000015 	stw	r16,0(sp)
   234e8:	040000b4 	movhi	r16,2
   234ec:	dc400115 	stw	r17,4(sp)
   234f0:	8415ac04 	addi	r16,r16,22192
   234f4:	2023883a 	mov	r17,r4
   234f8:	2809883a 	mov	r4,r5
   234fc:	300b883a 	mov	r5,r6
   23500:	380d883a 	mov	r6,r7
   23504:	dfc00215 	stw	ra,8(sp)
   23508:	80000015 	stw	zero,0(r16)
   2350c:	0023bb80 	call	23bb8 <write>
   23510:	00ffffc4 	movi	r3,-1
   23514:	10c0031e 	bne	r2,r3,23524 <_write_r+0x44>
   23518:	80c00017 	ldw	r3,0(r16)
   2351c:	18000126 	beq	r3,zero,23524 <_write_r+0x44>
   23520:	88c00015 	stw	r3,0(r17)
   23524:	dfc00217 	ldw	ra,8(sp)
   23528:	dc400117 	ldw	r17,4(sp)
   2352c:	dc000017 	ldw	r16,0(sp)
   23530:	dec00304 	addi	sp,sp,12
   23534:	f800283a 	ret

00023538 <__muldi3>:
   23538:	defff604 	addi	sp,sp,-40
   2353c:	dd800615 	stw	r22,24(sp)
   23540:	dd400515 	stw	r21,20(sp)
   23544:	dc400115 	stw	r17,4(sp)
   23548:	357fffcc 	andi	r21,r6,65535
   2354c:	2022d43a 	srli	r17,r4,16
   23550:	25bfffcc 	andi	r22,r4,65535
   23554:	dcc00315 	stw	r19,12(sp)
   23558:	dc800215 	stw	r18,8(sp)
   2355c:	2027883a 	mov	r19,r4
   23560:	2825883a 	mov	r18,r5
   23564:	b009883a 	mov	r4,r22
   23568:	a80b883a 	mov	r5,r21
   2356c:	dfc00915 	stw	ra,36(sp)
   23570:	df000815 	stw	fp,32(sp)
   23574:	ddc00715 	stw	r23,28(sp)
   23578:	3839883a 	mov	fp,r7
   2357c:	302ed43a 	srli	r23,r6,16
   23580:	dd000415 	stw	r20,16(sp)
   23584:	dc000015 	stw	r16,0(sp)
   23588:	3029883a 	mov	r20,r6
   2358c:	0022b040 	call	22b04 <__mulsi3>
   23590:	a80b883a 	mov	r5,r21
   23594:	8809883a 	mov	r4,r17
   23598:	1021883a 	mov	r16,r2
   2359c:	0022b040 	call	22b04 <__mulsi3>
   235a0:	8809883a 	mov	r4,r17
   235a4:	b80b883a 	mov	r5,r23
   235a8:	102b883a 	mov	r21,r2
   235ac:	0022b040 	call	22b04 <__mulsi3>
   235b0:	b80b883a 	mov	r5,r23
   235b4:	b009883a 	mov	r4,r22
   235b8:	1023883a 	mov	r17,r2
   235bc:	0022b040 	call	22b04 <__mulsi3>
   235c0:	8006d43a 	srli	r3,r16,16
   235c4:	1545883a 	add	r2,r2,r21
   235c8:	1885883a 	add	r2,r3,r2
   235cc:	1540022e 	bgeu	r2,r21,235d8 <__muldi3+0xa0>
   235d0:	00c00074 	movhi	r3,1
   235d4:	88e3883a 	add	r17,r17,r3
   235d8:	1006d43a 	srli	r3,r2,16
   235dc:	1004943a 	slli	r2,r2,16
   235e0:	e00b883a 	mov	r5,fp
   235e4:	9809883a 	mov	r4,r19
   235e8:	843fffcc 	andi	r16,r16,65535
   235ec:	1c63883a 	add	r17,r3,r17
   235f0:	1421883a 	add	r16,r2,r16
   235f4:	0022b040 	call	22b04 <__mulsi3>
   235f8:	900b883a 	mov	r5,r18
   235fc:	a009883a 	mov	r4,r20
   23600:	1027883a 	mov	r19,r2
   23604:	0022b040 	call	22b04 <__mulsi3>
   23608:	9885883a 	add	r2,r19,r2
   2360c:	1447883a 	add	r3,r2,r17
   23610:	8005883a 	mov	r2,r16
   23614:	dfc00917 	ldw	ra,36(sp)
   23618:	df000817 	ldw	fp,32(sp)
   2361c:	ddc00717 	ldw	r23,28(sp)
   23620:	dd800617 	ldw	r22,24(sp)
   23624:	dd400517 	ldw	r21,20(sp)
   23628:	dd000417 	ldw	r20,16(sp)
   2362c:	dcc00317 	ldw	r19,12(sp)
   23630:	dc800217 	ldw	r18,8(sp)
   23634:	dc400117 	ldw	r17,4(sp)
   23638:	dc000017 	ldw	r16,0(sp)
   2363c:	dec00a04 	addi	sp,sp,40
   23640:	f800283a 	ret

00023644 <alt_getchar>:
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
   23644:	defffd04 	addi	sp,sp,-12
   23648:	dfc00215 	stw	ra,8(sp)
   2364c:	df000115 	stw	fp,4(sp)
   23650:	df000104 	addi	fp,sp,4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   23654:	008000b4 	movhi	r2,2
   23658:	10948e04 	addi	r2,r2,21048
   2365c:	10800217 	ldw	r2,8(r2)
   23660:	100f883a 	mov	r7,r2
   23664:	01800044 	movi	r6,1
   23668:	e17fff04 	addi	r5,fp,-4
   2366c:	010000b4 	movhi	r4,2
   23670:	2114f304 	addi	r4,r4,21452
   23674:	0023cd00 	call	23cd0 <altera_avalon_jtag_uart_read>
   23678:	00800216 	blt	zero,r2,23684 <alt_getchar+0x40>
        return -1;
   2367c:	00bfffc4 	movi	r2,-1
   23680:	00000406 	br	23694 <alt_getchar+0x50>
    }
    return c;
   23684:	e0bfff03 	ldbu	r2,-4(fp)
   23688:	10803fcc 	andi	r2,r2,255
   2368c:	1080201c 	xori	r2,r2,128
   23690:	10bfe004 	addi	r2,r2,-128
#else
    return getchar();
#endif
#endif
}
   23694:	e037883a 	mov	sp,fp
   23698:	dfc00117 	ldw	ra,4(sp)
   2369c:	df000017 	ldw	fp,0(sp)
   236a0:	dec00204 	addi	sp,sp,8
   236a4:	f800283a 	ret

000236a8 <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
   236a8:	defff404 	addi	sp,sp,-48
   236ac:	dfc00b15 	stw	ra,44(sp)
   236b0:	df000a15 	stw	fp,40(sp)
   236b4:	dd000915 	stw	r20,36(sp)
   236b8:	dcc00815 	stw	r19,32(sp)
   236bc:	dc800715 	stw	r18,28(sp)
   236c0:	dc400615 	stw	r17,24(sp)
   236c4:	dc000515 	stw	r16,20(sp)
   236c8:	df000a04 	addi	fp,sp,40
   236cc:	e13ff915 	stw	r4,-28(fp)
   236d0:	e17ffa15 	stw	r5,-24(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
   236d4:	e0bffa17 	ldw	r2,-24(fp)
   236d8:	e0bff615 	stw	r2,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   236dc:	d0a0c717 	ldw	r2,-31972(gp)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
   236e0:	e0bff715 	stw	r2,-36(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   236e4:	d0a0c617 	ldw	r2,-31976(gp)
  alt_u32 tick_rate = alt_ticks_per_second ();
   236e8:	e0bff815 	stw	r2,-32(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
   236ec:	e0bff817 	ldw	r2,-32(fp)
   236f0:	10005f26 	beq	r2,zero,23870 <gettimeofday+0x1c8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
   236f4:	d0a0c117 	ldw	r2,-31996(gp)
   236f8:	1029883a 	mov	r20,r2
   236fc:	e17ff817 	ldw	r5,-32(fp)
   23700:	e13ff717 	ldw	r4,-36(fp)
   23704:	0022a480 	call	22a48 <__udivsi3>
   23708:	a085883a 	add	r2,r20,r2
   2370c:	1007883a 	mov	r3,r2
   23710:	e0bff917 	ldw	r2,-28(fp)
   23714:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
   23718:	d0a0c217 	ldw	r2,-31992(gp)
   2371c:	1029883a 	mov	r20,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
   23720:	e0bff717 	ldw	r2,-36(fp)
   23724:	1021883a 	mov	r16,r2
   23728:	0023883a 	mov	r17,zero
   2372c:	e17ff817 	ldw	r5,-32(fp)
   23730:	010003f4 	movhi	r4,15
   23734:	21109004 	addi	r4,r4,16960
   23738:	0022a480 	call	22a48 <__udivsi3>
   2373c:	1025883a 	mov	r18,r2
   23740:	0027883a 	mov	r19,zero
   23744:	900d883a 	mov	r6,r18
   23748:	980f883a 	mov	r7,r19
   2374c:	8009883a 	mov	r4,r16
   23750:	880b883a 	mov	r5,r17
   23754:	00235380 	call	23538 <__muldi3>
   23758:	1009883a 	mov	r4,r2
   2375c:	180b883a 	mov	r5,r3
   23760:	2005883a 	mov	r2,r4
   23764:	2807883a 	mov	r3,r5
   23768:	018003f4 	movhi	r6,15
   2376c:	31909004 	addi	r6,r6,16960
   23770:	000f883a 	mov	r7,zero
   23774:	1009883a 	mov	r4,r2
   23778:	180b883a 	mov	r5,r3
   2377c:	00245400 	call	24540 <__umoddi3>
   23780:	1009883a 	mov	r4,r2
   23784:	180b883a 	mov	r5,r3
   23788:	2005883a 	mov	r2,r4
   2378c:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
   23790:	a085883a 	add	r2,r20,r2
   23794:	1007883a 	mov	r3,r2
   23798:	e0bff917 	ldw	r2,-28(fp)
   2379c:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
   237a0:	00001406 	br	237f4 <gettimeofday+0x14c>
      if (ptimeval->tv_sec <= 0)
   237a4:	e0bff917 	ldw	r2,-28(fp)
   237a8:	10800017 	ldw	r2,0(r2)
   237ac:	00800516 	blt	zero,r2,237c4 <gettimeofday+0x11c>
      {
          ptimeval->tv_sec = 0;
   237b0:	e0bff917 	ldw	r2,-28(fp)
   237b4:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
   237b8:	e0bff917 	ldw	r2,-28(fp)
   237bc:	10000115 	stw	zero,4(r2)
          break;
   237c0:	00000f06 	br	23800 <gettimeofday+0x158>
      }
      else
      {
          ptimeval->tv_sec--;
   237c4:	e0bff917 	ldw	r2,-28(fp)
   237c8:	10800017 	ldw	r2,0(r2)
   237cc:	10ffffc4 	addi	r3,r2,-1
   237d0:	e0bff917 	ldw	r2,-28(fp)
   237d4:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
   237d8:	e0bff917 	ldw	r2,-28(fp)
   237dc:	10c00117 	ldw	r3,4(r2)
   237e0:	008003f4 	movhi	r2,15
   237e4:	10909004 	addi	r2,r2,16960
   237e8:	1887883a 	add	r3,r3,r2
   237ec:	e0bff917 	ldw	r2,-28(fp)
   237f0:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
   237f4:	e0bff917 	ldw	r2,-28(fp)
   237f8:	10800117 	ldw	r2,4(r2)
   237fc:	103fe916 	blt	r2,zero,237a4 <__alt_data_end+0xfffef7a4>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
   23800:	00000c06 	br	23834 <gettimeofday+0x18c>
      ptimeval->tv_sec++;
   23804:	e0bff917 	ldw	r2,-28(fp)
   23808:	10800017 	ldw	r2,0(r2)
   2380c:	10c00044 	addi	r3,r2,1
   23810:	e0bff917 	ldw	r2,-28(fp)
   23814:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
   23818:	e0bff917 	ldw	r2,-28(fp)
   2381c:	10c00117 	ldw	r3,4(r2)
   23820:	00bffc74 	movhi	r2,65521
   23824:	10af7004 	addi	r2,r2,-16960
   23828:	1887883a 	add	r3,r3,r2
   2382c:	e0bff917 	ldw	r2,-28(fp)
   23830:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
   23834:	e0bff917 	ldw	r2,-28(fp)
   23838:	10c00117 	ldw	r3,4(r2)
   2383c:	008003f4 	movhi	r2,15
   23840:	10908fc4 	addi	r2,r2,16959
   23844:	10ffef16 	blt	r2,r3,23804 <__alt_data_end+0xfffef804>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
   23848:	e0bff617 	ldw	r2,-40(fp)
   2384c:	10000626 	beq	r2,zero,23868 <gettimeofday+0x1c0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
   23850:	d0e0bf17 	ldw	r3,-32004(gp)
   23854:	e0bff617 	ldw	r2,-40(fp)
   23858:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
   2385c:	d0e0c017 	ldw	r3,-32000(gp)
   23860:	e0bff617 	ldw	r2,-40(fp)
   23864:	10c00115 	stw	r3,4(r2)
    }

    return 0;
   23868:	0005883a 	mov	r2,zero
   2386c:	00000106 	br	23874 <gettimeofday+0x1cc>
  }

  return -ENOTSUP;
   23870:	00bfde84 	movi	r2,-134
}
   23874:	e6fffb04 	addi	sp,fp,-20
   23878:	dfc00617 	ldw	ra,24(sp)
   2387c:	df000517 	ldw	fp,20(sp)
   23880:	dd000417 	ldw	r20,16(sp)
   23884:	dcc00317 	ldw	r19,12(sp)
   23888:	dc800217 	ldw	r18,8(sp)
   2388c:	dc400117 	ldw	r17,4(sp)
   23890:	dc000017 	ldw	r16,0(sp)
   23894:	dec00704 	addi	sp,sp,28
   23898:	f800283a 	ret

0002389c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   2389c:	defffc04 	addi	sp,sp,-16
   238a0:	df000315 	stw	fp,12(sp)
   238a4:	df000304 	addi	fp,sp,12
   238a8:	e13ffd15 	stw	r4,-12(fp)
   238ac:	e17ffe15 	stw	r5,-8(fp)
   238b0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   238b4:	e0fffe17 	ldw	r3,-8(fp)
   238b8:	e0bffd17 	ldw	r2,-12(fp)
   238bc:	18800c26 	beq	r3,r2,238f0 <alt_load_section+0x54>
  {
    while( to != end )
   238c0:	00000806 	br	238e4 <alt_load_section+0x48>
    {
      *to++ = *from++;
   238c4:	e0bffe17 	ldw	r2,-8(fp)
   238c8:	10c00104 	addi	r3,r2,4
   238cc:	e0fffe15 	stw	r3,-8(fp)
   238d0:	e0fffd17 	ldw	r3,-12(fp)
   238d4:	19000104 	addi	r4,r3,4
   238d8:	e13ffd15 	stw	r4,-12(fp)
   238dc:	18c00017 	ldw	r3,0(r3)
   238e0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   238e4:	e0fffe17 	ldw	r3,-8(fp)
   238e8:	e0bfff17 	ldw	r2,-4(fp)
   238ec:	18bff51e 	bne	r3,r2,238c4 <__alt_data_end+0xfffef8c4>
    {
      *to++ = *from++;
    }
  }
}
   238f0:	0001883a 	nop
   238f4:	e037883a 	mov	sp,fp
   238f8:	df000017 	ldw	fp,0(sp)
   238fc:	dec00104 	addi	sp,sp,4
   23900:	f800283a 	ret

00023904 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   23904:	defffe04 	addi	sp,sp,-8
   23908:	dfc00115 	stw	ra,4(sp)
   2390c:	df000015 	stw	fp,0(sp)
   23910:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   23914:	018000b4 	movhi	r6,2
   23918:	3194fb04 	addi	r6,r6,21484
   2391c:	014000b4 	movhi	r5,2
   23920:	29544c04 	addi	r5,r5,20784
   23924:	010000b4 	movhi	r4,2
   23928:	2114fb04 	addi	r4,r4,21484
   2392c:	002389c0 	call	2389c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   23930:	018000b4 	movhi	r6,2
   23934:	31807004 	addi	r6,r6,448
   23938:	014000b4 	movhi	r5,2
   2393c:	29400804 	addi	r5,r5,32
   23940:	010000b4 	movhi	r4,2
   23944:	21000804 	addi	r4,r4,32
   23948:	002389c0 	call	2389c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   2394c:	018000b4 	movhi	r6,2
   23950:	31944c04 	addi	r6,r6,20784
   23954:	014000b4 	movhi	r5,2
   23958:	2952ce04 	addi	r5,r5,19256
   2395c:	010000b4 	movhi	r4,2
   23960:	2112ce04 	addi	r4,r4,19256
   23964:	002389c0 	call	2389c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   23968:	0023fbc0 	call	23fbc <alt_dcache_flush_all>
  alt_icache_flush_all();
   2396c:	00240080 	call	24008 <alt_icache_flush_all>
}
   23970:	0001883a 	nop
   23974:	e037883a 	mov	sp,fp
   23978:	dfc00117 	ldw	ra,4(sp)
   2397c:	df000017 	ldw	fp,0(sp)
   23980:	dec00204 	addi	sp,sp,8
   23984:	f800283a 	ret

00023988 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   23988:	defffd04 	addi	sp,sp,-12
   2398c:	dfc00215 	stw	ra,8(sp)
   23990:	df000115 	stw	fp,4(sp)
   23994:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   23998:	0009883a 	mov	r4,zero
   2399c:	0023c540 	call	23c54 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   239a0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   239a4:	0023c8c0 	call	23c8c <alt_sys_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   239a8:	d0a0c317 	ldw	r2,-31988(gp)
   239ac:	d0e0c417 	ldw	r3,-31984(gp)
   239b0:	d120c517 	ldw	r4,-31980(gp)
   239b4:	200d883a 	mov	r6,r4
   239b8:	180b883a 	mov	r5,r3
   239bc:	1009883a 	mov	r4,r2
   239c0:	002271c0 	call	2271c <main>
   239c4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   239c8:	01000044 	movi	r4,1
   239cc:	0023f800 	call	23f80 <close>
  exit (result);
   239d0:	e13fff17 	ldw	r4,-4(fp)
   239d4:	00243900 	call	24390 <exit>

000239d8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   239d8:	defffa04 	addi	sp,sp,-24
   239dc:	df000515 	stw	fp,20(sp)
   239e0:	df000504 	addi	fp,sp,20
   239e4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   239e8:	0005303a 	rdctl	r2,status
   239ec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   239f0:	e0fffc17 	ldw	r3,-16(fp)
   239f4:	00bfff84 	movi	r2,-2
   239f8:	1884703a 	and	r2,r3,r2
   239fc:	1001703a 	wrctl	status,r2
  
  return context;
   23a00:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   23a04:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   23a08:	e0bfff17 	ldw	r2,-4(fp)
   23a0c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   23a10:	e0bffd17 	ldw	r2,-12(fp)
   23a14:	10800017 	ldw	r2,0(r2)
   23a18:	e0fffd17 	ldw	r3,-12(fp)
   23a1c:	18c00117 	ldw	r3,4(r3)
   23a20:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   23a24:	e0bffd17 	ldw	r2,-12(fp)
   23a28:	10800117 	ldw	r2,4(r2)
   23a2c:	e0fffd17 	ldw	r3,-12(fp)
   23a30:	18c00017 	ldw	r3,0(r3)
   23a34:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   23a38:	e0bffd17 	ldw	r2,-12(fp)
   23a3c:	e0fffd17 	ldw	r3,-12(fp)
   23a40:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   23a44:	e0bffd17 	ldw	r2,-12(fp)
   23a48:	e0fffd17 	ldw	r3,-12(fp)
   23a4c:	10c00015 	stw	r3,0(r2)
   23a50:	e0bffb17 	ldw	r2,-20(fp)
   23a54:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23a58:	e0bffe17 	ldw	r2,-8(fp)
   23a5c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   23a60:	0001883a 	nop
   23a64:	e037883a 	mov	sp,fp
   23a68:	df000017 	ldw	fp,0(sp)
   23a6c:	dec00104 	addi	sp,sp,4
   23a70:	f800283a 	ret

00023a74 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   23a74:	defffb04 	addi	sp,sp,-20
   23a78:	dfc00415 	stw	ra,16(sp)
   23a7c:	df000315 	stw	fp,12(sp)
   23a80:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   23a84:	d0a00317 	ldw	r2,-32756(gp)
   23a88:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   23a8c:	d0a0c717 	ldw	r2,-31972(gp)
   23a90:	10800044 	addi	r2,r2,1
   23a94:	d0a0c715 	stw	r2,-31972(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   23a98:	00002e06 	br	23b54 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   23a9c:	e0bffd17 	ldw	r2,-12(fp)
   23aa0:	10800017 	ldw	r2,0(r2)
   23aa4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   23aa8:	e0bffd17 	ldw	r2,-12(fp)
   23aac:	10800403 	ldbu	r2,16(r2)
   23ab0:	10803fcc 	andi	r2,r2,255
   23ab4:	10000426 	beq	r2,zero,23ac8 <alt_tick+0x54>
   23ab8:	d0a0c717 	ldw	r2,-31972(gp)
   23abc:	1000021e 	bne	r2,zero,23ac8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   23ac0:	e0bffd17 	ldw	r2,-12(fp)
   23ac4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   23ac8:	e0bffd17 	ldw	r2,-12(fp)
   23acc:	10800217 	ldw	r2,8(r2)
   23ad0:	d0e0c717 	ldw	r3,-31972(gp)
   23ad4:	18801d36 	bltu	r3,r2,23b4c <alt_tick+0xd8>
   23ad8:	e0bffd17 	ldw	r2,-12(fp)
   23adc:	10800403 	ldbu	r2,16(r2)
   23ae0:	10803fcc 	andi	r2,r2,255
   23ae4:	1000191e 	bne	r2,zero,23b4c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   23ae8:	e0bffd17 	ldw	r2,-12(fp)
   23aec:	10800317 	ldw	r2,12(r2)
   23af0:	e0fffd17 	ldw	r3,-12(fp)
   23af4:	18c00517 	ldw	r3,20(r3)
   23af8:	1809883a 	mov	r4,r3
   23afc:	103ee83a 	callr	r2
   23b00:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   23b04:	e0bfff17 	ldw	r2,-4(fp)
   23b08:	1000031e 	bne	r2,zero,23b18 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   23b0c:	e13ffd17 	ldw	r4,-12(fp)
   23b10:	00239d80 	call	239d8 <alt_alarm_stop>
   23b14:	00000d06 	br	23b4c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   23b18:	e0bffd17 	ldw	r2,-12(fp)
   23b1c:	10c00217 	ldw	r3,8(r2)
   23b20:	e0bfff17 	ldw	r2,-4(fp)
   23b24:	1887883a 	add	r3,r3,r2
   23b28:	e0bffd17 	ldw	r2,-12(fp)
   23b2c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   23b30:	e0bffd17 	ldw	r2,-12(fp)
   23b34:	10c00217 	ldw	r3,8(r2)
   23b38:	d0a0c717 	ldw	r2,-31972(gp)
   23b3c:	1880032e 	bgeu	r3,r2,23b4c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   23b40:	e0bffd17 	ldw	r2,-12(fp)
   23b44:	00c00044 	movi	r3,1
   23b48:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   23b4c:	e0bffe17 	ldw	r2,-8(fp)
   23b50:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   23b54:	e0fffd17 	ldw	r3,-12(fp)
   23b58:	d0a00304 	addi	r2,gp,-32756
   23b5c:	18bfcf1e 	bne	r3,r2,23a9c <__alt_data_end+0xfffefa9c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   23b60:	0001883a 	nop
}
   23b64:	0001883a 	nop
   23b68:	e037883a 	mov	sp,fp
   23b6c:	dfc00117 	ldw	ra,4(sp)
   23b70:	df000017 	ldw	fp,0(sp)
   23b74:	dec00204 	addi	sp,sp,8
   23b78:	f800283a 	ret

00023b7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23b7c:	defffe04 	addi	sp,sp,-8
   23b80:	dfc00115 	stw	ra,4(sp)
   23b84:	df000015 	stw	fp,0(sp)
   23b88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23b8c:	d0a00b17 	ldw	r2,-32724(gp)
   23b90:	10000326 	beq	r2,zero,23ba0 <alt_get_errno+0x24>
   23b94:	d0a00b17 	ldw	r2,-32724(gp)
   23b98:	103ee83a 	callr	r2
   23b9c:	00000106 	br	23ba4 <alt_get_errno+0x28>
   23ba0:	d0a0be04 	addi	r2,gp,-32008
}
   23ba4:	e037883a 	mov	sp,fp
   23ba8:	dfc00117 	ldw	ra,4(sp)
   23bac:	df000017 	ldw	fp,0(sp)
   23bb0:	dec00204 	addi	sp,sp,8
   23bb4:	f800283a 	ret

00023bb8 <write>:
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   23bb8:	defffb04 	addi	sp,sp,-20
   23bbc:	dfc00415 	stw	ra,16(sp)
   23bc0:	df000315 	stw	fp,12(sp)
   23bc4:	df000304 	addi	fp,sp,12
   23bc8:	e13ffd15 	stw	r4,-12(fp)
   23bcc:	e17ffe15 	stw	r5,-8(fp)
   23bd0:	e1bfff15 	stw	r6,-4(fp)
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   23bd4:	e0bffd17 	ldw	r2,-12(fp)
   23bd8:	10c00060 	cmpeqi	r3,r2,1
   23bdc:	1800031e 	bne	r3,zero,23bec <write+0x34>
   23be0:	108000a0 	cmpeqi	r2,r2,2
   23be4:	1000091e 	bne	r2,zero,23c0c <write+0x54>
   23be8:	00001006 	br	23c2c <write+0x74>
#ifdef ALT_STDOUT_PRESENT
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
   23bec:	e0bfff17 	ldw	r2,-4(fp)
   23bf0:	000f883a 	mov	r7,zero
   23bf4:	100d883a 	mov	r6,r2
   23bf8:	e17ffe17 	ldw	r5,-8(fp)
   23bfc:	010000b4 	movhi	r4,2
   23c00:	2114f304 	addi	r4,r4,21452
   23c04:	0023dbc0 	call	23dbc <altera_avalon_jtag_uart_write>
   23c08:	00000d06 	br	23c40 <write+0x88>
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   23c0c:	e0bfff17 	ldw	r2,-4(fp)
   23c10:	000f883a 	mov	r7,zero
   23c14:	100d883a 	mov	r6,r2
   23c18:	e17ffe17 	ldw	r5,-8(fp)
   23c1c:	010000b4 	movhi	r4,2
   23c20:	2114f304 	addi	r4,r4,21452
   23c24:	0023dbc0 	call	23dbc <altera_avalon_jtag_uart_write>
   23c28:	00000506 	br	23c40 <write+0x88>
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   23c2c:	0023b7c0 	call	23b7c <alt_get_errno>
   23c30:	1007883a 	mov	r3,r2
   23c34:	00801444 	movi	r2,81
   23c38:	18800015 	stw	r2,0(r3)
        return -1;
   23c3c:	00bfffc4 	movi	r2,-1
    }
}
   23c40:	e037883a 	mov	sp,fp
   23c44:	dfc00117 	ldw	ra,4(sp)
   23c48:	df000017 	ldw	fp,0(sp)
   23c4c:	dec00204 	addi	sp,sp,8
   23c50:	f800283a 	ret

00023c54 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   23c54:	defffd04 	addi	sp,sp,-12
   23c58:	dfc00215 	stw	ra,8(sp)
   23c5c:	df000115 	stw	fp,4(sp)
   23c60:	df000104 	addi	fp,sp,4
   23c64:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
   23c68:	00242dc0 	call	242dc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   23c6c:	00800044 	movi	r2,1
   23c70:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   23c74:	0001883a 	nop
   23c78:	e037883a 	mov	sp,fp
   23c7c:	dfc00117 	ldw	ra,4(sp)
   23c80:	df000017 	ldw	fp,0(sp)
   23c84:	dec00204 	addi	sp,sp,8
   23c88:	f800283a 	ret

00023c8c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   23c8c:	defffe04 	addi	sp,sp,-8
   23c90:	dfc00115 	stw	ra,4(sp)
   23c94:	df000015 	stw	fp,0(sp)
   23c98:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
   23c9c:	01c0fa04 	movi	r7,1000
   23ca0:	01800044 	movi	r6,1
   23ca4:	000b883a 	mov	r5,zero
   23ca8:	01000134 	movhi	r4,4
   23cac:	21040004 	addi	r4,r4,4096
   23cb0:	0023ec80 	call	23ec8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   23cb4:	0001883a 	nop
}
   23cb8:	0001883a 	nop
   23cbc:	e037883a 	mov	sp,fp
   23cc0:	dfc00117 	ldw	ra,4(sp)
   23cc4:	df000017 	ldw	fp,0(sp)
   23cc8:	dec00204 	addi	sp,sp,8
   23ccc:	f800283a 	ret

00023cd0 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   23cd0:	defff704 	addi	sp,sp,-36
   23cd4:	df000815 	stw	fp,32(sp)
   23cd8:	df000804 	addi	fp,sp,32
   23cdc:	e13ffc15 	stw	r4,-16(fp)
   23ce0:	e17ffd15 	stw	r5,-12(fp)
   23ce4:	e1bffe15 	stw	r6,-8(fp)
   23ce8:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   23cec:	e0bffc17 	ldw	r2,-16(fp)
   23cf0:	10800017 	ldw	r2,0(r2)
   23cf4:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   23cf8:	e0bffd17 	ldw	r2,-12(fp)
   23cfc:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   23d00:	e0bffe17 	ldw	r2,-8(fp)
   23d04:	e0fffd17 	ldw	r3,-12(fp)
   23d08:	1885883a 	add	r2,r3,r2
   23d0c:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   23d10:	00001206 	br	23d5c <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   23d14:	e0bff917 	ldw	r2,-28(fp)
   23d18:	10800037 	ldwio	r2,0(r2)
   23d1c:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   23d20:	e0bffb17 	ldw	r2,-20(fp)
   23d24:	10a0000c 	andi	r2,r2,32768
   23d28:	10000626 	beq	r2,zero,23d44 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   23d2c:	e0bff817 	ldw	r2,-32(fp)
   23d30:	10c00044 	addi	r3,r2,1
   23d34:	e0fff815 	stw	r3,-32(fp)
   23d38:	e0fffb17 	ldw	r3,-20(fp)
   23d3c:	10c00005 	stb	r3,0(r2)
   23d40:	00000606 	br	23d5c <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   23d44:	e0fff817 	ldw	r3,-32(fp)
   23d48:	e0bffd17 	ldw	r2,-12(fp)
   23d4c:	1880071e 	bne	r3,r2,23d6c <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   23d50:	e0bfff17 	ldw	r2,-4(fp)
   23d54:	1090000c 	andi	r2,r2,16384
   23d58:	1000061e 	bne	r2,zero,23d74 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   23d5c:	e0fff817 	ldw	r3,-32(fp)
   23d60:	e0bffa17 	ldw	r2,-24(fp)
   23d64:	18bfeb36 	bltu	r3,r2,23d14 <__alt_data_end+0xfffefd14>
   23d68:	00000306 	br	23d78 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   23d6c:	0001883a 	nop
   23d70:	00000106 	br	23d78 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
   23d74:	0001883a 	nop
    
  }

  if (ptr != buffer)
   23d78:	e0fff817 	ldw	r3,-32(fp)
   23d7c:	e0bffd17 	ldw	r2,-12(fp)
   23d80:	18800426 	beq	r3,r2,23d94 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   23d84:	e0fff817 	ldw	r3,-32(fp)
   23d88:	e0bffd17 	ldw	r2,-12(fp)
   23d8c:	1885c83a 	sub	r2,r3,r2
   23d90:	00000606 	br	23dac <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   23d94:	e0bfff17 	ldw	r2,-4(fp)
   23d98:	1090000c 	andi	r2,r2,16384
   23d9c:	10000226 	beq	r2,zero,23da8 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   23da0:	00bffd44 	movi	r2,-11
   23da4:	00000106 	br	23dac <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   23da8:	00bffec4 	movi	r2,-5
}
   23dac:	e037883a 	mov	sp,fp
   23db0:	df000017 	ldw	fp,0(sp)
   23db4:	dec00104 	addi	sp,sp,4
   23db8:	f800283a 	ret

00023dbc <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   23dbc:	defff904 	addi	sp,sp,-28
   23dc0:	df000615 	stw	fp,24(sp)
   23dc4:	df000604 	addi	fp,sp,24
   23dc8:	e13ffc15 	stw	r4,-16(fp)
   23dcc:	e17ffd15 	stw	r5,-12(fp)
   23dd0:	e1bffe15 	stw	r6,-8(fp)
   23dd4:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   23dd8:	e0bffc17 	ldw	r2,-16(fp)
   23ddc:	10800017 	ldw	r2,0(r2)
   23de0:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   23de4:	e0bffe17 	ldw	r2,-8(fp)
   23de8:	e0fffd17 	ldw	r3,-12(fp)
   23dec:	1885883a 	add	r2,r3,r2
   23df0:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   23df4:	00000e06 	br	23e30 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   23df8:	e0bffa17 	ldw	r2,-24(fp)
   23dfc:	10800104 	addi	r2,r2,4
   23e00:	10800037 	ldwio	r2,0(r2)
   23e04:	10bfffec 	andhi	r2,r2,65535
   23e08:	10000926 	beq	r2,zero,23e30 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   23e0c:	e0fffa17 	ldw	r3,-24(fp)
   23e10:	e0bffd17 	ldw	r2,-12(fp)
   23e14:	11000044 	addi	r4,r2,1
   23e18:	e13ffd15 	stw	r4,-12(fp)
   23e1c:	10800003 	ldbu	r2,0(r2)
   23e20:	10803fcc 	andi	r2,r2,255
   23e24:	1080201c 	xori	r2,r2,128
   23e28:	10bfe004 	addi	r2,r2,-128
   23e2c:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   23e30:	e0fffd17 	ldw	r3,-12(fp)
   23e34:	e0bffb17 	ldw	r2,-20(fp)
   23e38:	18bfef36 	bltu	r3,r2,23df8 <__alt_data_end+0xfffefdf8>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   23e3c:	e0bffe17 	ldw	r2,-8(fp)
}
   23e40:	e037883a 	mov	sp,fp
   23e44:	df000017 	ldw	fp,0(sp)
   23e48:	dec00104 	addi	sp,sp,4
   23e4c:	f800283a 	ret

00023e50 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   23e50:	defffa04 	addi	sp,sp,-24
   23e54:	dfc00515 	stw	ra,20(sp)
   23e58:	df000415 	stw	fp,16(sp)
   23e5c:	df000404 	addi	fp,sp,16
   23e60:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   23e64:	0007883a 	mov	r3,zero
   23e68:	e0bfff17 	ldw	r2,-4(fp)
   23e6c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   23e70:	e0bfff17 	ldw	r2,-4(fp)
   23e74:	10800104 	addi	r2,r2,4
   23e78:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23e7c:	0005303a 	rdctl	r2,status
   23e80:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23e84:	e0fffd17 	ldw	r3,-12(fp)
   23e88:	00bfff84 	movi	r2,-2
   23e8c:	1884703a 	and	r2,r3,r2
   23e90:	1001703a 	wrctl	status,r2
  
  return context;
   23e94:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   23e98:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   23e9c:	0023a740 	call	23a74 <alt_tick>
   23ea0:	e0bffc17 	ldw	r2,-16(fp)
   23ea4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23ea8:	e0bffe17 	ldw	r2,-8(fp)
   23eac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   23eb0:	0001883a 	nop
   23eb4:	e037883a 	mov	sp,fp
   23eb8:	dfc00117 	ldw	ra,4(sp)
   23ebc:	df000017 	ldw	fp,0(sp)
   23ec0:	dec00204 	addi	sp,sp,8
   23ec4:	f800283a 	ret

00023ec8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   23ec8:	defff804 	addi	sp,sp,-32
   23ecc:	dfc00715 	stw	ra,28(sp)
   23ed0:	df000615 	stw	fp,24(sp)
   23ed4:	df000604 	addi	fp,sp,24
   23ed8:	e13ffc15 	stw	r4,-16(fp)
   23edc:	e17ffd15 	stw	r5,-12(fp)
   23ee0:	e1bffe15 	stw	r6,-8(fp)
   23ee4:	e1ffff15 	stw	r7,-4(fp)
   23ee8:	e0bfff17 	ldw	r2,-4(fp)
   23eec:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   23ef0:	d0a0c617 	ldw	r2,-31976(gp)
   23ef4:	1000021e 	bne	r2,zero,23f00 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   23ef8:	e0bffb17 	ldw	r2,-20(fp)
   23efc:	d0a0c615 	stw	r2,-31976(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   23f00:	e0bffc17 	ldw	r2,-16(fp)
   23f04:	10800104 	addi	r2,r2,4
   23f08:	00c001c4 	movi	r3,7
   23f0c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   23f10:	d8000015 	stw	zero,0(sp)
   23f14:	e1fffc17 	ldw	r7,-16(fp)
   23f18:	018000b4 	movhi	r6,2
   23f1c:	318f9404 	addi	r6,r6,15952
   23f20:	e17ffe17 	ldw	r5,-8(fp)
   23f24:	e13ffd17 	ldw	r4,-12(fp)
   23f28:	002403c0 	call	2403c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   23f2c:	0001883a 	nop
   23f30:	e037883a 	mov	sp,fp
   23f34:	dfc00117 	ldw	ra,4(sp)
   23f38:	df000017 	ldw	fp,0(sp)
   23f3c:	dec00204 	addi	sp,sp,8
   23f40:	f800283a 	ret

00023f44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23f44:	defffe04 	addi	sp,sp,-8
   23f48:	dfc00115 	stw	ra,4(sp)
   23f4c:	df000015 	stw	fp,0(sp)
   23f50:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23f54:	d0a00b17 	ldw	r2,-32724(gp)
   23f58:	10000326 	beq	r2,zero,23f68 <alt_get_errno+0x24>
   23f5c:	d0a00b17 	ldw	r2,-32724(gp)
   23f60:	103ee83a 	callr	r2
   23f64:	00000106 	br	23f6c <alt_get_errno+0x28>
   23f68:	d0a0be04 	addi	r2,gp,-32008
}
   23f6c:	e037883a 	mov	sp,fp
   23f70:	dfc00117 	ldw	ra,4(sp)
   23f74:	df000017 	ldw	fp,0(sp)
   23f78:	dec00204 	addi	sp,sp,8
   23f7c:	f800283a 	ret

00023f80 <close>:
#include "os/alt_syscall.h"

#ifdef ALT_USE_DIRECT_DRIVERS

int ALT_CLOSE (int fildes)
{
   23f80:	defffd04 	addi	sp,sp,-12
   23f84:	dfc00215 	stw	ra,8(sp)
   23f88:	df000115 	stw	fp,4(sp)
   23f8c:	df000104 	addi	fp,sp,4
   23f90:	e13fff15 	stw	r4,-4(fp)
  
  ALT_STUB_WARNING(close);
  
  /* Indicate an error */
  
  ALT_ERRNO = ENOSYS;
   23f94:	0023f440 	call	23f44 <alt_get_errno>
   23f98:	1007883a 	mov	r3,r2
   23f9c:	00801604 	movi	r2,88
   23fa0:	18800015 	stw	r2,0(r3)
  return -1;
   23fa4:	00bfffc4 	movi	r2,-1
}
   23fa8:	e037883a 	mov	sp,fp
   23fac:	dfc00117 	ldw	ra,4(sp)
   23fb0:	df000017 	ldw	fp,0(sp)
   23fb4:	dec00204 	addi	sp,sp,8
   23fb8:	f800283a 	ret

00023fbc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   23fbc:	deffff04 	addi	sp,sp,-4
   23fc0:	df000015 	stw	fp,0(sp)
   23fc4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   23fc8:	0001883a 	nop
   23fcc:	e037883a 	mov	sp,fp
   23fd0:	df000017 	ldw	fp,0(sp)
   23fd4:	dec00104 	addi	sp,sp,4
   23fd8:	f800283a 	ret

00023fdc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   23fdc:	defffc04 	addi	sp,sp,-16
   23fe0:	df000315 	stw	fp,12(sp)
   23fe4:	df000304 	addi	fp,sp,12
   23fe8:	e13ffd15 	stw	r4,-12(fp)
   23fec:	e17ffe15 	stw	r5,-8(fp)
   23ff0:	e1bfff15 	stw	r6,-4(fp)
  return len;
   23ff4:	e0bfff17 	ldw	r2,-4(fp)
}
   23ff8:	e037883a 	mov	sp,fp
   23ffc:	df000017 	ldw	fp,0(sp)
   24000:	dec00104 	addi	sp,sp,4
   24004:	f800283a 	ret

00024008 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   24008:	defffe04 	addi	sp,sp,-8
   2400c:	dfc00115 	stw	ra,4(sp)
   24010:	df000015 	stw	fp,0(sp)
   24014:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   24018:	01420004 	movi	r5,2048
   2401c:	0009883a 	mov	r4,zero
   24020:	00243000 	call	24300 <alt_icache_flush>
#endif
}
   24024:	0001883a 	nop
   24028:	e037883a 	mov	sp,fp
   2402c:	dfc00117 	ldw	ra,4(sp)
   24030:	df000017 	ldw	fp,0(sp)
   24034:	dec00204 	addi	sp,sp,8
   24038:	f800283a 	ret

0002403c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   2403c:	defff904 	addi	sp,sp,-28
   24040:	dfc00615 	stw	ra,24(sp)
   24044:	df000515 	stw	fp,20(sp)
   24048:	df000504 	addi	fp,sp,20
   2404c:	e13ffc15 	stw	r4,-16(fp)
   24050:	e17ffd15 	stw	r5,-12(fp)
   24054:	e1bffe15 	stw	r6,-8(fp)
   24058:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   2405c:	e0800217 	ldw	r2,8(fp)
   24060:	d8800015 	stw	r2,0(sp)
   24064:	e1ffff17 	ldw	r7,-4(fp)
   24068:	e1bffe17 	ldw	r6,-8(fp)
   2406c:	e17ffd17 	ldw	r5,-12(fp)
   24070:	e13ffc17 	ldw	r4,-16(fp)
   24074:	00241ec0 	call	241ec <alt_iic_isr_register>
}  
   24078:	e037883a 	mov	sp,fp
   2407c:	dfc00117 	ldw	ra,4(sp)
   24080:	df000017 	ldw	fp,0(sp)
   24084:	dec00204 	addi	sp,sp,8
   24088:	f800283a 	ret

0002408c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   2408c:	defff904 	addi	sp,sp,-28
   24090:	df000615 	stw	fp,24(sp)
   24094:	df000604 	addi	fp,sp,24
   24098:	e13ffe15 	stw	r4,-8(fp)
   2409c:	e17fff15 	stw	r5,-4(fp)
   240a0:	e0bfff17 	ldw	r2,-4(fp)
   240a4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   240a8:	0005303a 	rdctl	r2,status
   240ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   240b0:	e0fffb17 	ldw	r3,-20(fp)
   240b4:	00bfff84 	movi	r2,-2
   240b8:	1884703a 	and	r2,r3,r2
   240bc:	1001703a 	wrctl	status,r2
  
  return context;
   240c0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   240c4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   240c8:	00c00044 	movi	r3,1
   240cc:	e0bffa17 	ldw	r2,-24(fp)
   240d0:	1884983a 	sll	r2,r3,r2
   240d4:	1007883a 	mov	r3,r2
   240d8:	d0a0c817 	ldw	r2,-31968(gp)
   240dc:	1884b03a 	or	r2,r3,r2
   240e0:	d0a0c815 	stw	r2,-31968(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   240e4:	d0a0c817 	ldw	r2,-31968(gp)
   240e8:	100170fa 	wrctl	ienable,r2
   240ec:	e0bffc17 	ldw	r2,-16(fp)
   240f0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   240f4:	e0bffd17 	ldw	r2,-12(fp)
   240f8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   240fc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   24100:	0001883a 	nop
}
   24104:	e037883a 	mov	sp,fp
   24108:	df000017 	ldw	fp,0(sp)
   2410c:	dec00104 	addi	sp,sp,4
   24110:	f800283a 	ret

00024114 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   24114:	defff904 	addi	sp,sp,-28
   24118:	df000615 	stw	fp,24(sp)
   2411c:	df000604 	addi	fp,sp,24
   24120:	e13ffe15 	stw	r4,-8(fp)
   24124:	e17fff15 	stw	r5,-4(fp)
   24128:	e0bfff17 	ldw	r2,-4(fp)
   2412c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24130:	0005303a 	rdctl	r2,status
   24134:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24138:	e0fffb17 	ldw	r3,-20(fp)
   2413c:	00bfff84 	movi	r2,-2
   24140:	1884703a 	and	r2,r3,r2
   24144:	1001703a 	wrctl	status,r2
  
  return context;
   24148:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2414c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   24150:	00c00044 	movi	r3,1
   24154:	e0bffa17 	ldw	r2,-24(fp)
   24158:	1884983a 	sll	r2,r3,r2
   2415c:	0084303a 	nor	r2,zero,r2
   24160:	1007883a 	mov	r3,r2
   24164:	d0a0c817 	ldw	r2,-31968(gp)
   24168:	1884703a 	and	r2,r3,r2
   2416c:	d0a0c815 	stw	r2,-31968(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   24170:	d0a0c817 	ldw	r2,-31968(gp)
   24174:	100170fa 	wrctl	ienable,r2
   24178:	e0bffc17 	ldw	r2,-16(fp)
   2417c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24180:	e0bffd17 	ldw	r2,-12(fp)
   24184:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   24188:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   2418c:	0001883a 	nop
}
   24190:	e037883a 	mov	sp,fp
   24194:	df000017 	ldw	fp,0(sp)
   24198:	dec00104 	addi	sp,sp,4
   2419c:	f800283a 	ret

000241a0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   241a0:	defffc04 	addi	sp,sp,-16
   241a4:	df000315 	stw	fp,12(sp)
   241a8:	df000304 	addi	fp,sp,12
   241ac:	e13ffe15 	stw	r4,-8(fp)
   241b0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   241b4:	000530fa 	rdctl	r2,ienable
   241b8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   241bc:	00c00044 	movi	r3,1
   241c0:	e0bfff17 	ldw	r2,-4(fp)
   241c4:	1884983a 	sll	r2,r3,r2
   241c8:	1007883a 	mov	r3,r2
   241cc:	e0bffd17 	ldw	r2,-12(fp)
   241d0:	1884703a 	and	r2,r3,r2
   241d4:	1004c03a 	cmpne	r2,r2,zero
   241d8:	10803fcc 	andi	r2,r2,255
}
   241dc:	e037883a 	mov	sp,fp
   241e0:	df000017 	ldw	fp,0(sp)
   241e4:	dec00104 	addi	sp,sp,4
   241e8:	f800283a 	ret

000241ec <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   241ec:	defff504 	addi	sp,sp,-44
   241f0:	dfc00a15 	stw	ra,40(sp)
   241f4:	df000915 	stw	fp,36(sp)
   241f8:	df000904 	addi	fp,sp,36
   241fc:	e13ffc15 	stw	r4,-16(fp)
   24200:	e17ffd15 	stw	r5,-12(fp)
   24204:	e1bffe15 	stw	r6,-8(fp)
   24208:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   2420c:	00bffa84 	movi	r2,-22
   24210:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   24214:	e0bffd17 	ldw	r2,-12(fp)
   24218:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   2421c:	e0bff817 	ldw	r2,-32(fp)
   24220:	10800808 	cmpgei	r2,r2,32
   24224:	1000271e 	bne	r2,zero,242c4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24228:	0005303a 	rdctl	r2,status
   2422c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24230:	e0fffb17 	ldw	r3,-20(fp)
   24234:	00bfff84 	movi	r2,-2
   24238:	1884703a 	and	r2,r3,r2
   2423c:	1001703a 	wrctl	status,r2
  
  return context;
   24240:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   24244:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   24248:	008000b4 	movhi	r2,2
   2424c:	109fc504 	addi	r2,r2,32532
   24250:	e0fff817 	ldw	r3,-32(fp)
   24254:	180690fa 	slli	r3,r3,3
   24258:	10c5883a 	add	r2,r2,r3
   2425c:	e0fffe17 	ldw	r3,-8(fp)
   24260:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   24264:	008000b4 	movhi	r2,2
   24268:	109fc504 	addi	r2,r2,32532
   2426c:	e0fff817 	ldw	r3,-32(fp)
   24270:	180690fa 	slli	r3,r3,3
   24274:	10c5883a 	add	r2,r2,r3
   24278:	10800104 	addi	r2,r2,4
   2427c:	e0ffff17 	ldw	r3,-4(fp)
   24280:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   24284:	e0bffe17 	ldw	r2,-8(fp)
   24288:	10000526 	beq	r2,zero,242a0 <alt_iic_isr_register+0xb4>
   2428c:	e0bff817 	ldw	r2,-32(fp)
   24290:	100b883a 	mov	r5,r2
   24294:	e13ffc17 	ldw	r4,-16(fp)
   24298:	002408c0 	call	2408c <alt_ic_irq_enable>
   2429c:	00000406 	br	242b0 <alt_iic_isr_register+0xc4>
   242a0:	e0bff817 	ldw	r2,-32(fp)
   242a4:	100b883a 	mov	r5,r2
   242a8:	e13ffc17 	ldw	r4,-16(fp)
   242ac:	00241140 	call	24114 <alt_ic_irq_disable>
   242b0:	e0bff715 	stw	r2,-36(fp)
   242b4:	e0bffa17 	ldw	r2,-24(fp)
   242b8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   242bc:	e0bff917 	ldw	r2,-28(fp)
   242c0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   242c4:	e0bff717 	ldw	r2,-36(fp)
}
   242c8:	e037883a 	mov	sp,fp
   242cc:	dfc00117 	ldw	ra,4(sp)
   242d0:	df000017 	ldw	fp,0(sp)
   242d4:	dec00204 	addi	sp,sp,8
   242d8:	f800283a 	ret

000242dc <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   242dc:	deffff04 	addi	sp,sp,-4
   242e0:	df000015 	stw	fp,0(sp)
   242e4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   242e8:	000170fa 	wrctl	ienable,zero
}
   242ec:	0001883a 	nop
   242f0:	e037883a 	mov	sp,fp
   242f4:	df000017 	ldw	fp,0(sp)
   242f8:	dec00104 	addi	sp,sp,4
   242fc:	f800283a 	ret

00024300 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   24300:	defffb04 	addi	sp,sp,-20
   24304:	df000415 	stw	fp,16(sp)
   24308:	df000404 	addi	fp,sp,16
   2430c:	e13ffe15 	stw	r4,-8(fp)
   24310:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   24314:	e0bfff17 	ldw	r2,-4(fp)
   24318:	10820070 	cmpltui	r2,r2,2049
   2431c:	1000021e 	bne	r2,zero,24328 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   24320:	00820004 	movi	r2,2048
   24324:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   24328:	e0fffe17 	ldw	r3,-8(fp)
   2432c:	e0bfff17 	ldw	r2,-4(fp)
   24330:	1885883a 	add	r2,r3,r2
   24334:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   24338:	e0bffe17 	ldw	r2,-8(fp)
   2433c:	e0bffc15 	stw	r2,-16(fp)
   24340:	00000506 	br	24358 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   24344:	e0bffc17 	ldw	r2,-16(fp)
   24348:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   2434c:	e0bffc17 	ldw	r2,-16(fp)
   24350:	10800804 	addi	r2,r2,32
   24354:	e0bffc15 	stw	r2,-16(fp)
   24358:	e0fffc17 	ldw	r3,-16(fp)
   2435c:	e0bffd17 	ldw	r2,-12(fp)
   24360:	18bff836 	bltu	r3,r2,24344 <__alt_data_end+0xffff0344>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   24364:	e0bffe17 	ldw	r2,-8(fp)
   24368:	108007cc 	andi	r2,r2,31
   2436c:	10000226 	beq	r2,zero,24378 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   24370:	e0bffc17 	ldw	r2,-16(fp)
   24374:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   24378:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   2437c:	0001883a 	nop
   24380:	e037883a 	mov	sp,fp
   24384:	df000017 	ldw	fp,0(sp)
   24388:	dec00104 	addi	sp,sp,4
   2438c:	f800283a 	ret

00024390 <exit>:
   24390:	defffe04 	addi	sp,sp,-8
   24394:	000b883a 	mov	r5,zero
   24398:	dc000015 	stw	r16,0(sp)
   2439c:	dfc00115 	stw	ra,4(sp)
   243a0:	2021883a 	mov	r16,r4
   243a4:	00243b00 	call	243b0 <__call_exitprocs>
   243a8:	8009883a 	mov	r4,r16
   243ac:	0024b040 	call	24b04 <_exit>

000243b0 <__call_exitprocs>:
   243b0:	defff504 	addi	sp,sp,-44
   243b4:	dd000515 	stw	r20,20(sp)
   243b8:	050000b4 	movhi	r20,2
   243bc:	dc800315 	stw	r18,12(sp)
   243c0:	dfc00a15 	stw	ra,40(sp)
   243c4:	df000915 	stw	fp,36(sp)
   243c8:	ddc00815 	stw	r23,32(sp)
   243cc:	dd800715 	stw	r22,28(sp)
   243d0:	dd400615 	stw	r21,24(sp)
   243d4:	dcc00415 	stw	r19,16(sp)
   243d8:	dc400215 	stw	r17,8(sp)
   243dc:	dc000115 	stw	r16,4(sp)
   243e0:	d9000015 	stw	r4,0(sp)
   243e4:	2825883a 	mov	r18,r5
   243e8:	a514ef04 	addi	r20,r20,21436
   243ec:	a4400017 	ldw	r17,0(r20)
   243f0:	8cc00c17 	ldw	r19,48(r17)
   243f4:	8c400c04 	addi	r17,r17,48
   243f8:	98004526 	beq	r19,zero,24510 <__call_exitprocs+0x160>
   243fc:	9c000117 	ldw	r16,4(r19)
   24400:	00900034 	movhi	r2,16384
   24404:	10bfffc4 	addi	r2,r2,-1
   24408:	9d402217 	ldw	r21,136(r19)
   2440c:	85bfffc4 	addi	r22,r16,-1
   24410:	80a1883a 	add	r16,r16,r2
   24414:	8421883a 	add	r16,r16,r16
   24418:	8421883a 	add	r16,r16,r16
   2441c:	ac2f883a 	add	r23,r21,r16
   24420:	84000204 	addi	r16,r16,8
   24424:	9c21883a 	add	r16,r19,r16
   24428:	b0002716 	blt	r22,zero,244c8 <__call_exitprocs+0x118>
   2442c:	90000726 	beq	r18,zero,2444c <__call_exitprocs+0x9c>
   24430:	a800041e 	bne	r21,zero,24444 <__call_exitprocs+0x94>
   24434:	b5bfffc4 	addi	r22,r22,-1
   24438:	bdffff04 	addi	r23,r23,-4
   2443c:	843fff04 	addi	r16,r16,-4
   24440:	003ff906 	br	24428 <__alt_data_end+0xffff0428>
   24444:	b9002017 	ldw	r4,128(r23)
   24448:	913ffa1e 	bne	r18,r4,24434 <__alt_data_end+0xffff0434>
   2444c:	99000117 	ldw	r4,4(r19)
   24450:	82000017 	ldw	r8,0(r16)
   24454:	213fffc4 	addi	r4,r4,-1
   24458:	b100021e 	bne	r22,r4,24464 <__call_exitprocs+0xb4>
   2445c:	9d800115 	stw	r22,4(r19)
   24460:	00000106 	br	24468 <__call_exitprocs+0xb8>
   24464:	80000015 	stw	zero,0(r16)
   24468:	403ff226 	beq	r8,zero,24434 <__alt_data_end+0xffff0434>
   2446c:	9f000117 	ldw	fp,4(r19)
   24470:	a8000526 	beq	r21,zero,24488 <__call_exitprocs+0xd8>
   24474:	00800044 	movi	r2,1
   24478:	1592983a 	sll	r9,r2,r22
   2447c:	a9404017 	ldw	r5,256(r21)
   24480:	494a703a 	and	r5,r9,r5
   24484:	2800021e 	bne	r5,zero,24490 <__call_exitprocs+0xe0>
   24488:	403ee83a 	callr	r8
   2448c:	00000906 	br	244b4 <__call_exitprocs+0x104>
   24490:	a9004117 	ldw	r4,260(r21)
   24494:	4908703a 	and	r4,r9,r4
   24498:	2000041e 	bne	r4,zero,244ac <__call_exitprocs+0xfc>
   2449c:	b9400017 	ldw	r5,0(r23)
   244a0:	d9000017 	ldw	r4,0(sp)
   244a4:	403ee83a 	callr	r8
   244a8:	00000206 	br	244b4 <__call_exitprocs+0x104>
   244ac:	b9000017 	ldw	r4,0(r23)
   244b0:	403ee83a 	callr	r8
   244b4:	99000117 	ldw	r4,4(r19)
   244b8:	e13fcc1e 	bne	fp,r4,243ec <__alt_data_end+0xffff03ec>
   244bc:	89000017 	ldw	r4,0(r17)
   244c0:	993fdc26 	beq	r19,r4,24434 <__alt_data_end+0xffff0434>
   244c4:	003fc906 	br	243ec <__alt_data_end+0xffff03ec>
   244c8:	00800034 	movhi	r2,0
   244cc:	10800004 	addi	r2,r2,0
   244d0:	10000f26 	beq	r2,zero,24510 <__call_exitprocs+0x160>
   244d4:	99400117 	ldw	r5,4(r19)
   244d8:	99000017 	ldw	r4,0(r19)
   244dc:	2800091e 	bne	r5,zero,24504 <__call_exitprocs+0x154>
   244e0:	20000826 	beq	r4,zero,24504 <__call_exitprocs+0x154>
   244e4:	89000015 	stw	r4,0(r17)
   244e8:	a8000226 	beq	r21,zero,244f4 <__call_exitprocs+0x144>
   244ec:	a809883a 	mov	r4,r21
   244f0:	00000000 	call	0 <__alt_mem_onchip_mem-0x20000>
   244f4:	9809883a 	mov	r4,r19
   244f8:	00000000 	call	0 <__alt_mem_onchip_mem-0x20000>
   244fc:	8cc00017 	ldw	r19,0(r17)
   24500:	003fbd06 	br	243f8 <__alt_data_end+0xffff03f8>
   24504:	9823883a 	mov	r17,r19
   24508:	2027883a 	mov	r19,r4
   2450c:	003fba06 	br	243f8 <__alt_data_end+0xffff03f8>
   24510:	dfc00a17 	ldw	ra,40(sp)
   24514:	df000917 	ldw	fp,36(sp)
   24518:	ddc00817 	ldw	r23,32(sp)
   2451c:	dd800717 	ldw	r22,28(sp)
   24520:	dd400617 	ldw	r21,24(sp)
   24524:	dd000517 	ldw	r20,20(sp)
   24528:	dcc00417 	ldw	r19,16(sp)
   2452c:	dc800317 	ldw	r18,12(sp)
   24530:	dc400217 	ldw	r17,8(sp)
   24534:	dc000117 	ldw	r16,4(sp)
   24538:	dec00b04 	addi	sp,sp,44
   2453c:	f800283a 	ret

00024540 <__umoddi3>:
   24540:	defff304 	addi	sp,sp,-52
   24544:	df000b15 	stw	fp,44(sp)
   24548:	dc400415 	stw	r17,16(sp)
   2454c:	dc000315 	stw	r16,12(sp)
   24550:	dfc00c15 	stw	ra,48(sp)
   24554:	ddc00a15 	stw	r23,40(sp)
   24558:	dd800915 	stw	r22,36(sp)
   2455c:	dd400815 	stw	r21,32(sp)
   24560:	dd000715 	stw	r20,28(sp)
   24564:	dcc00615 	stw	r19,24(sp)
   24568:	dc800515 	stw	r18,20(sp)
   2456c:	2021883a 	mov	r16,r4
   24570:	2823883a 	mov	r17,r5
   24574:	2839883a 	mov	fp,r5
   24578:	3800401e 	bne	r7,zero,2467c <__umoddi3+0x13c>
   2457c:	3027883a 	mov	r19,r6
   24580:	2029883a 	mov	r20,r4
   24584:	2980552e 	bgeu	r5,r6,246dc <__umoddi3+0x19c>
   24588:	00bfffd4 	movui	r2,65535
   2458c:	1180a236 	bltu	r2,r6,24818 <__umoddi3+0x2d8>
   24590:	01003fc4 	movi	r4,255
   24594:	2189803a 	cmpltu	r4,r4,r6
   24598:	200890fa 	slli	r4,r4,3
   2459c:	3104d83a 	srl	r2,r6,r4
   245a0:	00c000b4 	movhi	r3,2
   245a4:	18d40b84 	addi	r3,r3,20526
   245a8:	1885883a 	add	r2,r3,r2
   245ac:	10c00003 	ldbu	r3,0(r2)
   245b0:	00800804 	movi	r2,32
   245b4:	1909883a 	add	r4,r3,r4
   245b8:	1125c83a 	sub	r18,r2,r4
   245bc:	90000526 	beq	r18,zero,245d4 <__umoddi3+0x94>
   245c0:	8ca2983a 	sll	r17,r17,r18
   245c4:	8108d83a 	srl	r4,r16,r4
   245c8:	34a6983a 	sll	r19,r6,r18
   245cc:	84a8983a 	sll	r20,r16,r18
   245d0:	2478b03a 	or	fp,r4,r17
   245d4:	982cd43a 	srli	r22,r19,16
   245d8:	e009883a 	mov	r4,fp
   245dc:	9dffffcc 	andi	r23,r19,65535
   245e0:	b00b883a 	mov	r5,r22
   245e4:	0022aac0 	call	22aac <__umodsi3>
   245e8:	b00b883a 	mov	r5,r22
   245ec:	e009883a 	mov	r4,fp
   245f0:	102b883a 	mov	r21,r2
   245f4:	0022a480 	call	22a48 <__udivsi3>
   245f8:	100b883a 	mov	r5,r2
   245fc:	b809883a 	mov	r4,r23
   24600:	0022b040 	call	22b04 <__mulsi3>
   24604:	a82a943a 	slli	r21,r21,16
   24608:	a006d43a 	srli	r3,r20,16
   2460c:	1d46b03a 	or	r3,r3,r21
   24610:	1880032e 	bgeu	r3,r2,24620 <__umoddi3+0xe0>
   24614:	1cc7883a 	add	r3,r3,r19
   24618:	1cc00136 	bltu	r3,r19,24620 <__umoddi3+0xe0>
   2461c:	18813136 	bltu	r3,r2,24ae4 <__umoddi3+0x5a4>
   24620:	18a1c83a 	sub	r16,r3,r2
   24624:	b00b883a 	mov	r5,r22
   24628:	8009883a 	mov	r4,r16
   2462c:	0022aac0 	call	22aac <__umodsi3>
   24630:	b00b883a 	mov	r5,r22
   24634:	8009883a 	mov	r4,r16
   24638:	1023883a 	mov	r17,r2
   2463c:	0022a480 	call	22a48 <__udivsi3>
   24640:	100b883a 	mov	r5,r2
   24644:	b809883a 	mov	r4,r23
   24648:	8822943a 	slli	r17,r17,16
   2464c:	0022b040 	call	22b04 <__mulsi3>
   24650:	a0ffffcc 	andi	r3,r20,65535
   24654:	1c46b03a 	or	r3,r3,r17
   24658:	1880042e 	bgeu	r3,r2,2466c <__umoddi3+0x12c>
   2465c:	1cc7883a 	add	r3,r3,r19
   24660:	1cc00236 	bltu	r3,r19,2466c <__umoddi3+0x12c>
   24664:	1880012e 	bgeu	r3,r2,2466c <__umoddi3+0x12c>
   24668:	1cc7883a 	add	r3,r3,r19
   2466c:	1885c83a 	sub	r2,r3,r2
   24670:	1484d83a 	srl	r2,r2,r18
   24674:	0007883a 	mov	r3,zero
   24678:	00005306 	br	247c8 <__umoddi3+0x288>
   2467c:	29c05036 	bltu	r5,r7,247c0 <__umoddi3+0x280>
   24680:	00bfffd4 	movui	r2,65535
   24684:	11c05c2e 	bgeu	r2,r7,247f8 <__umoddi3+0x2b8>
   24688:	00804034 	movhi	r2,256
   2468c:	10bfffc4 	addi	r2,r2,-1
   24690:	11c10636 	bltu	r2,r7,24aac <__umoddi3+0x56c>
   24694:	01000404 	movi	r4,16
   24698:	3904d83a 	srl	r2,r7,r4
   2469c:	00c000b4 	movhi	r3,2
   246a0:	18d40b84 	addi	r3,r3,20526
   246a4:	1885883a 	add	r2,r3,r2
   246a8:	14c00003 	ldbu	r19,0(r2)
   246ac:	00c00804 	movi	r3,32
   246b0:	9927883a 	add	r19,r19,r4
   246b4:	1ce9c83a 	sub	r20,r3,r19
   246b8:	a0005c1e 	bne	r20,zero,2482c <__umoddi3+0x2ec>
   246bc:	3c400136 	bltu	r7,r17,246c4 <__umoddi3+0x184>
   246c0:	81810a36 	bltu	r16,r6,24aec <__umoddi3+0x5ac>
   246c4:	8185c83a 	sub	r2,r16,r6
   246c8:	89e3c83a 	sub	r17,r17,r7
   246cc:	8089803a 	cmpltu	r4,r16,r2
   246d0:	8939c83a 	sub	fp,r17,r4
   246d4:	e007883a 	mov	r3,fp
   246d8:	00003b06 	br	247c8 <__umoddi3+0x288>
   246dc:	3000041e 	bne	r6,zero,246f0 <__umoddi3+0x1b0>
   246e0:	000b883a 	mov	r5,zero
   246e4:	01000044 	movi	r4,1
   246e8:	0022a480 	call	22a48 <__udivsi3>
   246ec:	1027883a 	mov	r19,r2
   246f0:	00bfffd4 	movui	r2,65535
   246f4:	14c0442e 	bgeu	r2,r19,24808 <__umoddi3+0x2c8>
   246f8:	00804034 	movhi	r2,256
   246fc:	10bfffc4 	addi	r2,r2,-1
   24700:	14c0ec36 	bltu	r2,r19,24ab4 <__umoddi3+0x574>
   24704:	00800404 	movi	r2,16
   24708:	9886d83a 	srl	r3,r19,r2
   2470c:	010000b4 	movhi	r4,2
   24710:	21140b84 	addi	r4,r4,20526
   24714:	20c7883a 	add	r3,r4,r3
   24718:	18c00003 	ldbu	r3,0(r3)
   2471c:	1887883a 	add	r3,r3,r2
   24720:	00800804 	movi	r2,32
   24724:	10e5c83a 	sub	r18,r2,r3
   24728:	9000ab1e 	bne	r18,zero,249d8 <__umoddi3+0x498>
   2472c:	982cd43a 	srli	r22,r19,16
   24730:	8ce3c83a 	sub	r17,r17,r19
   24734:	9dffffcc 	andi	r23,r19,65535
   24738:	b00b883a 	mov	r5,r22
   2473c:	8809883a 	mov	r4,r17
   24740:	0022aac0 	call	22aac <__umodsi3>
   24744:	b00b883a 	mov	r5,r22
   24748:	8809883a 	mov	r4,r17
   2474c:	102b883a 	mov	r21,r2
   24750:	0022a480 	call	22a48 <__udivsi3>
   24754:	b80b883a 	mov	r5,r23
   24758:	1009883a 	mov	r4,r2
   2475c:	0022b040 	call	22b04 <__mulsi3>
   24760:	a82a943a 	slli	r21,r21,16
   24764:	a006d43a 	srli	r3,r20,16
   24768:	1d46b03a 	or	r3,r3,r21
   2476c:	1880042e 	bgeu	r3,r2,24780 <__umoddi3+0x240>
   24770:	1cc7883a 	add	r3,r3,r19
   24774:	1cc00236 	bltu	r3,r19,24780 <__umoddi3+0x240>
   24778:	1880012e 	bgeu	r3,r2,24780 <__umoddi3+0x240>
   2477c:	1cc7883a 	add	r3,r3,r19
   24780:	18a1c83a 	sub	r16,r3,r2
   24784:	b00b883a 	mov	r5,r22
   24788:	8009883a 	mov	r4,r16
   2478c:	0022aac0 	call	22aac <__umodsi3>
   24790:	1023883a 	mov	r17,r2
   24794:	b00b883a 	mov	r5,r22
   24798:	8009883a 	mov	r4,r16
   2479c:	0022a480 	call	22a48 <__udivsi3>
   247a0:	8822943a 	slli	r17,r17,16
   247a4:	b80b883a 	mov	r5,r23
   247a8:	1009883a 	mov	r4,r2
   247ac:	0022b040 	call	22b04 <__mulsi3>
   247b0:	a53fffcc 	andi	r20,r20,65535
   247b4:	a446b03a 	or	r3,r20,r17
   247b8:	18bfac2e 	bgeu	r3,r2,2466c <__alt_data_end+0xffff066c>
   247bc:	003fa706 	br	2465c <__alt_data_end+0xffff065c>
   247c0:	2005883a 	mov	r2,r4
   247c4:	2807883a 	mov	r3,r5
   247c8:	dfc00c17 	ldw	ra,48(sp)
   247cc:	df000b17 	ldw	fp,44(sp)
   247d0:	ddc00a17 	ldw	r23,40(sp)
   247d4:	dd800917 	ldw	r22,36(sp)
   247d8:	dd400817 	ldw	r21,32(sp)
   247dc:	dd000717 	ldw	r20,28(sp)
   247e0:	dcc00617 	ldw	r19,24(sp)
   247e4:	dc800517 	ldw	r18,20(sp)
   247e8:	dc400417 	ldw	r17,16(sp)
   247ec:	dc000317 	ldw	r16,12(sp)
   247f0:	dec00d04 	addi	sp,sp,52
   247f4:	f800283a 	ret
   247f8:	04c03fc4 	movi	r19,255
   247fc:	99c9803a 	cmpltu	r4,r19,r7
   24800:	200890fa 	slli	r4,r4,3
   24804:	003fa406 	br	24698 <__alt_data_end+0xffff0698>
   24808:	00803fc4 	movi	r2,255
   2480c:	14c5803a 	cmpltu	r2,r2,r19
   24810:	100490fa 	slli	r2,r2,3
   24814:	003fbc06 	br	24708 <__alt_data_end+0xffff0708>
   24818:	00804034 	movhi	r2,256
   2481c:	10bfffc4 	addi	r2,r2,-1
   24820:	1180a636 	bltu	r2,r6,24abc <__umoddi3+0x57c>
   24824:	01000404 	movi	r4,16
   24828:	003f5c06 	br	2459c <__alt_data_end+0xffff059c>
   2482c:	3d0e983a 	sll	r7,r7,r20
   24830:	34ead83a 	srl	r21,r6,r19
   24834:	8cc6d83a 	srl	r3,r17,r19
   24838:	8d10983a 	sll	r8,r17,r20
   2483c:	3d6ab03a 	or	r21,r7,r21
   24840:	a82cd43a 	srli	r22,r21,16
   24844:	84e2d83a 	srl	r17,r16,r19
   24848:	1809883a 	mov	r4,r3
   2484c:	b00b883a 	mov	r5,r22
   24850:	8a22b03a 	or	r17,r17,r8
   24854:	3524983a 	sll	r18,r6,r20
   24858:	dc400015 	stw	r17,0(sp)
   2485c:	d8c00115 	stw	r3,4(sp)
   24860:	0022aac0 	call	22aac <__umodsi3>
   24864:	d8c00117 	ldw	r3,4(sp)
   24868:	b00b883a 	mov	r5,r22
   2486c:	1039883a 	mov	fp,r2
   24870:	1809883a 	mov	r4,r3
   24874:	0022a480 	call	22a48 <__udivsi3>
   24878:	adffffcc 	andi	r23,r21,65535
   2487c:	100b883a 	mov	r5,r2
   24880:	b809883a 	mov	r4,r23
   24884:	1023883a 	mov	r17,r2
   24888:	0022b040 	call	22b04 <__mulsi3>
   2488c:	d9400017 	ldw	r5,0(sp)
   24890:	e008943a 	slli	r4,fp,16
   24894:	8520983a 	sll	r16,r16,r20
   24898:	2806d43a 	srli	r3,r5,16
   2489c:	1906b03a 	or	r3,r3,r4
   248a0:	1880042e 	bgeu	r3,r2,248b4 <__umoddi3+0x374>
   248a4:	1d47883a 	add	r3,r3,r21
   248a8:	893fffc4 	addi	r4,r17,-1
   248ac:	1d40892e 	bgeu	r3,r21,24ad4 <__umoddi3+0x594>
   248b0:	2023883a 	mov	r17,r4
   248b4:	18b9c83a 	sub	fp,r3,r2
   248b8:	b00b883a 	mov	r5,r22
   248bc:	e009883a 	mov	r4,fp
   248c0:	0022aac0 	call	22aac <__umodsi3>
   248c4:	b00b883a 	mov	r5,r22
   248c8:	e009883a 	mov	r4,fp
   248cc:	d8800215 	stw	r2,8(sp)
   248d0:	0022a480 	call	22a48 <__udivsi3>
   248d4:	100b883a 	mov	r5,r2
   248d8:	b809883a 	mov	r4,r23
   248dc:	102d883a 	mov	r22,r2
   248e0:	0022b040 	call	22b04 <__mulsi3>
   248e4:	d9800217 	ldw	r6,8(sp)
   248e8:	d8c00017 	ldw	r3,0(sp)
   248ec:	300c943a 	slli	r6,r6,16
   248f0:	1a3fffcc 	andi	r8,r3,65535
   248f4:	4190b03a 	or	r8,r8,r6
   248f8:	4080042e 	bgeu	r8,r2,2490c <__umoddi3+0x3cc>
   248fc:	4551883a 	add	r8,r8,r21
   24900:	b0ffffc4 	addi	r3,r22,-1
   24904:	45406f2e 	bgeu	r8,r21,24ac4 <__umoddi3+0x584>
   24908:	182d883a 	mov	r22,r3
   2490c:	880e943a 	slli	r7,r17,16
   24910:	9006d43a 	srli	r3,r18,16
   24914:	91bfffcc 	andi	r6,r18,65535
   24918:	3dacb03a 	or	r22,r7,r22
   2491c:	b02ed43a 	srli	r23,r22,16
   24920:	b5bfffcc 	andi	r22,r22,65535
   24924:	300b883a 	mov	r5,r6
   24928:	b009883a 	mov	r4,r22
   2492c:	40a3c83a 	sub	r17,r8,r2
   24930:	d8c00115 	stw	r3,4(sp)
   24934:	d9800215 	stw	r6,8(sp)
   24938:	0022b040 	call	22b04 <__mulsi3>
   2493c:	d9800217 	ldw	r6,8(sp)
   24940:	b809883a 	mov	r4,r23
   24944:	1039883a 	mov	fp,r2
   24948:	300b883a 	mov	r5,r6
   2494c:	0022b040 	call	22b04 <__mulsi3>
   24950:	d8c00117 	ldw	r3,4(sp)
   24954:	b809883a 	mov	r4,r23
   24958:	d8800215 	stw	r2,8(sp)
   2495c:	180b883a 	mov	r5,r3
   24960:	0022b040 	call	22b04 <__mulsi3>
   24964:	d8c00117 	ldw	r3,4(sp)
   24968:	b009883a 	mov	r4,r22
   2496c:	102f883a 	mov	r23,r2
   24970:	180b883a 	mov	r5,r3
   24974:	0022b040 	call	22b04 <__mulsi3>
   24978:	d9800217 	ldw	r6,8(sp)
   2497c:	e006d43a 	srli	r3,fp,16
   24980:	1185883a 	add	r2,r2,r6
   24984:	1885883a 	add	r2,r3,r2
   24988:	1180022e 	bgeu	r2,r6,24994 <__umoddi3+0x454>
   2498c:	00c00074 	movhi	r3,1
   24990:	b8ef883a 	add	r23,r23,r3
   24994:	1006d43a 	srli	r3,r2,16
   24998:	1004943a 	slli	r2,r2,16
   2499c:	e73fffcc 	andi	fp,fp,65535
   249a0:	1dc7883a 	add	r3,r3,r23
   249a4:	1739883a 	add	fp,r2,fp
   249a8:	88c03a36 	bltu	r17,r3,24a94 <__umoddi3+0x554>
   249ac:	88c05126 	beq	r17,r3,24af4 <__umoddi3+0x5b4>
   249b0:	88c9c83a 	sub	r4,r17,r3
   249b4:	e00f883a 	mov	r7,fp
   249b8:	81cfc83a 	sub	r7,r16,r7
   249bc:	81c7803a 	cmpltu	r3,r16,r7
   249c0:	20c7c83a 	sub	r3,r4,r3
   249c4:	1cc4983a 	sll	r2,r3,r19
   249c8:	3d0ed83a 	srl	r7,r7,r20
   249cc:	1d06d83a 	srl	r3,r3,r20
   249d0:	11c4b03a 	or	r2,r2,r7
   249d4:	003f7c06 	br	247c8 <__alt_data_end+0xffff07c8>
   249d8:	9ca6983a 	sll	r19,r19,r18
   249dc:	88f8d83a 	srl	fp,r17,r3
   249e0:	80c4d83a 	srl	r2,r16,r3
   249e4:	982cd43a 	srli	r22,r19,16
   249e8:	8ca2983a 	sll	r17,r17,r18
   249ec:	e009883a 	mov	r4,fp
   249f0:	b00b883a 	mov	r5,r22
   249f4:	146ab03a 	or	r21,r2,r17
   249f8:	0022aac0 	call	22aac <__umodsi3>
   249fc:	b00b883a 	mov	r5,r22
   24a00:	e009883a 	mov	r4,fp
   24a04:	1029883a 	mov	r20,r2
   24a08:	9dffffcc 	andi	r23,r19,65535
   24a0c:	0022a480 	call	22a48 <__udivsi3>
   24a10:	b809883a 	mov	r4,r23
   24a14:	100b883a 	mov	r5,r2
   24a18:	0022b040 	call	22b04 <__mulsi3>
   24a1c:	a008943a 	slli	r4,r20,16
   24a20:	a806d43a 	srli	r3,r21,16
   24a24:	84a8983a 	sll	r20,r16,r18
   24a28:	1906b03a 	or	r3,r3,r4
   24a2c:	1880042e 	bgeu	r3,r2,24a40 <__umoddi3+0x500>
   24a30:	1cc7883a 	add	r3,r3,r19
   24a34:	1cc00236 	bltu	r3,r19,24a40 <__umoddi3+0x500>
   24a38:	1880012e 	bgeu	r3,r2,24a40 <__umoddi3+0x500>
   24a3c:	1cc7883a 	add	r3,r3,r19
   24a40:	18a3c83a 	sub	r17,r3,r2
   24a44:	b00b883a 	mov	r5,r22
   24a48:	8809883a 	mov	r4,r17
   24a4c:	0022aac0 	call	22aac <__umodsi3>
   24a50:	b00b883a 	mov	r5,r22
   24a54:	8809883a 	mov	r4,r17
   24a58:	1021883a 	mov	r16,r2
   24a5c:	0022a480 	call	22a48 <__udivsi3>
   24a60:	100b883a 	mov	r5,r2
   24a64:	b809883a 	mov	r4,r23
   24a68:	8020943a 	slli	r16,r16,16
   24a6c:	0022b040 	call	22b04 <__mulsi3>
   24a70:	a8ffffcc 	andi	r3,r21,65535
   24a74:	1c06b03a 	or	r3,r3,r16
   24a78:	1880042e 	bgeu	r3,r2,24a8c <__umoddi3+0x54c>
   24a7c:	1cc7883a 	add	r3,r3,r19
   24a80:	1cc00236 	bltu	r3,r19,24a8c <__umoddi3+0x54c>
   24a84:	1880012e 	bgeu	r3,r2,24a8c <__umoddi3+0x54c>
   24a88:	1cc7883a 	add	r3,r3,r19
   24a8c:	18a3c83a 	sub	r17,r3,r2
   24a90:	003f2906 	br	24738 <__alt_data_end+0xffff0738>
   24a94:	e48fc83a 	sub	r7,fp,r18
   24a98:	1d49c83a 	sub	r4,r3,r21
   24a9c:	e1f9803a 	cmpltu	fp,fp,r7
   24aa0:	2739c83a 	sub	fp,r4,fp
   24aa4:	8f09c83a 	sub	r4,r17,fp
   24aa8:	003fc306 	br	249b8 <__alt_data_end+0xffff09b8>
   24aac:	01000604 	movi	r4,24
   24ab0:	003ef906 	br	24698 <__alt_data_end+0xffff0698>
   24ab4:	00800604 	movi	r2,24
   24ab8:	003f1306 	br	24708 <__alt_data_end+0xffff0708>
   24abc:	01000604 	movi	r4,24
   24ac0:	003eb606 	br	2459c <__alt_data_end+0xffff059c>
   24ac4:	40bf902e 	bgeu	r8,r2,24908 <__alt_data_end+0xffff0908>
   24ac8:	b5bfff84 	addi	r22,r22,-2
   24acc:	4551883a 	add	r8,r8,r21
   24ad0:	003f8e06 	br	2490c <__alt_data_end+0xffff090c>
   24ad4:	18bf762e 	bgeu	r3,r2,248b0 <__alt_data_end+0xffff08b0>
   24ad8:	8c7fff84 	addi	r17,r17,-2
   24adc:	1d47883a 	add	r3,r3,r21
   24ae0:	003f7406 	br	248b4 <__alt_data_end+0xffff08b4>
   24ae4:	1cc7883a 	add	r3,r3,r19
   24ae8:	003ecd06 	br	24620 <__alt_data_end+0xffff0620>
   24aec:	8005883a 	mov	r2,r16
   24af0:	003ef806 	br	246d4 <__alt_data_end+0xffff06d4>
   24af4:	873fe736 	bltu	r16,fp,24a94 <__alt_data_end+0xffff0a94>
   24af8:	e00f883a 	mov	r7,fp
   24afc:	0009883a 	mov	r4,zero
   24b00:	003fad06 	br	249b8 <__alt_data_end+0xffff09b8>

00024b04 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   24b04:	defffd04 	addi	sp,sp,-12
   24b08:	df000215 	stw	fp,8(sp)
   24b0c:	df000204 	addi	fp,sp,8
   24b10:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   24b14:	0001883a 	nop
   24b18:	e0bfff17 	ldw	r2,-4(fp)
   24b1c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   24b20:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   24b24:	10000226 	beq	r2,zero,24b30 <_exit+0x2c>
    ALT_SIM_FAIL();
   24b28:	002af070 	cmpltui	zero,zero,43969
   24b2c:	00000106 	br	24b34 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   24b30:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   24b34:	003fff06 	br	24b34 <__alt_data_end+0xffff0b34>
